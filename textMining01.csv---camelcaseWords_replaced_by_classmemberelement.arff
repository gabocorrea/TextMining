@relation 'dataset_corrected_only_comments_and_manually_revised_subset_(only comments and class)'

@attribute text STRING
@attribute __directive_class__ {directive,non-directive}

@data
' Provides support for dialogs. <h2> Package Specification</h2> A dialog is a specialized window, typically consisting of a dialog area and a button bar, designed for narrow-focussed communication with the user. <p>The dialog framework consists of an abstract base class (<tt>Dialog</tt>), along with more concrete dialog subclasses for displaying messages (<tt>_ClassElement_</tt>), soliciting text input (<tt>_ClassElement_</tt>), and displaying progress during a long-running operation (<tt>_ClassElement_</tt>). <p>Dialog stores (<tt>IDialogStore</tt>, <tt>_ClassElement_</tt>) provide a general framework for organizing a dialog\'s settings into _OSPathElement_value pairs. Multi-page dialogs are made easier through the use of dialog pages (<tt>IDialogPage</tt>, <tt>_ClassElement_</tt>). <p>Note: None of the classes in this package maintain global state. <br>&nbsp; <br>&nbsp; <br>&nbsp; ',directive
' Provides support for dialogs. ',non-directive
'<h2> Package Specification</h2> A dialog is a specialized window, typically consisting of a dialog area and a button bar, designed for narrow-focussed communication with the user. ',non-directive
'<p>The dialog framework consists of an abstract base class (<tt>Dialog</tt>), along with more concrete dialog subclasses for displaying messages (<tt>_ClassElement_</tt>), soliciting text input (<tt>_ClassElement_</tt>), and displaying progress during a long-running operation (<tt>_ClassElement_</tt>). ',directive
'<p>Dialog stores (<tt>IDialogStore</tt>, <tt>_ClassElement_</tt>) provide a general framework for organizing a dialog\'s settings into _OSPathElement_value pairs. ',non-directive
'Multi-page dialogs are made easier through the use of dialog pages (<tt>IDialogPage</tt>, <tt>_ClassElement_</tt>). ',non-directive
'<p>Note: None of the classes in this package maintain global state. <br>&nbsp; ',directive
'<br>&nbsp; <br>&nbsp; ',non-directive
' Provides support for layout generation.  <h2> Package Specification</h2> <p> This package provides classes that can be used to generate layouts. ',non-directive
' Provides support for layout generation.  ',non-directive
'<h2> Package Specification</h2> <p> This package provides classes that can be used to generate layouts. ',non-directive
' Provides support for managing resources such as SWT fonts and images. <h2> Package Specification</h2> This package contains support for managing resources, including: <ul> <li> font registries (<tt>_ClassElement_</tt>) - for hanging on to the SWT font objects needed by an application</li>  <li> color registries (<tt>_ClassElement_</tt>) - for hanging on to the SWT color  objects needed by an application</li>  <li> image registries (<tt>_ClassElement_</tt>) - for hanging on to the SWT image objects needed by an application</li>  <li> image descriptors (<tt>_ClassElement_</tt>) - surrogate object for creating SWT images</li>  <li> string conversion (<tt>_ClassElement_</tt>) - for parsing property files</li> </ul> The JFace resources module is an independent JFace module requiring a basic knowledge of SWT and the JFace property change event mechanism. Familiarity with other JFace modules is not required. <p>Image descriptors are objects that knows how to create an image on demand. They serve as a lightweight representation of images in situations where no SWT display exists yet, and are used mainly in conjunction with image registries. This package contains the image descriptor framework, which is a simple hierarchy rooted at the abstract class <tt>_ClassElement_</tt>. The framework includes abstract subclasses for composing images (<tt>_ClassElement_</tt>) as well as a ready-made concrete subclass for loading images from files (<tt>_ClassElement_</tt>). <p>The class <tt>JFaceResources</tt> maintains global state on behalf of JFace itself consisting of JFace\'s own image registry, font registry, resource bundle, and preference store. <br>&nbsp; ',directive
' Provides support for managing resources such as SWT fonts and images. ',non-directive
'<h2> Package Specification</h2> This package contains support for managing resources, including: <ul> ',non-directive
'<li> font registries (<tt>_ClassElement_</tt>) - for hanging on to the SWT font objects needed by an application</li>  ',non-directive
'<li> color registries (<tt>_ClassElement_</tt>) - for hanging on to the SWT color  objects needed by an application</li>  ',non-directive
'<li> image registries (<tt>_ClassElement_</tt>) - for hanging on to the SWT image objects needed by an application</li>  ',non-directive
'<li> image descriptors (<tt>_ClassElement_</tt>) - surrogate object for creating SWT images</li>  ',non-directive
'<li> string conversion (<tt>_ClassElement_</tt>) - for parsing property files</li> </ul> ',non-directive
'The JFace resources module is an independent JFace module requiring a basic knowledge of SWT and the JFace property change event mechanism. ',non-directive
'Familiarity with other JFace modules is not required. ',directive
'<p>Image descriptors are objects that knows how to create an image on demand. ',non-directive
'They serve as a lightweight representation of images in situations where no SWT display exists yet, and are used mainly in conjunction with image registries. ',non-directive
'This package contains the image descriptor framework, which is a simple hierarchy rooted at the abstract class <tt>_ClassElement_</tt>. ',non-directive
'The framework includes abstract subclasses for composing images (<tt>_ClassElement_</tt>) as well as a ready-made concrete subclass for loading images from files (<tt>_ClassElement_</tt>). ',directive
'<p>The class <tt>JFaceResources</tt> maintains global state on behalf of JFace itself consisting of JFace\'s own image registry, font registry, resource bundle, and preference store. <br>&nbsp; ',non-directive
?,non-directive
' Provides JFace support for long-running operations. <h2> Package Specification</h2> Long-running operations must be dealt with specially in order to keep the UI helpful and responsive. Typically this involves temporarily disabling most controls and displaying a busy cursor and progress indicator; while the operation is in progress, the only requests that will be accepted will be ones to cancel the operation. <p>The <tt>IRunnableWithProgress</tt> interface should be implemented by any class whose instances are intended to be executed as long-running operations. These objects can then be run in any runnable context (<tt>IRunnableContext</tt>), including such standard JFace UI components as application windows (<tt>_ClassElement_</tt>), wizard dialogs (<tt>_ClassElement_</tt>), and progress monitor dialogs (<tt>_ClassElement_</tt>). The utility class <tt>_ClassElement_</tt> defines the basic mechanism and UI event loop for modal operations. ',directive
' Provides JFace support for long-running operations. ',non-directive
'<h2> Package Specification</h2> Long-running operations must be dealt with specially in order to keep the UI helpful and responsive. ',directive
'Typically this involves temporarily disabling most controls and displaying a busy cursor and progress indicator; while the operation is in progress, the only requests that will be accepted will be ones to cancel the operation. ',directive
'<p>The <tt>IRunnableWithProgress</tt> interface should be implemented by any class whose instances are intended to be executed as long-running operations. ',directive
'These objects can then be run in any runnable context (<tt>IRunnableContext</tt>), including such standard JFace UI components as application windows (<tt>_ClassElement_</tt>), wizard dialogs (<tt>_ClassElement_</tt>), and progress monitor dialogs (<tt>_ClassElement_</tt>). ',non-directive
'The utility class <tt>_ClassElement_</tt> defines the basic mechanism and UI event loop for modal operations. ',non-directive
' Provides a content assist add-on for implementors of <tt>IContentAssistSubjectControl</tt>. Content assist supports the user in writing&nbsp; by proposing context sensitive completions at a given position. A completion can also be a incomplete in itself and content assist provides means to deal with nested completions. <h2> Package Specification</h2> <tt>ISubjectControlContentAssistant</tt> defines the concept of the content assist add-on. It collaborates with content type specific completion processors (<tt>ISubjectControlContentAssistProcessor</tt>) in order to generate completion proposals (<tt>ICompletionProposal</tt>) valid at the current document position. The package provides a default implementation <tt>_ClassElement_</tt> which completely defines and implements the UI and the control flow for content assist. <br> <br> <strong>Deprecated, as of _ClassPathElement_, replaced by Platform UI\'s field assist support</strong> ',directive
' Provides a content assist add-on for implementors of <tt>IContentAssistSubjectControl</tt>. ',non-directive
'Content assist supports the user in writing&nbsp; by proposing context sensitive completions at a given position. ',non-directive
'A completion can also be a incomplete in itself and content assist provides means to deal with nested completions. ',non-directive
'<h2> Package Specification</h2> <tt>ISubjectControlContentAssistant</tt> defines the concept of the content assist add-on. ',non-directive
'It collaborates with content type specific completion processors (<tt>ISubjectControlContentAssistProcessor</tt>) in order to generate completion proposals (<tt>ICompletionProposal</tt>) valid at the current document position. ',non-directive
'The package provides a default implementation <tt>_ClassElement_</tt> which completely defines and implements the UI and the control flow for content assist. <br> ',non-directive
'<br> <strong>Deprecated, as of _ClassPathElement_, replaced by Platform UI\'s field assist support</strong> ',directive
' Provides a framework for preferences. <h2> Package Specification</h2> A <b>preference manager</b> (class <tt>_ClassElement_</tt>) maintains a tree of <b>preference nodes</b>. Preferences are presented to the end user in a <b>preference dialog</b> consisting of <b>preference pages</b>. A preference page consists of multiple preference fields, which can be displayed and modified though <b>field editors</b>. The framework contains an abstract base class for preference dialogs (<tt>_ClassElement_</tt>), and an abstract preference page class (<tt>_ClassElement_</tt>) for hosting these field editors. <p>The individual preference values are maintained in a <b>preference store</b> (<tt>IPreferenceStore</tt>). Each preference has a current value and a default value use to (re-)initialize it. The framework provides a concrete preference store implementation (<tt>_ClassElement_</tt>) based on an internal <tt>_ClassPathElement_</tt> object, with support for persisting the non-default preference values to files or streams. <p>A field editor presents the value of a single preference to the end user. The value is loaded from the preference store; if modified by the end user, the value is validated and eventually stored back to the preference store. <p>This package contains ready-to-use field editors for various types of preferences: <ul> <li> <tt>_ClassElement_</tt> - booleans</li>  <li> <tt>_ClassElement_</tt> - integers</li>  <li> <tt>_ClassElement_</tt> - text strings</li>  <li> <tt>_ClassElement_</tt> - enumerations</li>  <li> <tt>_ClassElement_</tt> - RGB colors</li>  <li> <tt>_ClassElement_</tt> - fonts</li>  <li> <tt>_ClassElement_</tt> - directories</li>  <li> <tt>_ClassElement_</tt> - files</li>  <li> <tt>_ClassElement_</tt> - paths</li> </ul> All field editors are subclasses of the abstract base class <tt>_ClassElement_</tt>; the framework allows new kinds of field editors to be defined by subclassing this class or one of its subclasses. <p>Note: None of the classes in this package maintain global state. <br>&nbsp; ',directive
' Provides a framework for preferences. ',non-directive
'<h2> Package Specification</h2> A <b>preference manager</b> (class <tt>_ClassElement_</tt>) maintains a tree of <b>preference nodes</b>. ',non-directive
'Preferences are presented to the end user in a <b>preference dialog</b> consisting of <b>preference pages</b>. ',non-directive
'A preference page consists of multiple preference fields, which can be displayed and modified though <b>field editors</b>. ',non-directive
'The framework contains an abstract base class for preference dialogs (<tt>_ClassElement_</tt>), and an abstract preference page class (<tt>_ClassElement_</tt>) for hosting these field editors. ',non-directive
'<p>The individual preference values are maintained in a <b>preference store</b> (<tt>IPreferenceStore</tt>). ',non-directive
'Each preference has a current value and a default value use to (re-)initialize it. ',non-directive
'The framework provides a concrete preference store implementation (<tt>_ClassElement_</tt>) based on an internal <tt>_ClassPathElement_</tt> object, with support for persisting the non-default preference values to files or streams. ',non-directive
'<p>A field editor presents the value of a single preference to the end user. ',non-directive
'The value is loaded from the preference store; if modified by the end user, the value is validated and eventually stored back to the preference store. ',non-directive
'<p>This package contains ready-to-use field editors for various types of preferences: <ul> ',non-directive
'<li> <tt>_ClassElement_</tt> - booleans</li>  ',non-directive
'<li> <tt>_ClassElement_</tt> - integers</li>  ',non-directive
'<li> <tt>_ClassElement_</tt> - text strings</li>  ',non-directive
'<li> <tt>_ClassElement_</tt> - enumerations</li>  ',non-directive
'<li> <tt>_ClassElement_</tt> - RGB colors</li>  ',non-directive
'<li> <tt>_ClassElement_</tt> - fonts</li>  ',non-directive
'<li> <tt>_ClassElement_</tt> - directories</li>  ',non-directive
'<li> <tt>_ClassElement_</tt> - files</li>  ',non-directive
'<li> <tt>_ClassElement_</tt> - paths</li> </ul> ',non-directive
'All field editors are subclasses of the abstract base class <tt>_ClassElement_</tt>; the framework allows new kinds of field editors to be defined by subclassing this class or one of its subclasses. ',directive
'<p>Note: None of the classes in this package maintain global state. <br>&nbsp; ',directive
?,non-directive
' Provides a framework for wizards. <h2> Package Specification</h2> A wizard dialog is a specialized window for walking the end user through a sequence of steps; each step is presented on a separate page. <p>At the most abstract level, the protocol is given by 3 interfaces: <ul> <li> <tt>IWizard</tt> - a wizard consisting of several wizard pages</li>  <li> <tt>IWizardPage</tt> - an individual wizard page</li>  <li> <tt>IWizardContainer</tt> - the outside world from the point of view of a wizard</li> </ul> A wizard is any object implementing <tt>IWizard</tt>. The abstract base class <tt>Wizard</tt> is provided as a starting point; it is simpler to subclass <tt>Wizard</tt> than to implement <tt>IWizard</tt> from scratch. The main responsibility of a <tt>Wizard</tt> subclass is doing the real work when the wizard finishes. <p>Similarly, a wizard page is any object implementing <tt>IWizardPage</tt>. The abstract base class <tt>_ClassElement_</tt> is provided as a starting point. The main responsibility of a <tt>_ClassElement_</tt> subclass is providing the SWT controls and the backing logic for a single wizard page. <p><tt>_ClassElement_</tt> is a ready-to-use JFace dialog that is instantiated with a wizard and acts as the wizard\'s container. This dialog has a standard layout: an area at the top containing the wizard\'s title, description, and image; the actual wizard page appears in the middle; below it is a progress indicator; and at the bottom is an area with a message line and a button bar containing Next, Back, Finish, Cancel, and Help buttons. <p><tt>_ClassElement_</tt>, a special abstract subclass of <tt>_ClassElement_</tt>, allows whole other wizards to be connected to a root page. <p>Note: None of the classes in this package maintain global state. <br>&nbsp; ',directive
' Provides a framework for wizards. ',non-directive
'<h2> Package Specification</h2> A wizard dialog is a specialized window for walking the end user through a sequence of steps; each step is presented on a separate page. ',non-directive
'<p>At the most abstract level, the protocol is given by 3 interfaces: <ul> ',non-directive
'<li> <tt>IWizard</tt> - a wizard consisting of several wizard pages</li>  ',non-directive
'<li> <tt>IWizardPage</tt> - an individual wizard page</li>  ',non-directive
'<li> <tt>IWizardContainer</tt> - the outside world from the point of view of a wizard</li> </ul> ',non-directive
'A wizard is any object implementing <tt>IWizard</tt>. ',non-directive
'The abstract base class <tt>Wizard</tt> is provided as a starting point; it is simpler to subclass <tt>Wizard</tt> than to implement <tt>IWizard</tt> from scratch. ',non-directive
'The main responsibility of a <tt>Wizard</tt> subclass is doing the real work when the wizard finishes. ',directive
'<p>Similarly, a wizard page is any object implementing <tt>IWizardPage</tt>. ',non-directive
'The abstract base class <tt>_ClassElement_</tt> is provided as a starting point. ',non-directive
'The main responsibility of a <tt>_ClassElement_</tt> subclass is providing the SWT controls and the backing logic for a single wizard page. ',directive
'<p><tt>_ClassElement_</tt> is a ready-to-use JFace dialog that is instantiated with a wizard and acts as the wizard\'s container. ',non-directive
'This dialog has a standard layout: an area at the top containing the wizard\'s title, description, and image; the actual wizard page appears in the middle; below it is a progress indicator; and at the bottom is an area with a message line and a button bar containing Next, Back, Finish, Cancel, and Help buttons. ',non-directive
'<p><tt>_ClassElement_</tt>, a special abstract subclass of <tt>_ClassElement_</tt>, allows whole other wizards to be connected to a root page. ',directive
'<p>Note: None of the classes in this package maintain global state. <br>&nbsp; ',directive
?,non-directive
?,non-directive
?,non-directive
' <p> Internal classes and helpers to implement the revision model and its UI presentation. See the <tt><a href=\"_ClassPathElement_\">_ClassPathElement_</a></tt> package for the API classes implementing the revision model. </p> Contains everything needed to: <ul>   <li>paint revision information in the vertical ruler</li>   <li>adapt the revision information to (quick) diff scripts</li> </ul> <p> This package is internal and may be subject to change without notice. </p> ',directive
' <p> Internal classes and helpers to implement the revision model and its UI presentation. ',non-directive
'See the <tt><a href=\"_ClassPathElement_\">_ClassPathElement_</a></tt> package for the API classes implementing the revision model. ',non-directive
'</p> Contains everything needed to: <ul>   ',non-directive
'<li>paint revision information in the vertical ruler</li>   ',non-directive
'<li>adapt the revision information to (quick) diff scripts</li> </ul> ',directive
'<p> This package is internal and may be subject to change without notice. ',directive
'</p> ',non-directive
' This package is a modified copy of <code>_ClassPathElement_</code> that supports the linked mode proposals. This package is internal and may disappear if the changes are merged with the API content assist package. Subject to change without notice. ',directive
' This package is a modified copy of <code>_ClassPathElement_</code> that supports the linked mode proposals. ',non-directive
'This package is internal and may disappear if the changes are merged with the API content assist package. ',directive
'Subject to change without notice. ',non-directive
?,non-directive
?,non-directive
' <p> Internal support classes and helpers for the <tt>_ClassPathElement_</tt> package. ',non-directive
' <p> Internal support classes and helpers for the <tt>_ClassPathElement_</tt> package. ',non-directive
' <p>Provides support for bindings between commands and various user input events (_ClassPathElement_., keyboard shortcuts).</p>  <h2>Package Specification</h2> <p> This package provides the common classes and abstract classes required to provide binding support. </p> <p> All the real work in this package is carried out by the <code>_ClassElement_</code>, and most work with bindings can be carried out directly with it.  The binding manager manages a collection of bindings, and decides which bindings are active at any point in time.  By changes the various properties of the manager, the active bindings will change.  The binding manager implements a caching scheme that is optimized for an infreqeuntly changing set of bindings, but frequently changing properties. </p> <p> The binding manager also manages schemes.  A scheme is a grouping of bindings. To create a scheme, use <code>_ClassPathElement_(String)</code>.  The scheme must then be defined before it can be used. </p> <p> If you wish to implement your own type of binding, then you must subclass <code>Trigger</code> and <code>_ClassElement_</code>.  Then, simply use these subclasses with the <code>_ClassElement_</code>. </p> ',directive
' <p>Provides support for bindings between commands and various user input events (_ClassPathElement_., keyboard shortcuts).</p>  <h2>Package Specification</h2> <p> This package provides the common classes and abstract classes required to provide binding support. ',directive
'</p> <p> All the real work in this package is carried out by the <code>_ClassElement_</code>, and most work with bindings can be carried out directly with it.  ',non-directive
'The binding manager manages a collection of bindings, and decides which bindings are active at any point in time.  ',non-directive
'By changes the various properties of the manager, the active bindings will change.  ',non-directive
'The binding manager implements a caching scheme that is optimized for an infreqeuntly changing set of bindings, but frequently changing properties. ',non-directive
'</p> <p> The binding manager also manages schemes.  ',non-directive
'A scheme is a grouping of bindings. ',non-directive
'To create a scheme, use <code>_ClassPathElement_(String)</code>.  ',non-directive
'The scheme must then be defined before it can be used. ',directive
'</p> <p> If you wish to implement your own type of binding, then you must subclass <code>Trigger</code> and <code>_ClassElement_</code>.  ',directive
'Then, simply use these subclasses with the <code>_ClassElement_</code>. ',non-directive
'</p> ',non-directive
' <p>Provides support for bindings between commands and keys.</p>  <h2>Package Specification</h2> <p> This just a key-specific implementation of the generic bindings and trigger support.  This package provides an abstraction layer between the SWT key events and key bindings within JFace. </p> <p> <code>_ClassElement_</code> is a <code>_ClassElement_</code> that has <code>_ClassElement_</code> instances as triggers.  A <code>_ClassElement_</code> is composed of one or more keys held down at the same time.  A key stroke ends when the keys are released.  A key stroke can contain zero or more modifiers keys, but it always contains exactly one natural key.  A modifier key is one of Ctrl, Shift, Alt, or Command.  A natural key is anything else.</p> <p> Natural keys are further subdivided into special keys and character keys. Character keys are keys that have an ASCII representation (_ClassPathElement_., Space, \'A\' and Backspace).  Special keys are ones that do not (_ClassPathElement_., Arrow Up, F11, and _ClassElement_). </p> <p> <code>SWTKeySupport</code> is a static class that provides the link between SWT and these internal representations.  It has methods for converting between SWT key events and the internal representation, and vice versa.  It also provides access to the native-style key formatting facilities. </p> ',directive
' <p>Provides support for bindings between commands and keys.</p>  <h2>Package Specification</h2> <p> This just a key-specific implementation of the generic bindings and trigger support.  ',directive
'This package provides an abstraction layer between the SWT key events and key bindings within JFace. ',directive
'</p> <p> <code>_ClassElement_</code> is a <code>_ClassElement_</code> that has <code>_ClassElement_</code> instances as triggers.  ',non-directive
'A <code>_ClassElement_</code> is composed of one or more keys held down at the same time.  ',non-directive
'A key stroke ends when the keys are released.  ',non-directive
'A key stroke can contain zero or more modifiers keys, but it always contains exactly one natural key.  ',non-directive
'A modifier key is one of Ctrl, Shift, Alt, or Command.  ',non-directive
'A natural key is anything else.</p> <p> Natural keys are further subdivided into special keys and character keys. ',non-directive
'Character keys are keys that have an ASCII representation (_ClassPathElement_., Space, \'A\' and Backspace).  ',non-directive
'Special keys are ones that do not (_ClassPathElement_., Arrow Up, F11, and _ClassElement_). ',non-directive
'</p> <p> <code>SWTKeySupport</code> is a static class that provides the link between SWT and these internal representations.  ',directive
'It has methods for converting between SWT key events and the internal representation, and vice versa.  ',directive
'It also provides access to the native-style key formatting facilities. ',non-directive
'</p> ',non-directive
' <p>Provides support for formatting key sequences.</p>  <h2>Package Specification</h2> <p> This is a collection fo various formatters for key sequences.  The formatters are accessible through the <code>_ClassElement_</code>.  To change how keys are formatted in the user interface, call <code>_ClassPathElement_(IKeyFormatter)</code>.  They provided formatters are: </p> <dl> <dt>_ClassElement_</dt> <dd>Provides a formal grammar for reading and writing key sequences.</dd> <dt>_ClassElement_</dt> <dd>Provide a native-looking, human-readable format for keys.</dd> <dt>_ClassElement_</dt> <dd>A variation of the native formatter that provides a more compact representation.</dd> <dt>_ClassElement_</dt> <dd>An Xemacs-style formatter (_ClassPathElement_., C^x C^x).</dd> </dl> ',directive
' <p>Provides support for formatting key sequences.</p>  <h2>Package Specification</h2> <p> This is a collection fo various formatters for key sequences.  ',non-directive
'The formatters are accessible through the <code>_ClassElement_</code>.  ',non-directive
'To change how keys are formatted in the user interface, call <code>_ClassPathElement_(IKeyFormatter)</code>.  ',directive
'They provided formatters are: </p> <dl> <dt>_ClassElement_</dt> ',non-directive
'<dd>Provides a formal grammar for reading and writing key sequences.</dd> <dt>_ClassElement_</dt> ',non-directive
'<dd>Provide a native-looking, human-readable format for keys.</dd> <dt>_ClassElement_</dt> ',non-directive
'<dd>A variation of the native formatter that provides a more compact representation.</dd> <dt>_ClassElement_</dt> ',non-directive
'<dd>An Xemacs-style formatter (_ClassPathElement_., C^x C^x).</dd> </dl> ',non-directive
' Provides a framework for viewers, which are model-based content adapters for SWT widgets. <h2> Package Specification</h2> A viewer is a model-based adapter on an SWT widget.&nbsp; Each viewer has four parts: <blockquote> <li> an <b>input</b> - the object that serves as the viewer\'s model</li>  <li> a <b>widget</b> - the SWT control through which the viewer\'s model is displayed</li>  <li> a <b>content provider</b> - mediates between the model and viewer</li>  <li> a <b>label provider</b> - maps model objects to displayable labels containing text _OSPathElement_or an image</li> </blockquote> This package contains the viewer framework. The viewer framework is an independent JFace module. Using it requires a knowledge of SWT, but does not require familiarity with any of the other JFace modules. The framework consists of abstract base classes for viewers (<tt>Viewer</tt>, <tt>_ClassElement_</tt>, <tt>_ClassElement_</tt>) together with concrete viewer classes (<tt>_ClassElement_</tt>, <tt>_ClassElement_</tt>, <tt>_ClassElement_</tt>, <tt>_ClassElement_</tt>, <tt>_ClassElement_</tt>, and <tt>_ClassElement_</tt>), and various lesser support classes. The concrete structured viewer classes are ready-to-use and have built-in support for drag-and-drop, filtering (<tt>IViewerFilter</tt> and <tt>_ClassElement_</tt>), and sorting (<tt>IViewerSorter</tt> and <tt>_ClassElement_</tt>); these classes may also be subclassed further if required. <p>In general terms, creating a viewer involves the following steps: <ul> <li> instantiating a viewer on some pre-existing SWT widget,</li>  <li> setting the viewer\'s content provider (an object implementing <tt>IContentProvider</tt>),</li>  <li> setting the viewer\'s label provider (an object implementing <tt>ILabelProvider</tt>),</li>  <li> and, finally, setting the viewer\'s input.</li> </ul> Once a viewer\'s input is set, the viewer becomes active. As the model changes, it is the content provider\'s responsibility to respond to changes to the model by telling the viewer what to change (done by calling add and remove methods on the viewer). An existing viewer may be retargeted by giving it a different object as input; the viewer is responsible for informing the content provider of these kinds of wholesale changes (<tt>_ClassPathElement_</tt>). Also, each viewer registers with its label provider for notification of changes that would affect what the viewer displays (see <tt>_ClassPathElement_</tt>). <p>Note: None of the classes in this package maintain global state. <br>&nbsp; ',directive
' Provides a framework for viewers, which are model-based content adapters for SWT widgets. ',non-directive
'<h2> Package Specification</h2> A viewer is a model-based adapter on an SWT widget.&nbsp; Each viewer has four parts: <blockquote> ',non-directive
'<li> an <b>input</b> - the object that serves as the viewer\'s model</li>  ',non-directive
'<li> a <b>widget</b> - the SWT control through which the viewer\'s model is displayed</li>  ',non-directive
'<li> a <b>content provider</b> - mediates between the model and viewer</li>  ',directive
'<li> a <b>label provider</b> - maps model objects to displayable labels containing text _OSPathElement_or an image</li> </blockquote> This package contains the viewer framework. ',non-directive
'The viewer framework is an independent JFace module. ',non-directive
'Using it requires a knowledge of SWT, but does not require familiarity with any of the other JFace modules. ',directive
'The framework consists of abstract base classes for viewers (<tt>Viewer</tt>, <tt>_ClassElement_</tt>, <tt>_ClassElement_</tt>) together with concrete viewer classes (<tt>_ClassElement_</tt>, <tt>_ClassElement_</tt>, <tt>_ClassElement_</tt>, <tt>_ClassElement_</tt>, <tt>_ClassElement_</tt>, and <tt>_ClassElement_</tt>), and various lesser support classes. ',non-directive
'The concrete structured viewer classes are ready-to-use and have built-in support for drag-and-drop, filtering (<tt>IViewerFilter</tt> and <tt>_ClassElement_</tt>), and sorting (<tt>IViewerSorter</tt> and <tt>_ClassElement_</tt>); these classes may also be subclassed further if required. ',directive
'<p>In general terms, creating a viewer involves the following steps: <ul> ',directive
'<li> instantiating a viewer on some pre-existing SWT widget,</li>  ',non-directive
'<li> setting the viewer\'s content provider (an object implementing <tt>IContentProvider</tt>),</li>  ',non-directive
'<li> setting the viewer\'s label provider (an object implementing <tt>ILabelProvider</tt>),</li>  ',non-directive
'<li> and, finally, setting the viewer\'s input.</li> </ul> ',non-directive
'Once a viewer\'s input is set, the viewer becomes active. ',directive
'As the model changes, it is the content provider\'s responsibility to respond to changes to the model by telling the viewer what to change (done by calling add and remove methods on the viewer). ',directive
'An existing viewer may be retargeted by giving it a different object as input; the viewer is responsible for informing the content provider of these kinds of wholesale changes (<tt>_ClassPathElement_</tt>). ',directive
'Also, each viewer registers with its label provider for notification of changes that would affect what the viewer displays (see <tt>_ClassPathElement_</tt>). ',non-directive
'<p>Note: None of the classes in this package maintain global state. <br>&nbsp; ',directive
?,non-directive
' Provides a framework for viewers that handle deferred contents.  <h2> Package Specification</h2> <p>The deferred viewers are viewers that can handle concurrent updates from a    variety of Threads.<br>   &nbsp;  ',directive
' Provides a framework for viewers that handle deferred contents.  ',non-directive
'<h2> Package Specification</h2> <p>The deferred viewers are viewers that can handle concurrent updates from a    variety of Threads.<br>   &nbsp;  ',directive
?,non-directive
' Provides a general framework for creating and managing windows. <h2> Package Specification</h2> A JFace window is an object that has no visual representation (no widgets) until it is told to open. All JFace windows, including dialogs, are instances of the abstract class <tt>Window</tt> or a subclass. This package contains the base window classes: <tt>Window</tt> itself, which provides support for a basic windows; and <tt>_ClassElement_</tt>, which provides ready-to-use support for a high-level \"main window\" with standard menus, tool bar, and status line. Both of these classes may be subclassed to define additional types of window as required. <p>This package also contains <tt>_ClassElement_</tt>, instance of which are used for managing a group of windows. Window managers are useful in applications which create many different windows (dialogs, wizards, etc.) in addition to a main window. Window managers are not required for simple applications. <p>The only global state maintained by classes in this package is a default image for window title bars (<tt>_ClassPathElement_</tt>). ',directive
' Provides a general framework for creating and managing windows. ',non-directive
'<h2> Package Specification</h2> A JFace window is an object that has no visual representation (no widgets) until it is told to open. ',non-directive
'All JFace windows, including dialogs, are instances of the abstract class <tt>Window</tt> or a subclass. ',directive
'This package contains the base window classes: <tt>Window</tt> itself, which provides support for a basic windows; and <tt>_ClassElement_</tt>, which provides ready-to-use support for a high-level \"main window\" with standard menus, tool bar, and status line. ',non-directive
'Both of these classes may be subclassed to define additional types of window as required. ',directive
'<p>This package also contains <tt>_ClassElement_</tt>, instance of which are used for managing a group of windows. ',non-directive
'Window managers are useful in applications which create many different windows (dialogs, wizards, etc.) in addition to a main window. ',directive
'Window managers are not required for simple applications. ',directive
'<p>The only global state maintained by classes in this package is a default image for window title bars (<tt>_ClassPathElement_</tt>). ',directive
' Provides support for trim specification.  <h2> Package Specification</h2> <p> This package provides classes for trim widgets. ',non-directive
' Provides support for trim specification.  ',non-directive
'<h2> Package Specification</h2> <p> This package provides classes for trim widgets. ',non-directive
?,non-directive
?,non-directive
' Provides a revision model and a protocol to display revision information in a vertical ruler column. <h2>Package Specification</h2> <tt>IRevisionRulerColumn</tt> is the protocol that a team provider can use to display line based revision control information to a document. <tt>_ClassElement_</tt> defines the revision model, which contains a list of <tt>Revision</tt>s, which in turn contain <tt>_ClassElement_</tt>s. ',non-directive
' Provides a revision model and a protocol to display revision information in a vertical ruler column. ',non-directive
'<h2>Package Specification</h2> <tt>IRevisionRulerColumn</tt> is the protocol that a team provider can use to display line based revision control information to a document. ',non-directive
'<tt>_ClassElement_</tt> defines the revision model, which contains a list of <tt>Revision</tt>s, which in turn contain <tt>_ClassElement_</tt>s. ',non-directive
' Provides a reconciler add-on for an <tt>ITextViewer</tt>. A&nbsp; reconciler provides generic synchronization support&nbsp; with the content of the document serving as the <tt>ITextViewer</tt>\'s input. There is no explicit model of what is synchronized. <h2> Package Specification</h2> <tt>IReconciler</tt> defines the concept of a reconciler. It collaborates with content type specific reconciling strategies (<tt>IReconcilingStrategy</tt>) which perform the synchronization for a given dirty region. The package contains a default implementation of <tt>IReconciler</tt> (<tt>Reconciler</tt>).  <tt>Reconciler</tt> and <tt>_ClassElement_</tt> implements reconciling as a periodic background activity and folds co-located changes while being inactive. ',directive
' Provides a reconciler add-on for an <tt>ITextViewer</tt>. ',non-directive
'A&nbsp; reconciler provides generic synchronization support&nbsp; with the content of the document serving as the <tt>ITextViewer</tt>\'s input. ',directive
'There is no explicit model of what is synchronized. ',directive
'<h2> Package Specification</h2> <tt>IReconciler</tt> defines the concept of a reconciler. ',non-directive
'It collaborates with content type specific reconciling strategies (<tt>IReconcilingStrategy</tt>) which perform the synchronization for a given dirty region. ',directive
'The package contains a default implementation of <tt>IReconciler</tt> (<tt>Reconciler</tt>).  ',non-directive
'<tt>Reconciler</tt> and <tt>_ClassElement_</tt> implements reconciling as a periodic background activity and folds co-located changes while being inactive. ',non-directive
?,non-directive
?,non-directive
' Provides a content assist add-on for an <tt>ITextViewer</tt>. Content assist supports the user in writing&nbsp; by proposing context sensitive completions at a given document position. A completion can also be a incomplete in itself and content assist provides means to deal with nested completions. <h2> Package Specification</h2> <tt>IContentAssistant</tt> defines the concept of the content assist add-on. It collaborates with content type specific completion processors (<tt>IContentAssistProcessor</tt>) in order to generate completion proposals (<tt>ICompletionProposal</tt>) valid at the current document position. The package provides a default implementation <tt>_ClassElement_</tt> which completely defines and implements the UI and the control flow for content assist. <br>&nbsp; ',non-directive
' Provides a content assist add-on for an <tt>ITextViewer</tt>. ',non-directive
'Content assist supports the user in writing&nbsp; by proposing context sensitive completions at a given document position. ',non-directive
'A completion can also be a incomplete in itself and content assist provides means to deal with nested completions. ',non-directive
'<h2> Package Specification</h2> <tt>IContentAssistant</tt> defines the concept of the content assist add-on. ',non-directive
'It collaborates with content type specific completion processors (<tt>IContentAssistProcessor</tt>) in order to generate completion proposals (<tt>ICompletionProposal</tt>) valid at the current document position. ',non-directive
'The package provides a default implementation <tt>_ClassElement_</tt> which completely defines and implements the UI and the control flow for content assist. <br>&nbsp; ',non-directive
?,non-directive
?,non-directive
?,non-directive
' Provides persistence support for templates. <h3>Packages</h3> <ul>   <li><tt><big><strong>_ClassPathElement_</strong></big></tt></li>   <li><tt><big><strong>_ClassPathElement_</strong></big></tt></li>   <li><tt><big><strong>_ClassPathElement_</strong></big></tt></li> </ul> <h3>Introduction</h3> Templates are shortcuts for frequently used fragments of text such as code patterns or complex text entities. They may contain variables which are only resolved at the time when the template is inserted within a context. Together with linked mode, inserting a template can create a on-the-fly edit mask within a text viewer.<br> <br> Templates are specified as text, variables are defined using the <tt>${variable}</tt> notation known from Ant, for example. The following snippet shows an example template for an instance check in Java:<br> <pre>if (${name} instanceof ${type}) { &nbsp;&nbsp;&nbsp; ${type} ${new_name} = (${type})${name}; &nbsp;&nbsp;&nbsp; ${cursor} } </pre> In this template, the variables (<tt>name,type, ...</tt>) are resolved when inserted into java source and changing one variable instance will also change the other. When leaving linked mode, the caret is placed at the <tt>cursor</tt> variable.<br> <br> Template functionality can be added to a custom text editor by offering <tt>_ClassElement_</tt>s as content assist choices, which is simplified by using a subclass of <tt>_ClassElement_</tt>. User template management can be offered by including a <tt>_ClassElement_</tt> which uses a <tt>_ClassElement_</tt> and <tt>_ClassElement_</tt> as the underlying model to store templates. The <tt>_ClassPathElement_</tt> extension point can be used to allow other plug-ins to contribute templates to an editor. This is accomplished by using the <tt>_ClassElement_</tt> and <tt>_ClassElement_</tt> subclasses of the above types.<br> <br> Template variables are resolved by a <tt>_ClassElement_.</tt> <tt>_ClassElement_</tt> offers some default variables such as date, user, and selection, but advanced features such as resolving to language constructs can be performed in subclasses.<br> <h4>Classes</h4> <ul>   <li><tt>Template</tt> a template consists of name, context type identifier, and a pattern.</li>   <li><tt>_ClassElement_</tt> and <tt>_ClassElement_</tt> are used to parse the template grammar and don\'t need to be used usually.</li>   <li>A <tt>_ClassElement_ </tt>can be offered in content assist, possibly created by a subclass of <tt>_ClassElement_.</tt></li>   <li><tt>_ClassElement_</tt> and <tt>_ClassElement_</tt> manage a set of templates within a plug-in and offer ways to store them in the preferences or externally in XML streams via a <tt>_ClassElement_</tt>.<br></li>   <li><tt>_ClassElement_</tt> and <tt>_ClassElement_</tt> add awareness for the  <tt>_ClassPathElement_</tt> extension point.</li>   <li><tt>_ClassElement_</tt> allows the user to access the templates within a <tt>_ClassElement_.</tt></li> </ul> <ul> </ul> <h4>Example</h4> See the Template Editor Example in the <strong>_ClassPathElement_</strong> project.<br> ',directive
' Provides persistence support for templates. ',non-directive
'<h3>Packages</h3> <ul>   ',non-directive
'<li><tt><big><strong>_ClassPathElement_</strong></big></tt></li>   ',directive
'<li><tt><big><strong>_ClassPathElement_</strong></big></tt></li>   ',directive
'<li><tt><big><strong>_ClassPathElement_</strong></big></tt></li> </ul> ',directive
'<h3>Introduction</h3> Templates are shortcuts for frequently used fragments of text such as code patterns or complex text entities. ',non-directive
'They may contain variables which are only resolved at the time when the template is inserted within a context. ',directive
'Together with linked mode, inserting a template can create a on-the-fly edit mask within a text viewer.<br> <br> ',non-directive
'Templates are specified as text, variables are defined using the <tt>${variable}</tt> notation known from Ant, for example. ',non-directive
'The following snippet shows an example template for an instance check in Java:<br> <pre>if (${name} instanceof ${type}) { &nbsp;&nbsp;&nbsp; ${type} ${new_name} = (${type})${name}; &nbsp;&nbsp;&nbsp; ${cursor} } </pre> In this template, the variables (<tt>name,type, ...</tt>) are resolved when inserted into java source and changing one variable instance will also change the other. ',non-directive
'When leaving linked mode, the caret is placed at the <tt>cursor</tt> variable.<br> <br> ',non-directive
'Template functionality can be added to a custom text editor by offering <tt>_ClassElement_</tt>s as content assist choices, which is simplified by using a subclass of <tt>_ClassElement_</tt>. ',directive
'User template management can be offered by including a <tt>_ClassElement_</tt> which uses a <tt>_ClassElement_</tt> and <tt>_ClassElement_</tt> as the underlying model to store templates. ',non-directive
'The <tt>_ClassPathElement_</tt> extension point can be used to allow other plug-ins to contribute templates to an editor. ',non-directive
'This is accomplished by using the <tt>_ClassElement_</tt> and <tt>_ClassElement_</tt> subclasses of the above types.<br> <br> ',non-directive
'Template variables are resolved by a <tt>_ClassElement_.</tt> <tt>_ClassElement_</tt> offers some default variables such as date, user, and selection, but advanced features such as resolving to language constructs can be performed in subclasses.<br> ',non-directive
'<h4>Classes</h4> <ul>   ',non-directive
'<li><tt>Template</tt> a template consists of name, context type identifier, and a pattern.</li>   ',non-directive
'<li><tt>_ClassElement_</tt> and <tt>_ClassElement_</tt> are used to parse the template grammar and don\'t need to be used usually.</li>   ',non-directive
'<li>A <tt>_ClassElement_ </tt>can be offered in content assist, possibly created by a subclass of <tt>_ClassElement_.</tt></li>   ',directive
'<li><tt>_ClassElement_</tt> and <tt>_ClassElement_</tt> manage a set of templates within a plug-in and offer ways to store them in the preferences or externally in XML streams via a <tt>_ClassElement_</tt>.<br></li>   ',non-directive
'<li><tt>_ClassElement_</tt> and <tt>_ClassElement_</tt> add awareness for the  <tt>_ClassPathElement_</tt> extension point.</li>   ',directive
'<li><tt>_ClassElement_</tt> allows the user to access the templates within a <tt>_ClassElement_.</tt></li> </ul> ',non-directive
'<ul> </ul> ',non-directive
'<h4>Example</h4> See the Template Editor Example in the <strong>_ClassPathElement_</strong> project.<br> ',directive
' Provides an information provider add-on for an <tt>ITextViewer</tt>. An information provider presents information for a certain subject in a specific information control. An information control usually is a floating window. <h2> Package Specification</h2> <tt>IInformationPresenter</tt> defines the concept of an information provider. It collaborates with content type specific information providers (<tt>IInformationProvider</tt>) which determine for a certain offset in a text viewer an information subject and the information available about this subject.. The package contains a default implementation of <tt>IInformationPresenter</tt> (<tt>_ClassElement_</tt>). ',non-directive
' Provides an information provider add-on for an <tt>ITextViewer</tt>. ',non-directive
'An information provider presents information for a certain subject in a specific information control. ',non-directive
'An information control usually is a floating window. ',non-directive
'<h2> Package Specification</h2> <tt>IInformationPresenter</tt> defines the concept of an information provider. ',non-directive
'It collaborates with content type specific information providers (<tt>IInformationProvider</tt>) which determine for a certain offset in a text viewer an information subject and the information available about this subject.. ',non-directive
'The package contains a default implementation of <tt>IInformationPresenter</tt> (<tt>_ClassElement_</tt>). ',non-directive
' Provides a framework for rule based text scanning and uses the framework to provide rule-driven default implementations of <tt>IPresentationDamager</tt>, <tt>IPresentationRepairer</tt> and <tt>IDocumentPartitioner</tt>. <h2> Package Specification</h2> <tt>_ClassElement_</tt> is a document-based scanner controlled by <tt>IRule</tt> objects. When evaluated an <tt>IRule</tt> always returns an <tt>IToken</tt>. The package provides a set of rules whereby <tt>_ClassElement_</tt> is the most important one. <tt>_ClassElement_</tt> defines a pattern-configurable rule. ',non-directive
' Provides a framework for rule based text scanning and uses the framework to provide rule-driven default implementations of <tt>IPresentationDamager</tt>, <tt>IPresentationRepairer</tt> and <tt>IDocumentPartitioner</tt>. ',non-directive
'<h2> Package Specification</h2> <tt>_ClassElement_</tt> is a document-based scanner controlled by <tt>IRule</tt> objects. ',non-directive
'When evaluated an <tt>IRule</tt> always returns an <tt>IToken</tt>. ',non-directive
'The package provides a set of rules whereby <tt>_ClassElement_</tt> is the most important one. ',non-directive
'<tt>_ClassElement_</tt> defines a pattern-configurable rule. ',non-directive
' Provides support for detecting and displaying hyperlinks in <tt>ISourceViewer</tt>s. <p> <tt>_ClassElement_</tt> supports hyperlinked text regions inline in the displayed text. It delegates  the detection and presentation of hyperlinks to <tt>IHyperlinkDetector</tt> and <tt>IHyperlinkPresenter</tt>, respectively. </p> <p> Override the following methods in <tt>_ClassElement_</tt> to customize the hyperlink behavior of a source viewer: <ul>   <li><tt>_ClassElement_()</tt> to specify the set of hyperlink detectors used by the viewer</li>   <li><tt>_ClassElement_()</tt> to specify the set of hyperlink presenters used by the viewer</li>   <li><tt>_ClassElement_()</tt> to specify when hyperlinks are activated</li> </ul> </p>  ',non-directive
' Provides support for detecting and displaying hyperlinks in <tt>ISourceViewer</tt>s. ',non-directive
'<p> <tt>_ClassElement_</tt> supports hyperlinked text regions inline in the displayed text. ',non-directive
'It delegates  the detection and presentation of hyperlinks to <tt>IHyperlinkDetector</tt> and <tt>IHyperlinkPresenter</tt>, respectively. ',non-directive
'</p> <p> Override the following methods in <tt>_ClassElement_</tt> to customize the hyperlink behavior of a source viewer: <ul>   ',non-directive
'<li><tt>_ClassElement_()</tt> to specify the set of hyperlink detectors used by the viewer</li>   ',non-directive
'<li><tt>_ClassElement_()</tt> to specify the set of hyperlink presenters used by the viewer</li>   ',non-directive
'<li><tt>_ClassElement_()</tt> to specify when hyperlinks are activated</li> </ul> ',non-directive
'</p>  ',non-directive
' Provides a presentation reconciler add-on for an <tt>ITextViewer</tt>. A presentation reconciler keep the presentation (styles and colors) in sync with the content of the document serving as the <tt>ITextViewer</tt>\'s input. <h2> Package Specification</h2> <tt>IPresentationReconciler</tt> defines the concept of a presentation reconciler. It collaborates with content type specific presentation damagers (<tt>IPresentationDamager</tt>) which for a given document change determine the region of the presentation which must be rebuild, and content type specific presentation repairers (<tt>IPresentationRepairer</tt>) which construct for a given damage region the document presentation. The package contains a default implementation of <tt>IPresentationReconciler </tt>(<tt>_ClassElement_</tt>). ',directive
' Provides a presentation reconciler add-on for an <tt>ITextViewer</tt>. ',non-directive
'A presentation reconciler keep the presentation (styles and colors) in sync with the content of the document serving as the <tt>ITextViewer</tt>\'s input. ',non-directive
'<h2> Package Specification</h2> <tt>IPresentationReconciler</tt> defines the concept of a presentation reconciler. ',non-directive
'It collaborates with content type specific presentation damagers (<tt>IPresentationDamager</tt>) which for a given document change determine the region of the presentation which must be rebuild, and content type specific presentation repairers (<tt>IPresentationRepairer</tt>) which construct for a given damage region the document presentation. ',directive
'The package contains a default implementation of <tt>IPresentationReconciler </tt>(<tt>_ClassElement_</tt>). ',non-directive
?,non-directive
?,non-directive
' This package provides the quick assist assistant add-on for an <tt>ISourceViewer</tt>. The quick assist assistant\'s purpose is to propose, display, and insert quick assists and quick fixes available at the current source viewer\'s quick assist invocation context. <p> A quick fix is a completion that can correct a problem reported and visible through an <tt>Annotation</tt> while a quick assist is not related to a problem or <tt>Annotation</tt>. Since quick assists can be proposed where appropriate they are normally not visible in the viewer. The quick assist assistant implementation in this package can show the quick assists that are available on the current line. </p>  <h2> Package Specification</h2> <tt>IQuickAssistAssistant</tt> defines the concept of the quick assist assistant add-on. It collaborates with a quick assist processor (<tt>IQuickAssistProcessor</tt>) in order to generate quick fix and quick assist completion proposals (<tt>ICompletionProposal</tt>) available at the current quick assist invocation context (<tt>IQuickAssistInvocationContext</tt>). The package provides a default implementation <tt>_ClassElement_</tt> which completely defines and implements the UI and the control flow for a quick assist assistant. <br>&nbsp; ',directive
' This package provides the quick assist assistant add-on for an <tt>ISourceViewer</tt>. ',directive
'The quick assist assistant\'s purpose is to propose, display, and insert quick assists and quick fixes available at the current source viewer\'s quick assist invocation context. ',directive
'<p> A quick fix is a completion that can correct a problem reported and visible through an <tt>Annotation</tt> while a quick assist is not related to a problem or <tt>Annotation</tt>. ',directive
'Since quick assists can be proposed where appropriate they are normally not visible in the viewer. ',directive
'The quick assist assistant implementation in this package can show the quick assists that are available on the current line. ',directive
'</p>  <h2> Package Specification</h2> <tt>IQuickAssistAssistant</tt> defines the concept of the quick assist assistant add-on. ',directive
'It collaborates with a quick assist processor (<tt>IQuickAssistProcessor</tt>) in order to generate quick fix and quick assist completion proposals (<tt>ICompletionProposal</tt>) available at the current quick assist invocation context (<tt>IQuickAssistInvocationContext</tt>). ',directive
'The package provides a default implementation <tt>_ClassElement_</tt> which completely defines and implements the UI and the control flow for a quick assist assistant. <br>&nbsp; ',directive
?,non-directive
' <p>Provides JFace-specific support for commands.</p>  <h2>Package Specification</h2> <p> This package provides a handler that wraps a legacy instance of <code>IAction</code>, as well as a manager for associating images with commands. </p> ',non-directive
' <p>Provides JFace-specific support for commands.</p>  <h2>Package Specification</h2> <p> This package provides a handler that wraps a legacy instance of <code>IAction</code>, as well as a manager for associating images with commands. ',non-directive
'</p> ',non-directive
' Provides support for shared UI resources such as menus, tool bars, and status lines. <h2> Package Specification</h2> Contribution managers coordinate contributions to shared UI resources such as menus, menu bars, tool bars, and status lines. <tt>_ClassElement_</tt> maintains the contributions as a dynamic list of contribution items (<tt>IContributionItems</tt>). Separators (<tt>Separator</tt>) can be included in contribution lists to break up the list\'s visual representation. Internally, contribution lists can be organized into named groups via special group markers (<tt>_ClassElement_</tt>) to facilitate programatic insertion at specific positions within the list. <p>Three specific contribution managers are provided: a status line manager (<tt>_ClassElement_</tt>), a tool bar manager (<tt>_ClassElement_</tt>), and a hierarchical menu manager (<tt>_ClassElement_</tt>). <p>Actions (<tt>IAction</tt>) are commands which can be triggered from the UI, like the ones found in menus, toolbars, and buttons. Menus and tools bars are typically populated with contribution items that delegate to actions (<tt>_ClassElement_</tt>). <p>Note: None of the classes in this package maintain global state. <br>&nbsp; ',directive
' Provides support for shared UI resources such as menus, tool bars, and status lines. ',non-directive
'<h2> Package Specification</h2> Contribution managers coordinate contributions to shared UI resources such as menus, menu bars, tool bars, and status lines. ',non-directive
'<tt>_ClassElement_</tt> maintains the contributions as a dynamic list of contribution items (<tt>IContributionItems</tt>). ',non-directive
'Separators (<tt>Separator</tt>) can be included in contribution lists to break up the list\'s visual representation. ',non-directive
'Internally, contribution lists can be organized into named groups via special group markers (<tt>_ClassElement_</tt>) to facilitate programatic insertion at specific positions within the list. ',non-directive
'<p>Three specific contribution managers are provided: a status line manager (<tt>_ClassElement_</tt>), a tool bar manager (<tt>_ClassElement_</tt>), and a hierarchical menu manager (<tt>_ClassElement_</tt>). ',non-directive
'<p>Actions (<tt>IAction</tt>) are commands which can be triggered from the UI, like the ones found in menus, toolbars, and buttons. ',non-directive
'Menus and tools bars are typically populated with contribution items that delegate to actions (<tt>_ClassElement_</tt>). ',non-directive
'<p>Note: None of the classes in this package maintain global state. <br>&nbsp; ',directive
?,non-directive
' <p>Provides JFace-specific support for contexts.</p>  <h2>Package Specification</h2> <p> This package provides some context identifiers that have special meaning in the context of JFace. </p> ',non-directive
' <p>Provides JFace-specific support for contexts.</p>  <h2>Package Specification</h2> <p> This package provides some context identifiers that have special meaning in the context of JFace. ',non-directive
'</p> ',non-directive
' Provides useful building blocks used throughout JFace, including property change events, a listener list implementation, and runtime checked assertions. <br>&nbsp; ',non-directive
' Provides useful building blocks used throughout JFace, including property change events, a listener list implementation, and runtime checked assertions. <br>&nbsp; ',non-directive
?,non-directive
' Provides classes that help communicate proper content for fields in dialogs and wizards. <h2> Package Specification</h2> <p> This package provides classes that can be used to guide a dialog user through choosing appropriate content for fields in a dialog or wizard. <p> A <tt>_ClassElement_</tt> can be attached to an arbitrary control to provide  a popup showing content proposals.  These proposals appear when the defined assist keystroke is invoked.  The <tt>_ClassElement_</tt> manages the creation,  hiding, and showing of the proposal popup, as well as the proper handling of key events between the adapted control and its popup.  Implementors of <tt>IControlContentAdapter</tt> allow the adapter to set and retrieve the contents of the supplied control. </p> <p> An <tt>_ClassElement_</tt> configures a <tt>_ClassElement_</tt> in a manner that supports automatic field completion popups that filter based on the control\'s contents. </p> <p> <tt>_ClassElement_</tt> can be used to decorate an arbitrary control with  an image that communicates information about the control\'s content.  Decorations can be used to show additional information about a field, such as its status, or a cue that shows availability of content proposals.  Decorations are defined in pre-defined locations relative to the control, and can be set up to show at all times, or only when the control has focus.  It is up to the client to ensure there is enough space allocated to render the control decoration.  Decorations can optionally show  descriptive text when the user hovers over them.   </p> <p> <tt>_ClassElement_</tt> can also be used to decorate a control.  The main difference is that decorated fields reserve space for multiple decorations in particular locations around the control.  To do this, the field manages the creation of the  field\'s control, using a specialized layout to ensure there is adequate space  reserved for decorations around the control. Other than using the field to manage  the decorations themselves, clients are expected to interact  directly with the control.   </p>  <p>Note: None of the classes in this package maintain global state. ',directive
' Provides classes that help communicate proper content for fields in dialogs and wizards. ',non-directive
'<h2> Package Specification</h2> <p> This package provides classes that can be used to guide a dialog user through choosing appropriate content for fields in a dialog or wizard. ',non-directive
'<p> A <tt>_ClassElement_</tt> can be attached to an arbitrary control to provide  a popup showing content proposals.  ',non-directive
'These proposals appear when the defined assist keystroke is invoked.  ',directive
'The <tt>_ClassElement_</tt> manages the creation,  hiding, and showing of the proposal popup, as well as the proper handling of key events between the adapted control and its popup.  ',non-directive
'Implementors of <tt>IControlContentAdapter</tt> allow the adapter to set and retrieve the contents of the supplied control. ',non-directive
'</p> <p> An <tt>_ClassElement_</tt> configures a <tt>_ClassElement_</tt> in a manner that supports automatic field completion popups that filter based on the control\'s contents. ',non-directive
'</p> <p> <tt>_ClassElement_</tt> can be used to decorate an arbitrary control with  an image that communicates information about the control\'s content.  ',non-directive
'Decorations can be used to show additional information about a field, such as its status, or a cue that shows availability of content proposals.  ',directive
'Decorations are defined in pre-defined locations relative to the control, and can be set up to show at all times, or only when the control has focus.  ',directive
'It is up to the client to ensure there is enough space allocated to render the control decoration.  ',non-directive
'Decorations can optionally show  descriptive text when the user hovers over them.   ',non-directive
'</p> <p> <tt>_ClassElement_</tt> can also be used to decorate a control.  ',non-directive
'The main difference is that decorated fields reserve space for multiple decorations in particular locations around the control.  ',non-directive
'To do this, the field manages the creation of the  field\'s control, using a specialized layout to ensure there is adequate space  reserved for decorations around the control. ',non-directive
'Other than using the field to manage  the decorations themselves, clients are expected to interact  directly with the control.   ',non-directive
'</p>  <p>Note: None of the classes in this package maintain global state. ',directive
' <p> This package contains the interfaces and utilities shared across all the subpackages of this component. </p> <p> The following collection implementations are provided in the package: <ul> <li>_ClassElement_ - a non synchronized Stack that follows the same API as java util Stack <li>_ClassElement_ - extends the Properties class to add extra functionality </ul> <p>  ',directive
' <p> This package contains the interfaces and utilities shared across all the subpackages of this component. ',non-directive
'</p> <p> The following collection implementations are provided in the package: <ul> ',non-directive
'<li>_ClassElement_ - a non synchronized Stack that follows the same API as java util Stack ',directive
'<li>_ClassElement_ - extends the Properties class to add extra functionality </ul> ',directive
'<p>  ',non-directive
' <p> This package contains implementations of the {@link _ClassPathElement_ Comparator} interface. <p> You may also consider using  {@link _ClassPathElement_ _ClassElement_}, which is a single class that uses static methods to construct instances of the classes in this package. ',directive
' <p> This package contains implementations of the {',non-directive
'@link _ClassPathElement_ Comparator} interface. ',non-directive
'<p> You may also consider using  {',directive
'@link _ClassPathElement_ _ClassElement_}, which is a single class that uses static methods to construct instances of the classes in this package. ',non-directive
' <p> This package contains implementations of the {@link _ClassPathElement_ List} interface. </p> <p> The following implementations are provided in the package: <ul> <li>_ClassElement_ - a list that is optimised for insertions and removals at any index in the list</li> <li>_ClassElement_ - a list that can be modified while the _ClassElement_ (cursor) is being used</li> <li>_ClassElement_ - a linked list that caches the storage nodes for a performance gain</li> </ul> </p> <p> The following decorators are provided in the package: <ul> <li>Synchronized - synchronizes method access for multi-threaded environments</li> <li>Unmodifiable - ensures the collection cannot be altered</li> <li>Predicated - ensures that only elements that are valid according to a predicate can be added</li> <li>Typed - ensures that only elements that are of a specific type can be added</li> <li>Transformed - transforms each element added</li> <li>_ClassElement_ - ensures that the size of the list cannot change</li> <li>Lazy - creates objects in the list on demand</li> <li>Growth - grows the list instead of erroring when _OSPathElement_add used with index beyond the list size</li> <li>_ClassElement_ - a list that avoids duplicate entries like a Set</li> </ul> </p> ',directive
' <p> This package contains implementations of the {',non-directive
'@link _ClassPathElement_ List} interface. ',non-directive
'</p> <p> The following implementations are provided in the package: <ul> ',non-directive
'<li>_ClassElement_ - a list that is optimised for insertions and removals at any index in the list</li> ',non-directive
'<li>_ClassElement_ - a list that can be modified while the _ClassElement_ (cursor) is being used</li> ',non-directive
'<li>_ClassElement_ - a linked list that caches the storage nodes for a performance gain</li> </ul> ',directive
'</p> <p> The following decorators are provided in the package: <ul> ',non-directive
'<li>Synchronized - synchronizes method access for multi-threaded environments</li> ',directive
'<li>Unmodifiable - ensures the collection cannot be altered</li> ',non-directive
'<li>Predicated - ensures that only elements that are valid according to a predicate can be added</li> ',directive
'<li>Typed - ensures that only elements that are of a specific type can be added</li> ',directive
'<li>Transformed - transforms each element added</li> ',non-directive
'<li>_ClassElement_ - ensures that the size of the list cannot change</li> ',non-directive
'<li>Lazy - creates objects in the list on demand</li> ',non-directive
'<li>Growth - grows the list instead of erroring when _OSPathElement_add used with index beyond the list size</li> ',directive
'<li>_ClassElement_ - a list that avoids duplicate entries like a Set</li> </ul> ',non-directive
'</p> ',non-directive
' <p> This package contains implementations of the {@link _ClassPathElement_ Closure}, {@link _ClassPathElement_ Predicate}, {@link _ClassPathElement_ Transformer} and {@link _ClassPathElement_ Factory} interfaces. These provide simple callbacks for processing with collections. </p> ',directive
' <p> This package contains implementations of the {',non-directive
'@link _ClassPathElement_ Closure}, {',non-directive
'@link _ClassPathElement_ Predicate}, {',non-directive
'@link _ClassPathElement_ Transformer} and {',non-directive
'@link _ClassPathElement_ Factory} interfaces. ',non-directive
'These provide simple callbacks for processing with collections. ',directive
'</p> ',non-directive
' <p> This package contains implementations of the {@link _ClassPathElement_ Iterator} interface. <p> You may also consider using  {@link _ClassPathElement_ _ClassElement_}, which is a single class that uses static methods to construct instances of the classes in this package. ',directive
' <p> This package contains implementations of the {',non-directive
'@link _ClassPathElement_ Iterator} interface. ',non-directive
'<p> You may also consider using  {',directive
'@link _ClassPathElement_ _ClassElement_}, which is a single class that uses static methods to construct instances of the classes in this package. ',non-directive
' <p>The \"split map\" concept is that of an object that implements the {@link _ClassPathElement_ Put} and {@link _ClassPathElement_ Get} interfaces, with <i>differing</i> generic types. This is like a pre-generics {@link _ClassPathElement_ Map} whose input _OSPathElement_value constraints are different than its output _OSPathElement_value constraints.  While it would be possible to declare a \"split map\" with matching _OSPathElement_output _OSPathElement_value constraints, this would be a {@link _ClassPathElement_ Map} and would therefore make little sense (any Commons Collections {@link _ClassPathElement_ Map} implementation will also implement {@link _ClassPathElement_ Put} and {@link _ClassPathElement_ Get} with matching generic parameters).  <p> The following decorators are provided: <ul> <li>Transformed - transforms each element added </ul> </pre> ',non-directive
' <p>The \"split map\" concept is that of an object that implements the {',non-directive
'@link _ClassPathElement_ Put} and {',non-directive
'@link _ClassPathElement_ Get} interfaces, with <i>differing</i> generic types. ',non-directive
'This is like a pre-generics {',non-directive
'@link _ClassPathElement_ Map} whose input _OSPathElement_value constraints are different than its output _OSPathElement_value constraints.  ',non-directive
'While it would be possible to declare a \"split map\" with matching _OSPathElement_output _OSPathElement_value constraints, this would be a {',non-directive
'@link _ClassPathElement_ Map} and would therefore make little sense (any Commons Collections {',non-directive
'@link _ClassPathElement_ Map} implementation will also implement {',non-directive
'@link _ClassPathElement_ Put} and {',non-directive
'@link _ClassPathElement_ Get} with matching generic parameters).  ',non-directive
'<p> The following decorators are provided: <ul> ',non-directive
'<li>Transformed - transforms each element added </ul> ',non-directive
'</pre> ',non-directive
' <p> This package contains implementations of the {@link _ClassPathElement_ Buffer} interface. <p> The following implementations are provided in the package: <ul> <li>_ClassElement_ - provides for removal based on a comparator ordering <li>_ClassElement_ - implements a buffer with a fixed size that throws exceptions when full <li>_ClassElement_ - implements a buffer with a fixed size that discards oldest when full <li>_ClassElement_ - implements a buffer that grows in size if necessary </ul> <p> The following decorators are provided in the package: <ul> <li>Synchronized - synchronizes method access for multi-threaded environments <li>Unmodifiable - ensures the collection cannot be altered <li>Predicated - ensures that only elements that are valid according to a predicate can be added <li>Typed - ensures that only elements that are of a specific type can be added <li>Transformed - transforms elements added to the buffer <li>Blocking - blocks on get and remove until an element is available </ul> </pre> ',directive
' <p> This package contains implementations of the {',non-directive
'@link _ClassPathElement_ Buffer} interface. ',non-directive
'<p> The following implementations are provided in the package: <ul> ',non-directive
'<li>_ClassElement_ - provides for removal based on a comparator ordering ',non-directive
'<li>_ClassElement_ - implements a buffer with a fixed size that throws exceptions when full ',non-directive
'<li>_ClassElement_ - implements a buffer with a fixed size that discards oldest when full ',non-directive
'<li>_ClassElement_ - implements a buffer that grows in size if necessary </ul> ',directive
'<p> The following decorators are provided in the package: <ul> ',non-directive
'<li>Synchronized - synchronizes method access for multi-threaded environments ',directive
'<li>Unmodifiable - ensures the collection cannot be altered ',non-directive
'<li>Predicated - ensures that only elements that are valid according to a predicate can be added ',directive
'<li>Typed - ensures that only elements that are of a specific type can be added ',directive
'<li>Transformed - transforms elements added to the buffer ',non-directive
'<li>Blocking - blocks on get and remove until an element is available </ul> ',non-directive
'</pre> ',non-directive
' <p> This package contains implementations of the {@link _ClassPathElement_ _ClassElement_}, {@link _ClassPathElement_ _ClassElement_} and  {@link _ClassPathElement_ _ClassElement_} interfaces. A _ClassElement_ is an extension to Map that allows keys and values to be looked up with equal ease. One example usage is a system communicating to a legacy datasource that must convert codes from the new format to the old format and vice versa. <p> The following implementations are provided in the package: <ul> <li>_ClassElement_ - uses two _ClassElement_ to implement _ClassElement_ <li>_ClassElement_ - uses two _ClassElement_ to implement _ClassElement_ <li>_ClassElement_ - red-black tree implementation of _ClassElement_ </ul> <p> The following decorators are provided in the package: <ul> <li>Unmodifiable - ensures the map cannot be altered <!-- <li>Synchronized - synchronizes method access for multi-threaded environments <li>Predicated - ensures that only elements that are valid according to a predicate can be added <li>Typed - ensures that only elements that are of a specific type can be added <li>Transformed - transforms each element added <li>_ClassElement_ - ensures that the size of the map cannot change <li>Lazy - creates objects in the map on demand <li>_ClassElement_ - ensures that insertion order is retained--> </ul> </pre> ',directive
' <p> This package contains implementations of the {',non-directive
'@link _ClassPathElement_ _ClassElement_}, {',non-directive
'@link _ClassPathElement_ _ClassElement_} and  {',non-directive
'@link _ClassPathElement_ _ClassElement_} interfaces. ',non-directive
'A _ClassElement_ is an extension to Map that allows keys and values to be looked up with equal ease. ',non-directive
'One example usage is a system communicating to a legacy datasource that must convert codes from the new format to the old format and vice versa. ',directive
'<p> The following implementations are provided in the package: <ul> ',non-directive
'<li>_ClassElement_ - uses two _ClassElement_ to implement _ClassElement_ ',non-directive
'<li>_ClassElement_ - uses two _ClassElement_ to implement _ClassElement_ ',non-directive
'<li>_ClassElement_ - red-black tree implementation of _ClassElement_ </ul> ',non-directive
'<p> The following decorators are provided in the package: <ul> ',non-directive
'<li>Unmodifiable - ensures the map cannot be altered <!-- ',non-directive
'<li>Synchronized - synchronizes method access for multi-threaded environments ',directive
'<li>Predicated - ensures that only elements that are valid according to a predicate can be added ',directive
'<li>Typed - ensures that only elements that are of a specific type can be added ',directive
'<li>Transformed - transforms each element added ',non-directive
'<li>_ClassElement_ - ensures that the size of the map cannot change ',non-directive
'<li>Lazy - creates objects in the map on demand ',non-directive
'<li>_ClassElement_ - ensures that insertion order is retained--> </ul> ',non-directive
'</pre> ',non-directive
' <p> This package contains implementations of collection and map related _OSPathElement_value classes. These are usually used in maps, however they can be used as data holders in any collection. <p> The following _OSPathElement_value designs are included: <ul> <li>Map Entry - various map entry implementations <li>_ClassElement_ - a key and value pair, without map entry semantics <li>_ClassElement_ - a holder of multiple keys tied together </ul> </pre> ',non-directive
' <p> This package contains implementations of collection and map related _OSPathElement_value classes. ',non-directive
'These are usually used in maps, however they can be used as data holders in any collection. ',non-directive
'<p> The following _OSPathElement_value designs are included: <ul> ',non-directive
'<li>Map Entry - various map entry implementations ',non-directive
'<li>_ClassElement_ - a key and value pair, without map entry semantics ',non-directive
'<li>_ClassElement_ - a holder of multiple keys tied together </ul> ',non-directive
'</pre> ',non-directive
' <p> This package contains implementations of the {@link _ClassPathElement_ Bag} and  {@link _ClassPathElement_ _ClassElement_} interfaces. A bag stores an object and a count of the number of occurences of the object. <p> The following implementations are provided in the package: <ul> <li>_ClassElement_ - implementation that uses a _ClassElement_ to store the data <li>_ClassElement_ - implementation that uses a _ClassElement_ to store the data </ul> <p> The following decorators are provided in the package: <ul> <li>Synchronized - synchronizes method access for multi-threaded environments <li>Unmodifiable - ensures the bag cannot be altered <li>Predicated - ensures that only elements that are valid according to a predicate can be added <li>Typed - ensures that only elements that are of a specific type can be added <li>Transformed - transforms each element added to the bag </ul> </pre> ',directive
' <p> This package contains implementations of the {',non-directive
'@link _ClassPathElement_ Bag} and  {',non-directive
'@link _ClassPathElement_ _ClassElement_} interfaces. ',non-directive
'A bag stores an object and a count of the number of occurences of the object. ',non-directive
'<p> The following implementations are provided in the package: <ul> ',non-directive
'<li>_ClassElement_ - implementation that uses a _ClassElement_ to store the data ',non-directive
'<li>_ClassElement_ - implementation that uses a _ClassElement_ to store the data </ul> ',non-directive
'<p> The following decorators are provided in the package: <ul> ',non-directive
'<li>Synchronized - synchronizes method access for multi-threaded environments ',directive
'<li>Unmodifiable - ensures the bag cannot be altered ',non-directive
'<li>Predicated - ensures that only elements that are valid according to a predicate can be added ',directive
'<li>Typed - ensures that only elements that are of a specific type can be added ',directive
'<li>Transformed - transforms each element added to the bag </ul> ',non-directive
'</pre> ',non-directive
' <p> This package contains implementations of the {@link _ClassPathElement_ Set} and {@link _ClassPathElement_ _ClassElement_} interfaces. <p> The implementations are in the form of direct implementations and decorators. A decorator wraps another implementation of the interface to add some specific additional functionality. <p> The following implementations are provided in the package: <ul> <li>_ClassElement_ - a set that combines multiple sets into one </ul> The following decorators are provided in the package: <ul> <li>Synchronized - synchronizes method access for multi-threaded environments <li>Unmodifiable - ensures the collection cannot be altered <li>Predicated - ensures that only elements that are valid according to a predicate can be added <li>Typed - ensures that only elements that are of a specific type can be added <li>Transformed - transforms each element added <li>_ClassElement_ - ensures that insertion order is retained <li>_ClassElement_ - a set formed by decorating a Map </ul> </pre> ',directive
' <p> This package contains implementations of the {',non-directive
'@link _ClassPathElement_ Set} and {',non-directive
'@link _ClassPathElement_ _ClassElement_} interfaces. ',non-directive
'<p> The implementations are in the form of direct implementations and decorators. ',non-directive
'A decorator wraps another implementation of the interface to add some specific additional functionality. ',directive
'<p> The following implementations are provided in the package: <ul> ',non-directive
'<li>_ClassElement_ - a set that combines multiple sets into one </ul> ',non-directive
'The following decorators are provided in the package: <ul> ',non-directive
'<li>Synchronized - synchronizes method access for multi-threaded environments ',directive
'<li>Unmodifiable - ensures the collection cannot be altered ',non-directive
'<li>Predicated - ensures that only elements that are valid according to a predicate can be added ',directive
'<li>Typed - ensures that only elements that are of a specific type can be added ',directive
'<li>Transformed - transforms each element added ',non-directive
'<li>_ClassElement_ - ensures that insertion order is retained ',non-directive
'<li>_ClassElement_ - a set formed by decorating a Map </ul> ',non-directive
'</pre> ',non-directive
' <p> This package contains implementations of the  {@link _ClassPathElement_ Map}, {@link _ClassPathElement_ _ClassElement_}, {@link _ClassPathElement_ _ClassElement_} and {@link _ClassPathElement_ _ClassElement_} interfaces. A Map provides a lookup from a key to a value. A number of implementations also support the new _ClassElement_ interface that enables simple iteration of map keys and values. <p> The following implementations are provided: <ul> <li>_ClassElement_ - map that compares keys in a case insensitive way <li>_ClassElement_ - map that combines multiple maps into a single view <li>_ClassElement_ - general purpose _ClassElement_ replacement supporting _ClassElement_ <li>_ClassElement_ - map that uses == for comparison instead of equals() <li>_ClassElement_ - designed for good performance at size 3 or less <li>_ClassElement_ - a hash map that maintains insertion order, supporting _ClassElement_ <li>_ClassElement_ - map that provides special methods for using more than one key to access the value <li>_ClassElement_ - allows the garbage collector to collect keys and values using equals() for comparison <li>_ClassElement_ - allows the garbage collector to collect keys and values using == for comparison <li>_ClassElement_ - a fully featured map to hold one key-value pair <li>_ClassElement_ - internally synchronized and designed for thread-contentious environments </ul> <p> The following decorators are provided: <ul> <li>Unmodifiable - ensures the collection cannot be altered <li>Predicated - ensures that only elements that are valid according to a predicate can be added <li>Typed - ensures that only elements that are of a specific type can be added <li>Transformed - transforms each element added <li>_ClassElement_ - ensures that the size of the map cannot change <li>Lazy - creates objects in the map on demand <li>_ClassElement_ - ensures that insertion order is retained </ul> </pre> ',directive
' <p> This package contains implementations of the  {',non-directive
'@link _ClassPathElement_ Map}, {',non-directive
'@link _ClassPathElement_ _ClassElement_}, {',non-directive
'@link _ClassPathElement_ _ClassElement_} and {',non-directive
'@link _ClassPathElement_ _ClassElement_} interfaces. ',non-directive
'A Map provides a lookup from a key to a value. ',non-directive
'A number of implementations also support the new _ClassElement_ interface that enables simple iteration of map keys and values. ',non-directive
'<p> The following implementations are provided: <ul> ',non-directive
'<li>_ClassElement_ - map that compares keys in a case insensitive way ',non-directive
'<li>_ClassElement_ - map that combines multiple maps into a single view ',non-directive
'<li>_ClassElement_ - general purpose _ClassElement_ replacement supporting _ClassElement_ ',non-directive
'<li>_ClassElement_ - map that uses == for comparison instead of equals() ',non-directive
'<li>_ClassElement_ - designed for good performance at size 3 or less ',directive
'<li>_ClassElement_ - a hash map that maintains insertion order, supporting _ClassElement_ ',non-directive
'<li>_ClassElement_ - map that provides special methods for using more than one key to access the value ',non-directive
'<li>_ClassElement_ - allows the garbage collector to collect keys and values using equals() for comparison ',non-directive
'<li>_ClassElement_ - allows the garbage collector to collect keys and values using == for comparison ',non-directive
'<li>_ClassElement_ - a fully featured map to hold one key-value pair ',non-directive
'<li>_ClassElement_ - internally synchronized and designed for thread-contentious environments </ul> ',directive
'<p> The following decorators are provided: <ul> ',non-directive
'<li>Unmodifiable - ensures the collection cannot be altered ',non-directive
'<li>Predicated - ensures that only elements that are valid according to a predicate can be added ',directive
'<li>Typed - ensures that only elements that are of a specific type can be added ',directive
'<li>Transformed - transforms each element added ',non-directive
'<li>_ClassElement_ - ensures that the size of the map cannot change ',non-directive
'<li>Lazy - creates objects in the map on demand ',non-directive
'<li>_ClassElement_ - ensures that insertion order is retained </ul> ',non-directive
'</pre> ',non-directive
' <p> This package contains implementations of the {@link _ClassPathElement_ Collection} interface. <p> The following implementations are provided in the package: <ul> <li>_ClassElement_ - a collection that combines multiple collections into one </ul> The following decorators are provided in the package: <ul> <li>Synchronized - synchronizes method access for multi-threaded environments <li>Unmodifiable - ensures the collection cannot be altered <li>Predicated - ensures that only elements that are valid according to a predicate can be added <li>Typed - ensures that only elements that are of a specific type can be added <li>Transformed - transforms elements as they are added </ul> </pre> ',directive
' <p> This package contains implementations of the {',non-directive
'@link _ClassPathElement_ Collection} interface. ',non-directive
'<p> The following implementations are provided in the package: <ul> ',non-directive
'<li>_ClassElement_ - a collection that combines multiple collections into one </ul> ',non-directive
'The following decorators are provided in the package: <ul> ',non-directive
'<li>Synchronized - synchronizes method access for multi-threaded environments ',directive
'<li>Unmodifiable - ensures the collection cannot be altered ',non-directive
'<li>Predicated - ensures that only elements that are valid according to a predicate can be added ',directive
'<li>Typed - ensures that only elements that are of a specific type can be added ',directive
'<li>Transformed - transforms elements as they are added </ul> ',non-directive
'</pre> ',non-directive
'  Provides for system input and output through data streams, serialization and the file system.  Unless otherwise noted, passing a null argument to a constructor or method in any class or interface in this package will cause a <tt>_ClassElement_</tt> to be thrown.  <h2>Package Specification</h2> <ul>   <li><a href=\"_ClassPathElement_\"> Java Object Serialization Specification </a> </ul>  <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"_OSPathElement_serialization\">Serialization Enhancements</a> </ul>  @since _ClassPathElement_ ',directive
'  Provides for system input and output through data streams, serialization and the file system.  ',non-directive
'Unless otherwise noted, passing a null argument to a constructor or method in any class or interface in this package will cause a <tt>_ClassElement_</tt> to be thrown.  ',directive
'<h2>Package Specification</h2> <ul>   ',non-directive
'<li><a href=\"_ClassPathElement_\"> Java Object Serialization Specification </a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"_OSPathElement_serialization\">Serialization Enhancements</a> </ul>  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides the RMI package. RMI is Remote Method Invocation.  It is a mechanism that enables an object on one Java virtual machine to invoke methods on an object in another Java virtual machine.  Any object that can be invoked this way must implement the Remote interface. When such an object is invoked, its arguments are ``marshalled\'\' and sent from the local virtual machine to the remote one, where the arguments are ``unmarshalled.\'\'  When the method terminates, the results are marshalled from the remote machine and sent to the caller\'s virtual machine.  If the method invocation results in an exception being thrown, the exception is indicated to caller.  <!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   <li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',directive
'  Provides the RMI package. ',non-directive
'RMI is Remote Method Invocation.  ',directive
'It is a mechanism that enables an object on one Java virtual machine to invoke methods on an object in another Java virtual machine.  ',directive
'Any object that can be invoked this way must implement the Remote interface. ',directive
'When such an object is invoked, its arguments are ``marshalled\'\' and sent from the local virtual machine to the remote one, where the arguments are ``unmarshalled.\'\'  When the method terminates, the results are marshalled from the remote machine and sent to the caller\'s virtual machine.  ',directive
'If the method invocation results in an exception being thrown, the exception is indicated to caller.  ',directive
'<!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides support for RMI Object Activation.  A remote object\'s reference can be made ``persistent\'\' and later activated into a ``live\'\' object using the RMI activation mechanism.  <!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   <li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',non-directive
'  Provides support for RMI Object Activation.  ',non-directive
'A remote object\'s reference can be made ``persistent\'\' and later activated into a ``live\'\' object using the RMI activation mechanism.  ',non-directive
'<!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides classes and interface for RMI distributed garbage-collection (DGC).  When the RMI server returns an object to its client (caller of the remote method), it tracks the remote object\'s usage in the client. When there are no more references to the remote object on the client, or if the reference\'s ``lease\'\' expires and not renewed, the server garbage-collects the remote object.  <!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   <li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',directive
'  Provides classes and interface for RMI distributed garbage-collection (DGC).  ',non-directive
'When the RMI server returns an object to its client (caller of the remote method), it tracks the remote object\'s usage in the client. ',directive
'When there are no more references to the remote object on the client, or if the reference\'s ``lease\'\' expires and not renewed, the server garbage-collects the remote object.  ',non-directive
'<!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides classes and interfaces for supporting the server side of RMI.  A group of classes are used by the stubs and skeletons generated by the rmic stub compiler.  Another group of classes implements the RMI Transport protocol and HTTP tunneling.  <!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   <li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',non-directive
'  Provides classes and interfaces for supporting the server side of RMI.  ',non-directive
'A group of classes are used by the stubs and skeletons generated by the rmic stub compiler.  ',non-directive
'Another group of classes implements the RMI Transport protocol and HTTP tunneling.  ',non-directive
'<!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides a class and two interfaces for the RMI registry. A registry is a remote object that maps names to remote objects.  A server registers its remote objects with the registry so that they can be looked up.  When an object wants to invoke a method on a remote object, it must first lookup the remote object using its name.  The registry returns to the calling object a reference to the remote object, using which a remote method can be invoked.  <!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   <li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',directive
'  Provides a class and two interfaces for the RMI registry. ',non-directive
'A registry is a remote object that maps names to remote objects.  ',non-directive
'A server registers its remote objects with the registry so that they can be looked up.  ',non-directive
'When an object wants to invoke a method on a remote object, it must first lookup the remote object using its name.  ',directive
'The registry returns to the calling object a reference to the remote object, using which a remote method can be invoked.  ',directive
'<!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides classes that are fundamental to the design of the Java programming language. The most important classes are <code>Object</code>, which is the root of the class hierarchy, and <code>Class</code>, instances of which represent classes at run time. <p> Frequently it is necessary to represent a value of primitive type as if it were an object. The wrapper classes <code>Boolean</code>, <code>Character</code>, <code>Integer</code>, <code>Long</code>, <code>Float</code>, and <code>Double</code> serve this purpose. An object of type <code>Double</code>, for example, contains a field whose type is double, representing that value in such a way that a reference to it can be stored in a variable of reference type. These classes also provide a number of methods for converting among primitive values, as well as supporting such standard methods as equals and _ClassElement_.  The <code>Void</code> class is a non-instantiable class that holds a reference to a <code>Class</code> object represening the primitive type void. <p> The class <code>Math</code> provides commonly used mathematical functions such as sine, cosine, and square root. The classes <code>String</code> and <code>_ClassElement_</code> similarly provide commonly used operations on character strings. <p> Classes <code>_ClassElement_</code>, <code>Process</code>, <code>Runtime</code>, <code>_ClassElement_</code>, and <code>System</code> provide \"system operations\" that manage the dynamic loading of classes, creation of external processes, host environment inquiries such as the time of day, and enforcement of security policies. <p> Class <code>Throwable</code> encompasses objects that may be thrown by the throw statement (&sect;_ClassPathElement_). Subclasses of <code>Throwable</code> represent errors and exceptions. <p> <h2>Package Specification</h2>   <a name=\"charenc\"></a> <h3>Character Encodings</h3>  The specification of the {@link _ClassPathElement_ _ClassPathElement_} class describes the naming conventions for character encodings as well as the set of standard encodings that must be supported by every implementation of the Java platform.   <!-- <ul>   <li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',directive
'  Provides classes that are fundamental to the design of the Java programming language. ',non-directive
'The most important classes are <code>Object</code>, which is the root of the class hierarchy, and <code>Class</code>, instances of which represent classes at run time. ',non-directive
'<p> Frequently it is necessary to represent a value of primitive type as if it were an object. ',directive
'The wrapper classes <code>Boolean</code>, <code>Character</code>, <code>Integer</code>, <code>Long</code>, <code>Float</code>, and <code>Double</code> serve this purpose. ',non-directive
'An object of type <code>Double</code>, for example, contains a field whose type is double, representing that value in such a way that a reference to it can be stored in a variable of reference type. ',non-directive
'These classes also provide a number of methods for converting among primitive values, as well as supporting such standard methods as equals and _ClassElement_.  ',non-directive
'The <code>Void</code> class is a non-instantiable class that holds a reference to a <code>Class</code> object represening the primitive type void. ',non-directive
'<p> The class <code>Math</code> provides commonly used mathematical functions such as sine, cosine, and square root. ',non-directive
'The classes <code>String</code> and <code>_ClassElement_</code> similarly provide commonly used operations on character strings. ',non-directive
'<p> Classes <code>_ClassElement_</code>, <code>Process</code>, <code>Runtime</code>, <code>_ClassElement_</code>, and <code>System</code> provide \"system operations\" that manage the dynamic loading of classes, creation of external processes, host environment inquiries such as the time of day, and enforcement of security policies. ',non-directive
'<p> Class <code>Throwable</code> encompasses objects that may be thrown by the throw statement (&sect;_ClassPathElement_). ',directive
'Subclasses of <code>Throwable</code> represent errors and exceptions. ',directive
'<p> <h2>Package Specification</h2>   <a name=\"charenc\"></a> <h3>Character Encodings</h3>  The specification of the {',non-directive
'@link _ClassPathElement_ _ClassPathElement_} class describes the naming conventions for character encodings as well as the set of standard encodings that must be supported by every implementation of the Java platform.   ',directive
'<!-- <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'   Provides reference-object classes, which support a limited degree of interaction with the garbage collector.  A program may use a reference object to maintain a reference to some other object in such a way that the latter object may still be reclaimed by the collector.  A program may also arrange to be notified some time after the collector has determined that the reachability of a given object has changed.   <h2>Package Specification</h2>  A <em>reference object</em> encapsulates a reference to some other object so that the reference itself may be examined and manipulated like any other object.  Three types of reference objects are provided, each weaker than the last: <em>soft</em>, <em>weak</em>, and <em>phantom</em>.  Each type corresponds to a different level of reachability, as defined below.  Soft references are for implementing memory-sensitive caches, weak references are for implementing canonicalizing mappings that do not prevent their keys (or values) from being reclaimed, and phantom references are for scheduling pre-mortem cleanup actions in a more flexible way than is possible with the Java finalization mechanism.  <p> Each reference-object type is implemented by a subclass of the abstract base <code>{@link _ClassPathElement_}</code> class.  An instance of one of these subclasses encapsulates a single reference to a particular object, called the <em>referent</em>.  Every reference object provides methods for getting and clearing the reference.  Aside from the clearing operation reference objects are otherwise immutable, so no <code>set</code> operation is provided.  A program may further subclass these subclasses, adding whatever fields and methods are required for its purposes, or it may use these subclasses without change.   <h3>Notification</h3>  A program may request to be notified of changes in an object\'s reachability by <em>registering</em> an appropriate reference object with a <em>reference queue</em> at the time the reference object is created.  Some time after the garbage collector determines that the reachability of the referent has changed to the value corresponding to the type of the reference, it will add the reference to the associated queue.  At this point, the reference is considered to be <em>enqueued</em>.  The program may remove references from a queue either by polling or by blocking until a reference becomes available.  Reference queues are implemented by the <code>{@link _ClassPathElement_}</code> class.  <p> The relationship between a registered reference object and its queue is one-sided.  That is, a queue does not keep track of the references that are registered with it.  If a registered reference becomes unreachable itself, then it will never be enqueued.  It is the responsibility of the program using reference objects to ensure that the objects remain reachable for as long as the program is interested in their referents.  <p> While some programs will choose to dedicate a thread to removing reference objects from one or more queues and processing them, this is by no means necessary.  A tactic that often works well is to examine a reference queue in the course of performing some other fairly-frequent action.  For example, a hashtable that uses weak references to implement weak keys could poll its reference queue each time the table is accessed.  This is how the <code>{@link _ClassPathElement_}</code> class works.  Because the <code>{@link _ClassPathElement_#poll _ClassPathElement_}</code> method simply checks an internal data structure, this check will add little overhead to the hashtable access methods.   <h3>Automatically-cleared references</h3>  Soft and weak references are automatically cleared by the collector before being added to the queues with which they are registered, if any.  Therefore soft and weak references need not be registered with a queue in order to be useful, while phantom references do.  An object that is reachable via phantom references will remain so until all such references are cleared or themselves become unreachable.   <a name=\"reachability\"></a> <h3>Reachability</h3>  Going from strongest to weakest, the different levels of reachability reflect the life cycle of an object.  They are operationally defined as follows:  <ul>  <li> An object is <em>strongly reachable</em> if it can be reached by some thread without traversing any reference objects.  A newly-created object is strongly reachable by the thread that created it.  <li> An object is <em>softly reachable</em> if it is not strongly reachable but can be reached by traversing a soft reference.  <li> An object is <em>weakly reachable</em> if it is neither strongly nor softly reachable but can be reached by traversing a weak reference.  When the weak references to a weakly-reachable object are cleared, the object becomes eligible for finalization.  <li> An object is <em>phantom reachable</em> if it is neither strongly, softly, nor weakly reachable, it has been finalized, and some phantom reference refers to it.  <li> Finally, an object is <em>unreachable</em>, and therefore eligible for reclamation, when it is not reachable in any of the above ways.  </ul>   @version  _ClassPathElement_, _OSPathElement_10 @author   Mark Reinhold @since   _ClassPathElement_  <!-- <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> --> ',directive
'   Provides reference-object classes, which support a limited degree of interaction with the garbage collector.  ',non-directive
'A program may use a reference object to maintain a reference to some other object in such a way that the latter object may still be reclaimed by the collector.  ',directive
'A program may also arrange to be notified some time after the collector has determined that the reachability of a given object has changed.   ',directive
'<h2>Package Specification</h2>  A <em>reference object</em> encapsulates a reference to some other object so that the reference itself may be examined and manipulated like any other object.  ',directive
'Three types of reference objects are provided, each weaker than the last: <em>soft</em>, <em>weak</em>, and <em>phantom</em>.  ',non-directive
'Each type corresponds to a different level of reachability, as defined below.  ',non-directive
'Soft references are for implementing memory-sensitive caches, weak references are for implementing canonicalizing mappings that do not prevent their keys (or values) from being reclaimed, and phantom references are for scheduling pre-mortem cleanup actions in a more flexible way than is possible with the Java finalization mechanism.  ',non-directive
'<p> Each reference-object type is implemented by a subclass of the abstract base <code>{',directive
'@link _ClassPathElement_}</code> class.  ',non-directive
'An instance of one of these subclasses encapsulates a single reference to a particular object, called the <em>referent</em>.  ',directive
'Every reference object provides methods for getting and clearing the reference.  ',non-directive
'Aside from the clearing operation reference objects are otherwise immutable, so no <code>set</code> operation is provided.  ',non-directive
'A program may further subclass these subclasses, adding whatever fields and methods are required for its purposes, or it may use these subclasses without change.   ',directive
'<h3>Notification</h3>  A program may request to be notified of changes in an object\'s reachability by <em>registering</em> an appropriate reference object with a <em>reference queue</em> at the time the reference object is created.  ',directive
'Some time after the garbage collector determines that the reachability of the referent has changed to the value corresponding to the type of the reference, it will add the reference to the associated queue.  ',directive
'At this point, the reference is considered to be <em>enqueued</em>.  ',non-directive
'The program may remove references from a queue either by polling or by blocking until a reference becomes available.  ',directive
'Reference queues are implemented by the <code>{',non-directive
'@link _ClassPathElement_}</code> class.  ',non-directive
'<p> The relationship between a registered reference object and its queue is one-sided.  ',directive
'That is, a queue does not keep track of the references that are registered with it.  ',non-directive
'If a registered reference becomes unreachable itself, then it will never be enqueued.  ',directive
'It is the responsibility of the program using reference objects to ensure that the objects remain reachable for as long as the program is interested in their referents.  ',non-directive
'<p> While some programs will choose to dedicate a thread to removing reference objects from one or more queues and processing them, this is by no means necessary.  ',directive
'A tactic that often works well is to examine a reference queue in the course of performing some other fairly-frequent action.  ',non-directive
'For example, a hashtable that uses weak references to implement weak keys could poll its reference queue each time the table is accessed.  ',non-directive
'This is how the <code>{',non-directive
'@link _ClassPathElement_}</code> class works.  ',non-directive
'Because the <code>{',non-directive
'@link _ClassPathElement_#poll _ClassPathElement_}</code> method simply checks an internal data structure, this check will add little overhead to the hashtable access methods.   ',non-directive
'<h3>Automatically-cleared references</h3>  Soft and weak references are automatically cleared by the collector before being added to the queues with which they are registered, if any.  ',directive
'Therefore soft and weak references need not be registered with a queue in order to be useful, while phantom references do.  ',non-directive
'An object that is reachable via phantom references will remain so until all such references are cleared or themselves become unreachable.   ',non-directive
'<a name=\"reachability\"></a> <h3>Reachability</h3>  Going from strongest to weakest, the different levels of reachability reflect the life cycle of an object.  ',directive
'They are operationally defined as follows:  <ul>  ',non-directive
'<li> An object is <em>strongly reachable</em> if it can be reached by some thread without traversing any reference objects.  ',directive
'A newly-created object is strongly reachable by the thread that created it.  ',directive
'<li> An object is <em>softly reachable</em> if it is not strongly reachable but can be reached by traversing a soft reference.  ',directive
'<li> An object is <em>weakly reachable</em> if it is neither strongly nor softly reachable but can be reached by traversing a weak reference.  ',directive
'When the weak references to a weakly-reachable object are cleared, the object becomes eligible for finalization.  ',non-directive
'<li> An object is <em>phantom reachable</em> if it is neither strongly, softly, nor weakly reachable, it has been finalized, and some phantom reference refers to it.  ',directive
'<li> Finally, an object is <em>unreachable</em>, and therefore eligible for reclamation, when it is not reachable in any of the above ways.  ',non-directive
'</ul>   ',non-directive
'@version  _ClassPathElement_, _OSPathElement_10 ',non-directive
'@author   Mark Reinhold ',non-directive
'@since   _ClassPathElement_  <!-- <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'--> ',non-directive
'  Provides library support for the Java programming language annotation facility.  @version  _ClassPathElement_, _OSPathElement_10 @author   Josh Bloch @since   _ClassPathElement_  ',non-directive
'  Provides library support for the Java programming language annotation facility.  ',non-directive
'@version  _ClassPathElement_, _OSPathElement_10 ',non-directive
'@author   Josh Bloch ',non-directive
'@since   _ClassPathElement_  ',non-directive
'  Provides classes and interfaces for obtaining reflective information about classes and objects.  Reflection allows programmatic access to information about the fields, methods and constructors of loaded classes, and the use of reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions. <p> <code>_ClassElement_</code> allows supression of access checks if the necessary <code>_ClassElement_</code> is available. <p> <code>Array</code> provides static methods to dynamically create and access arrays. <p> Classes in this package, along with <code>_ClassPathElement_</code> accommodate applications such as debuggers, interpreters, object inspectors, class browsers, and services such as Object Serialization and _ClassElement_ that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class.  <!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   <li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',directive
'  Provides classes and interfaces for obtaining reflective information about classes and objects.  ',non-directive
'Reflection allows programmatic access to information about the fields, methods and constructors of loaded classes, and the use of reflected fields, methods, and constructors to operate on their underlying counterparts, within security restrictions. ',directive
'<p> <code>_ClassElement_</code> allows supression of access checks if the necessary <code>_ClassElement_</code> is available. ',directive
'<p> <code>Array</code> provides static methods to dynamically create and access arrays. ',non-directive
'<p> Classes in this package, along with <code>_ClassPathElement_</code> accommodate applications such as debuggers, interpreters, object inspectors, class browsers, and services such as Object Serialization and _ClassElement_ that need access to either the public members of a target object (based on its runtime class) or the members declared by a given class.  ',directive
'<!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides services that allow Java programming language agents to instrument programs running on the JVM.  The mechanism for instrumentation is modification of the byte-codes of methods.  <h2>Package Specification</h2>  <P>  An agent is deployed as a JAR file. An attribute in the JAR file manifest specifies the agent class which will be loaded to start the agent. For implementations that support a command-line  interface, an agent is started by specifying an option on the command-line.   Implementations may also support a mechanism to start agents some time after the VM has started. For example, an implementation may provide a mechanism that allows a tool to  <i>attach</i> to a running application, and initiate the loading of the tool\'s agent into the running application. The details as to how the load is initiated, is implementation dependent.  <h3>Command-Line Interface</h3>  <P>  On implementations with a command-line interface, an agent is started by adding this option to the command-line: <blockquote> <code><b>-javaagent:</b></code><i>jarpath[</i><code><b>=</b></code><i>options]</i> </blockquote> <i>jarpath</i> is the path to the agent JAR file. <i>options</i> is the agent options. This switch may be used multiple times on the same command-line,  thus creating multiple agents. More than one agent may use the same <i>jarpath</i>. An agent JAR file must conform to the JAR file specification.  <P> The manifest of the agent JAR file must contain the attribute <code>Premain-Class</code>. The value of this attribute is the name of the <i>agent class</i>. The agent class must implement a  public static <code>premain</code> method similar in principle to the <code>main</code> application  entry point.  After the Java Virtual Machine (JVM) has initialized, each <code>premain</code> method  will be called in the order the agents were specified, then the real application <code>main</code> method will be called.  Each <code>premain</code> method must return in order for the startup sequence to proceed.  <P> The <code>premain</code> method has one of two possible signatures. The JVM first attempts to invoke the following method on the agent class:  <blockquote> <code>public static void premain(String _ClassElement_, Instrumentation inst); </code> </blockquote>  <P> If the agent class does not implement this method then the JVM will attempt to invoke:  <blockquote> <code>public static void premain(String _ClassElement_); </code> </blockquote>  <P> The agent class may also have an <code>agentmain</code> method for use when the agent is started  after VM startup. When the agent is started using a command-line option, the <code>agentmain</code> method is not invoked.   <P> The agent class will be loaded by the system class loader (see {@link _ClassPathElement_#_ClassElement_ _ClassPathElement_}). This is the class loader which typically loads the class containing the application <code>main</code> method. The <code>premain</code> methods will be run under the same security and classloader  rules as the application <code>main</code> method. There are no modeling restrictions on what the agent <code>premain</code> method may do. Anything application <code>main</code> can do, including creating threads, is legal from <code>premain</code>.  <P> Each agent is passed its agent options via the <code>_ClassElement_</code> parameter. The agent options are passed as a single string, any additional parsing should be performed by the agent itself.  <P> If the agent cannot be resolved  (for example, because the agent class cannot be loaded, or because the agent class does not have an appropriate <code>premain</code> method), the JVM will abort. If a <code>premain</code> method throws an uncaught exception, the JVM will abort.    <h3>Starting Agents After VM Startup</h3>  <p> An implementation may provide a mechanism to start agents sometime after the the VM has started. The details as to how this is initiated are implementation  specific but typically the application has already started and its <code> main</code> method has already been invoked. In cases where an implementation supports the starting of agents after the VM has started the following applies:  <ol>   <li><p>The manifest of the agent JAR must contain the attribute <code>Agent-Class</code>.        The value of this attribute is the name of the <i>agent class</i>. </p></li>           <li><p>The agent class must implement a public static <code>agentmain</code> method. </p></li>    <li><p>The system class loader (       {@link _ClassPathElement_#_ClassElement_ _ClassPathElement_}) must       support a mechanism to add an agent JAR file to the system class path. <p></li> </ol>    <P> The agent JAR is appended to the system class path. This is the class loader that typically loads  the class containing the application <code>main</code> method. The agent class is loaded and the JVM attempts to invoke the <code>agentmain</code> method. The JVM first attempts to invoke  the following method on the agent class:  <blockquote> <code>public static void agentmain(String _ClassElement_, Instrumentation inst); </code> </blockquote>  <P> If the agent class does not implement this method then the JVM will attempt to invoke:  <blockquote> <code>public static void agentmain(String _ClassElement_); </code> </blockquote>  <P> The agent class may also have an <code>premain</code> method for use when the agent is started using a command-line option. When the agent is started after VM startup the <code>premain</code> method is not invoked.   <P> The agent is passed its agent options via the <code>_ClassElement_</code> parameter. The agent options are passed as a single string, any additional parsing should be performed by the agent itself.   <P> The <code>agentmain</code> method should do any necessary initialization  required to start the agent. When startup is complete the method should  return. If the agent cannot be started (for example, because the agent class cannot be loaded, or because the agent class does not have a conformant <code>agentmain</code> method), the JVM will not abort. If the <code>agentmain</code> method throws an uncaught exception it will be ignored.    <h3>Manifest Attributes</h3> The following manifest attributes are defined for an agent JAR file: <blockquote> <dl> <dt><code>Premain-Class</code></dt> <dd>                         When an agent is specified at JVM launch time this attribute    specifies the agent class.    That is, the class containing the <code>premain</code> method.                         When an agent is specified at JVM launch time this attribute    is required. If the attribute is not present the JVM will abort.                         Note: this is a class name, not a file name or path.        </dd>  <dt><code>Agent-Class</code></dt> <dd>                         If an implementation supports a mechanism to start agents                          sometime after the VM has started then this attribute specifies                         the agent class.                         That is, the class containing the <code>agentmain</code> method.                         This attribute is required, if it is not present the agent                         will not be started.                         Note: this is a class name, not a file name or path. </dd>     <dt><code>Boot-Class-Path</code></dt> <dd>                         A list of paths to be searched by the bootstrap class                         loader. Paths represent directories or libraries                         (commonly referred to as JAR or zip libraries on                         many platforms).                             These paths are searched by the                         bootstrap class loader after the platform specific                         mechanisms of locating a class have failed.                         Paths are searched in the order listed.                         Paths in the list are separated by one or more spaces.                         A path takes the syntax of the path component of a                         hierarchical URI. The path is                         absolute if it begins with a slash character (\'/\'),                         otherwise it is relative. A relative path is resolved                         against the absolute path of the agent JAR file.                         Malformed and non-existent paths are ignored.     When an agent is started sometime after the VM has    started then paths that do not represent a JAR file    are ignored.                         This attribute is optional. </dd> <dt><code>Can-Redefine-Classes</code></dt> <dd>                         Boolean (<code>true</code> or <code>false</code>, case irrelevant).                         Is the ability to redefine classes                         needed by this agent.                         Values other than <code>true</code> are considered <code>false</code>.                         This attribute is optional, the default is <code>false</code>. </dd> <dt><code>Can-Retransform-Classes</code></dt> <dd>                         Boolean (<code>true</code> or <code>false</code>, case irrelevant).                         Is the ability to retransform classes                         needed by this agent.                         Values other than <code>true</code> are considered <code>false</code>.                         This attribute is optional, the default is <code>false</code>. </dd> <dt><code>Can-Set-Native-Method-Prefix</code></dt> <dd>                         Boolean (<code>true</code> or <code>false</code>, case irrelevant).                         Is the ability to set native method prefix needed by this agent.                         Values other than <code>true</code> are considered <code>false</code>.                         This attribute is optional, the default is <code>false</code>. </dd> </dl> </blockquote>  <p>  An agent JAR file may have both the <code>Premain-Class</code> and <code>Agent-Class</code> attributes present in the manifest. When the agent is started on the command-line using the <code>-javaagent</code> option then the <code>Premain-Class</code> attribute specifies the name of the agent class and the <code>Agent-Class</code> attribute is ignored. Similarly, if the agent is started sometime after the VM has started, then the <code>Agent-Class</code> attribute specifies the name of the agent class (the value of <code>Premain-Class</code> attribute is ignored).  <h2>Related Documentation</h2>  For tool documentation, please see: <ul>   <li><a href=\"{@_ClassElement_}/_ClassPathElement_\">JDK Tools and Utilities</a> </ul>  @since _ClassPathElement_ @revised _ClassPathElement_  ',directive
'  Provides services that allow Java programming language agents to instrument programs running on the JVM.  ',non-directive
'The mechanism for instrumentation is modification of the byte-codes of methods.  ',non-directive
'<h2>Package Specification</h2>  <P>  An agent is deployed as a JAR file. ',non-directive
'An attribute in the JAR file manifest specifies the agent class which will be loaded to start the agent. ',non-directive
'For implementations that support a command-line  interface, an agent is started by specifying an option on the command-line.   ',non-directive
'Implementations may also support a mechanism to start agents some time after the VM has started. ',directive
'For example, an implementation may provide a mechanism that allows a tool to  <i>attach</i> to a running application, and initiate the loading of the tool\'s agent into the running application. ',directive
'The details as to how the load is initiated, is implementation dependent.  ',non-directive
'<h3>Command-Line Interface</h3>  <P>  On implementations with a command-line interface, an agent is started by adding this option to the command-line: <blockquote> <code><b>-javaagent:</b></code><i>jarpath[</i><code><b>=</b></code><i>options]</i> </blockquote> <i>jarpath</i> is the path to the agent JAR file. ',non-directive
'<i>options</i> is the agent options. ',non-directive
'This switch may be used multiple times on the same command-line,  thus creating multiple agents. ',directive
'More than one agent may use the same <i>jarpath</i>. ',directive
'An agent JAR file must conform to the JAR file specification.  ',directive
'<P> The manifest of the agent JAR file must contain the attribute <code>Premain-Class</code>. ',directive
'The value of this attribute is the name of the <i>agent class</i>. ',non-directive
'The agent class must implement a  public static <code>premain</code> method similar in principle to the <code>main</code> application  entry point.  ',directive
'After the Java Virtual Machine (JVM) has initialized, each <code>premain</code> method  will be called in the order the agents were specified, then the real application <code>main</code> method will be called.  ',directive
'Each <code>premain</code> method must return in order for the startup sequence to proceed.  ',directive
'<P> The <code>premain</code> method has one of two possible signatures. ',non-directive
'The JVM first attempts to invoke the following method on the agent class:  <blockquote> <code>public static void premain(String _ClassElement_, Instrumentation inst); </code> </blockquote>  <P> If the agent class does not implement this method then the JVM will attempt to invoke:  <blockquote> <code>public static void premain(String _ClassElement_); </code> </blockquote>  <P> The agent class may also have an <code>agentmain</code> method for use when the agent is started  after VM startup. ',directive
'When the agent is started using a command-line option, the <code>agentmain</code> method is not invoked.   ',directive
'<P> The agent class will be loaded by the system class loader (see {',non-directive
'@link _ClassPathElement_#_ClassElement_ _ClassPathElement_}). ',non-directive
'This is the class loader which typically loads the class containing the application <code>main</code> method. ',non-directive
'The <code>premain</code> methods will be run under the same security and classloader  rules as the application <code>main</code> method. ',non-directive
'There are no modeling restrictions on what the agent <code>premain</code> method may do. ',directive
'Anything application <code>main</code> can do, including creating threads, is legal from <code>premain</code>.  ',directive
'<P> Each agent is passed its agent options via the <code>_ClassElement_</code> parameter. ',non-directive
'The agent options are passed as a single string, any additional parsing should be performed by the agent itself.  ',directive
'<P> If the agent cannot be resolved  (for example, because the agent class cannot be loaded, or because the agent class does not have an appropriate <code>premain</code> method), the JVM will abort. ',non-directive
'If a <code>premain</code> method throws an uncaught exception, the JVM will abort.    ',non-directive
'<h3>Starting Agents After VM Startup</h3>  <p> An implementation may provide a mechanism to start agents sometime after the the VM has started. ',directive
'The details as to how this is initiated are implementation  specific but typically the application has already started and its <code> main</code> method has already been invoked. ',directive
'In cases where an implementation supports the starting of agents after the VM has started the following applies:  <ol>   ',directive
'<li><p>The manifest of the agent JAR must contain the attribute <code>Agent-Class</code>.        ',directive
'The value of this attribute is the name of the <i>agent class</i>. ',non-directive
'</p></li>           ',non-directive
'<li><p>The agent class must implement a public static <code>agentmain</code> method. ',directive
'</p></li>    ',non-directive
'<li><p>The system class loader (       {',non-directive
'@link _ClassPathElement_#_ClassElement_ _ClassPathElement_}) must       support a mechanism to add an agent JAR file to the system class path. ',directive
'<p></li> </ol>    ',non-directive
'<P> The agent JAR is appended to the system class path. ',non-directive
'This is the class loader that typically loads  the class containing the application <code>main</code> method. ',non-directive
'The agent class is loaded and the JVM attempts to invoke the <code>agentmain</code> method. ',directive
'The JVM first attempts to invoke  the following method on the agent class:  <blockquote> <code>public static void agentmain(String _ClassElement_, Instrumentation inst); </code> </blockquote>  <P> If the agent class does not implement this method then the JVM will attempt to invoke:  <blockquote> <code>public static void agentmain(String _ClassElement_); </code> </blockquote>  <P> The agent class may also have an <code>premain</code> method for use when the agent is started using a command-line option. ',directive
'When the agent is started after VM startup the <code>premain</code> method is not invoked.   ',directive
'<P> The agent is passed its agent options via the <code>_ClassElement_</code> parameter. ',non-directive
'The agent options are passed as a single string, any additional parsing should be performed by the agent itself.   ',directive
'<P> The <code>agentmain</code> method should do any necessary initialization  required to start the agent. ',directive
'When startup is complete the method should  return. ',directive
'If the agent cannot be started (for example, because the agent class cannot be loaded, or because the agent class does not have a conformant <code>agentmain</code> method), the JVM will not abort. ',non-directive
'If the <code>agentmain</code> method throws an uncaught exception it will be ignored.    ',non-directive
'<h3>Manifest Attributes</h3> The following manifest attributes are defined for an agent JAR file: <blockquote> <dl> <dt><code>Premain-Class</code></dt> ',non-directive
'<dd>                         When an agent is specified at JVM launch time this attribute    specifies the agent class.    ',non-directive
'That is, the class containing the <code>premain</code> method.                         ',non-directive
'When an agent is specified at JVM launch time this attribute    is required. ',directive
'If the attribute is not present the JVM will abort.                         ',non-directive
'Note: this is a class name, not a file name or path.        ',directive
'</dd>  <dt><code>Agent-Class</code></dt> ',non-directive
'<dd>                         If an implementation supports a mechanism to start agents                          sometime after the VM has started then this attribute specifies                         the agent class.                         ',directive
'That is, the class containing the <code>agentmain</code> method.                         ',non-directive
'This attribute is required, if it is not present the agent                         will not be started.                         ',directive
'Note: this is a class name, not a file name or path. ',directive
'</dd>     <dt><code>Boot-Class-Path</code></dt> ',non-directive
'<dd>                         A list of paths to be searched by the bootstrap class                         loader. ',non-directive
'Paths represent directories or libraries                         (commonly referred to as JAR or zip libraries on                         many platforms).                             ',non-directive
'These paths are searched by the                         bootstrap class loader after the platform specific                         mechanisms of locating a class have failed.                         ',directive
'Paths are searched in the order listed.                         ',non-directive
'Paths in the list are separated by one or more spaces.                         ',non-directive
'A path takes the syntax of the path component of a                         hierarchical URI. ',non-directive
'The path is                         absolute if it begins with a slash character (\'/\'),                         otherwise it is relative. ',non-directive
'A relative path is resolved                         against the absolute path of the agent JAR file.                         ',non-directive
'Malformed and non-existent paths are ignored.     ',non-directive
'When an agent is started sometime after the VM has    started then paths that do not represent a JAR file    are ignored.                         ',directive
'This attribute is optional. ',non-directive
'</dd> <dt><code>Can-Redefine-Classes</code></dt> ',non-directive
'<dd>                         Boolean (<code>true</code> or <code>false</code>, case irrelevant).                         ',non-directive
'Is the ability to redefine classes                         needed by this agent.                         ',non-directive
'Values other than <code>true</code> are considered <code>false</code>.                         ',non-directive
'This attribute is optional, the default is <code>false</code>. ',non-directive
'</dd> <dt><code>Can-Retransform-Classes</code></dt> ',non-directive
'<dd>                         Boolean (<code>true</code> or <code>false</code>, case irrelevant).                         ',non-directive
'Is the ability to retransform classes                         needed by this agent.                         ',non-directive
'Values other than <code>true</code> are considered <code>false</code>.                         ',non-directive
'This attribute is optional, the default is <code>false</code>. ',non-directive
'</dd> <dt><code>Can-Set-Native-Method-Prefix</code></dt> ',non-directive
'<dd>                         Boolean (<code>true</code> or <code>false</code>, case irrelevant).                         ',non-directive
'Is the ability to set native method prefix needed by this agent.                         ',non-directive
'Values other than <code>true</code> are considered <code>false</code>.                         ',non-directive
'This attribute is optional, the default is <code>false</code>. ',non-directive
'</dd> </dl> ',non-directive
'</blockquote>  <p>  An agent JAR file may have both the <code>Premain-Class</code> and <code>Agent-Class</code> attributes present in the manifest. ',directive
'When the agent is started on the command-line using the <code>-javaagent</code> option then the <code>Premain-Class</code> attribute specifies the name of the agent class and the <code>Agent-Class</code> attribute is ignored. ',non-directive
'Similarly, if the agent is started sometime after the VM has started, then the <code>Agent-Class</code> attribute specifies the name of the agent class (the value of <code>Premain-Class</code> attribute is ignored).  ',directive
'<h2>Related Documentation</h2>  For tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"{@_ClassElement_}/_ClassPathElement_\">JDK Tools and Utilities</a> </ul>  ',non-directive
'@since _ClassPathElement_ @revised _ClassPathElement_  ',non-directive
'  Provides the management interface for monitoring and management of the  Java virtual machine as well as the operating system on which the  Java virtual machine is running.  It allows both local and remote  monitoring and management of the running Java virtual machine.    <h4>Platform MXBeans</h4>  This package defines the management interface of the following components:  <blockquote> <table cellspacing=1 summary=\"Description of the MBeans\"> <tr> <th><p align=\"left\">Management Interface</p></th> <th><p align=\"left\">Description</p></th> </tr> <tr> <td> <tt>{@link _ClassPathElement_}</tt> </td> <td> Class loading system of the Java virtual machine.</td> </tr> <tr> <td> <tt>{@link _ClassPathElement_}</tt> </td> <td> Compilation system of the Java virtual machine.</td> </tr> <tr> <td> <tt>{@link _ClassPathElement_}</tt> </td> <td> Memory system of the Java virtual machine.</td> </tr> <tr> <td> <tt>{@link _ClassPathElement_}</tt> </td> <td> Threads system of the Java virtual machine.</td> </tr> <tr> <td> <tt>{@link _ClassPathElement_}</tt> </td> <td> Runtime system of the Java virtual machine.</td> </tr> <tr> <td> <tt>{@link _ClassPathElement_}</tt> </td> <td> Operating system on which the Java virtual machine is running.</td> </tr> <tr> <td> <tt>{@link _ClassPathElement_}</tt> </td> <td> Garbage collector in the Java virtual machine.</td> </tr> <tr> <td> <tt>{@link _ClassPathElement_}</tt> </td> <td> Memory manager in the Java virtual machine.</td> </tr> <tr> <td> <tt>{@link _ClassPathElement_}</tt> </td> <td> Memory pool in the Java virtual machine.</td> </tr> </table> </blockquote>  <p> A platform MXBean is a <i>managed bean</i> that defines the management interface for one component for the platform and is specified in the <a href=\"_ClassPathElement_#MXBean\"> _ClassElement_</a> class.  <p>An application can monitor the instrumentation of the  Java virtual machine and manage certain characteristics in the following ways: <ul> <li><i>Direct access to an MXBean interface</i>     <ol type=\"a\">     <li>Get the MXBean instance through the static factory method         and access the MXBean interface locally of the running         virtual machine.</li>     <li>Construct an MXBean proxy instance that         forwards the method calls to a given          {@link _ClassPathElement_ MBeanServer}         by calling         {@link _ClassPathElement_#newPlatformMXBeanProxy          _ClassPathElement_}.          A proxy is typically constructed to remotely access          an MXBean of another running virtual machine.</li>     </ol></li> <li><i>Indirect access via {@link _ClassPathElement_ MBeanServer}         interface</i>     <ol type=\"a\">     <li>Go through the          {@link _ClassPathElement_#getPlatformMBeanServer         platform MBeanServer} to access MXBeans locally or         a specific <tt>MBeanServerConnection</tt> to access         MXBeans remotely.         The attributes and operations of an MXBean use only         <em>JMX open types</em> which include basic data types,          {@link _ClassPathElement_ _ClassElement_},         and {@link _ClassPathElement_ _ClassElement_}          defined in {@link _ClassPathElement_ _ClassElement_}.        </li>     </ol></li> </ul>  Below shows a few <a href=\"#examples\">examples</a> of different ways to access MXBeans.  <h4>_ClassElement_</h4>  The {@link _ClassPathElement_} class is the management factory class for the Java platform.  This class provides a set of  static factory methods to obtain the MXBeans for the Java platform to allow an application to access the MXBeans directly.  <p>A <em>platform MBeanServer</em> can be accessed with the {@link _ClassPathElement_#getPlatformMBeanServer  getPlatformMBeanServer} method.  On the first call to this method, it creates the platform MBeanServer and registers all platform MXBeans  including platform MXBeans defined in other packages such as {@link _ClassPathElement_}.   Each platform MXBean is registered with a unique name defined in the {@link _ClassPathElement_ _ClassElement_} class for constructing {@link _ClassPathElement_ _ClassElement_}.  This is a single MBeanServer that can be shared by different managed  components running within the same Java virtual machine.   <h4>Interoperability</h4>  A management application and a platform MBeanServer of a running virtual machine can interoperate  without requiring classes used by the platform MXBean interfaces. The data types being transmitted between the JMX connector server and the connector client are JMX {@link _ClassPathElement_ open types} and this allows interoperation across versions.  <p>A data type used by the MXBean interfaces are mapped to an open type when being accessed via MBeanServer interface. The data type mapping is specified in the {@link _ClassPathElement_ _ClassElement_} class.  <h4><a name=\"examples\">Ways to Access MXBeans</a></h4>  There are three different ways to access the management interfaces.   <p> <ol> <li>Call the methods in the MXBean directly within the same      Java virtual machine. <blockquote><pre>    RuntimeMXBean mxbean = _ClassPathElement_();     // Get the standard attribute \"_ClassElement_\"    String vendor = _ClassPathElement_();  </pre> </blockquote> </li>  <li>Go through a <tt>MBeanServerConnection</tt> connecting      to the <tt>platform MBeanServer</tt> of a running virtual machine.</li> <blockquote><pre>    MBeanServerConnection mbs;     // Connect to a running JVM (or itself) and get MBeanServerConnection    // that has the JVM MXBeans registered in it    ...     try {        // Assuming the RuntimeMXBean has been registered in mbs        _ClassElement_ oname = new _ClassElement_(_ClassPathElement_);             // Get standard attribute \"_ClassElement_\"        String vendor = (String) _ClassPathElement_(oname, \"_ClassElement_\");    } catch (....) {        // Catch the exceptions thrown by _ClassElement_ constructor        // and _ClassPathElement_ method        ...    }  </pre></blockquote>  <li>Use MXBean proxy.</li> <blockquote><pre>    MBeanServerConnection mbs;     // Connect to a running JVM (or itself) and get MBeanServerConnection    // that has the JVM MBeans registered in it    ...     // Get a MBean proxy for RuntimeMXBean interface    RuntimeMXBean proxy =         _ClassPathElement_(mbs,                                                 _ClassPathElement_,                                                 _ClassPathElement_);    // Get standard attribute \"_ClassElement_\"     String vendor = _ClassPathElement_(); </pre></blockquote> </ol>   <h4><a name=\"extension\">Platform Extension</a></h4>  A Java virtual machine implementation may add its platform extension to the management interface by defining platform-dependent interfaces that extend the standard management interfaces to include platform-specific metrics and management operations.   The static factory methods in the <tt>_ClassElement_</tt> class will return the MBeans with the platform extension.  <p> It is recommended to name the platform-specific attributes with a vendor-specific prefix such as the vendor\'s name to avoid collisions of the attribute name between the future extension to the standard management interface and the platform extension. If the future extension to the standard management interface defines a new attribute for a management interface and the attribute name is happened to be same as some vendor-specific attribute\'s name, the applications accessing that vendor-specific attribute would have to be modified to cope with versioning and compatibility issues.  <p>Below is an example showing how to access a platform-specific attribute from Sun\'s implementation of the <tt>RuntimeMXBean</tt>.  <p> 1) Direct access to the Sun-specific MXBean interface <blockquote><pre>    _ClassPathElement_ mxbean =         (_ClassPathElement_) _ClassPathElement_();     // Get the standard attribute \"_ClassElement_\"    String vendor = _ClassPathElement_();     // Get the platform-specific attribute \"Bar\"    _ClassElement_ bar = _ClassPathElement_();  </pre> </blockquote>  <p> 2) Access the Sun-specific MXBean interface via <tt>MBeanServer</tt>  <blockquote><pre>    MBeanServerConnection mbs;     // Connect to a running JVM (or itself) and get MBeanServerConnection    // that has the JVM MXBeans registered in it    ...     try {        // Assuming the RuntimeMXBean has been registered in mbs        _ClassElement_ oname = new _ClassElement_(_ClassPathElement_);             // Get standard attribute \"_ClassElement_\"        String vendor = (String) _ClassPathElement_(oname, \"_ClassElement_\");         // Check if this MXBean contains Sun\'s extension        if (_ClassPathElement_(oname, \"_ClassPathElement_\")) {            // Get platform-specific attribute \"Bar\"            _ClassElement_ bar = (String) _ClassPathElement_(oname, \"Bar\");        }    } catch (....) {        // Catch the exceptions thrown by _ClassElement_ constructor        // and MBeanServer methods        ...    }  </pre></blockquote>  <p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor or method in any class or interface in this package will cause a {@link _ClassPathElement_ _ClassElement_} to be thrown.  <p> The _ClassPathElement_ API is thread-safe.  @see <a href=\"_OSPathElement_package-_ClassPathElement_\">      JMX Specification.</a>  @author  Mandy Chung @version _ClassPathElement_, _OSPathElement_10 @since   _ClassPathElement_  ',directive
'  Provides the management interface for monitoring and management of the  Java virtual machine as well as the operating system on which the  Java virtual machine is running.  ',non-directive
'It allows both local and remote  monitoring and management of the running Java virtual machine.    ',non-directive
'<h4>Platform MXBeans</h4>  This package defines the management interface of the following components:  <blockquote> <table cellspacing=1 summary=\"Description of the MBeans\"> <tr> <th><p align=\"left\">Management Interface</p></th> <th><p align=\"left\">Description</p></th> </tr> <tr> <td> <tt>{',non-directive
'@link _ClassPathElement_}</tt> </td> <td> Class loading system of the Java virtual machine.</td> </tr> <tr> <td> <tt>{',non-directive
'@link _ClassPathElement_}</tt> </td> <td> Compilation system of the Java virtual machine.</td> </tr> <tr> <td> <tt>{',non-directive
'@link _ClassPathElement_}</tt> </td> <td> Memory system of the Java virtual machine.</td> </tr> <tr> <td> <tt>{',non-directive
'@link _ClassPathElement_}</tt> </td> <td> Threads system of the Java virtual machine.</td> </tr> <tr> <td> <tt>{',directive
'@link _ClassPathElement_}</tt> </td> <td> Runtime system of the Java virtual machine.</td> </tr> <tr> <td> <tt>{',non-directive
'@link _ClassPathElement_}</tt> </td> <td> Operating system on which the Java virtual machine is running.</td> </tr> <tr> <td> <tt>{',non-directive
'@link _ClassPathElement_}</tt> </td> <td> Garbage collector in the Java virtual machine.</td> </tr> <tr> <td> <tt>{',non-directive
'@link _ClassPathElement_}</tt> </td> <td> Memory manager in the Java virtual machine.</td> </tr> <tr> <td> <tt>{',non-directive
'@link _ClassPathElement_}</tt> </td> <td> Memory pool in the Java virtual machine.</td> </tr> </table> </blockquote>  <p> A platform MXBean is a <i>managed bean</i> that defines the management interface for one component for the platform and is specified in the <a href=\"_ClassPathElement_#MXBean\"> _ClassElement_</a> class.  ',non-directive
'<p>An application can monitor the instrumentation of the  Java virtual machine and manage certain characteristics in the following ways: <ul> ',non-directive
'<li><i>Direct access to an MXBean interface</i>     <ol type=\"a\">     ',non-directive
'<li>Get the MXBean instance through the static factory method         and access the MXBean interface locally of the running         virtual machine.</li>     ',non-directive
'<li>Construct an MXBean proxy instance that         forwards the method calls to a given          {',directive
'@link _ClassPathElement_ MBeanServer}         by calling         {',directive
'@link _ClassPathElement_#newPlatformMXBeanProxy          _ClassPathElement_}.          ',non-directive
'A proxy is typically constructed to remotely access          an MXBean of another running virtual machine.</li>     </ol>',non-directive
'</li> ',non-directive
'<li><i>Indirect access via {',non-directive
'@link _ClassPathElement_ MBeanServer}         interface</i>     <ol type=\"a\">     ',non-directive
'<li>Go through the          {',non-directive
'@link _ClassPathElement_#getPlatformMBeanServer         platform MBeanServer} to access MXBeans locally or         a specific <tt>MBeanServerConnection</tt> to access         MXBeans remotely.         ',non-directive
'The attributes and operations of an MXBean use only         <em>JMX open types</em> which include basic data types,          {',directive
'@link _ClassPathElement_ _ClassElement_},         and {',non-directive
'@link _ClassPathElement_ _ClassElement_}          defined in {',non-directive
'@link _ClassPathElement_ _ClassElement_}.        ',non-directive
'</li>     </ol>',non-directive
'</li> </ul>  ',non-directive
'Below shows a few <a href=\"#examples\">examples</a> of different ways to access MXBeans.  ',non-directive
'<h4>_ClassElement_</h4>  The {',non-directive
'@link _ClassPathElement_} class is the management factory class for the Java platform.  ',non-directive
'This class provides a set of  static factory methods to obtain the MXBeans for the Java platform to allow an application to access the MXBeans directly.  ',non-directive
'<p>A <em>platform MBeanServer</em> can be accessed with the {',non-directive
'@link _ClassPathElement_#getPlatformMBeanServer  getPlatformMBeanServer} method.  ',non-directive
'On the first call to this method, it creates the platform MBeanServer and registers all platform MXBeans  including platform MXBeans defined in other packages such as {',directive
'@link _ClassPathElement_}.   ',non-directive
'Each platform MXBean is registered with a unique name defined in the {',non-directive
'@link _ClassPathElement_ _ClassElement_} class for constructing {',non-directive
'@link _ClassPathElement_ _ClassElement_}.  ',non-directive
'This is a single MBeanServer that can be shared by different managed  components running within the same Java virtual machine.   ',non-directive
'<h4>Interoperability</h4>  A management application and a platform MBeanServer of a running virtual machine can interoperate  without requiring classes used by the platform MXBean interfaces. ',non-directive
'The data types being transmitted between the JMX connector server and the connector client are JMX {',directive
'@link _ClassPathElement_ open types} and this allows interoperation across versions.  ',non-directive
'<p>A data type used by the MXBean interfaces are mapped to an open type when being accessed via MBeanServer interface. ',non-directive
'The data type mapping is specified in the {',non-directive
'@link _ClassPathElement_ _ClassElement_} class.  ',non-directive
'<h4><a name=\"examples\">Ways to Access MXBeans</a></h4>  There are three different ways to access the management interfaces.   ',non-directive
'<p> <ol> ',non-directive
'<li>Call the methods in the MXBean directly within the same      Java virtual machine. ',directive
'<blockquote><pre>    RuntimeMXBean mxbean = _ClassPathElement_();     // Get the standard attribute \"_ClassElement_\"    String vendor = _ClassPathElement_();  </pre> </blockquote> </li>  ',non-directive
'<li>Go through a <tt>MBeanServerConnection</tt> connecting      to the <tt>platform MBeanServer</tt> of a running virtual machine.</li> <blockquote><pre>    MBeanServerConnection mbs;     // Connect to a running JVM (or itself) and get MBeanServerConnection    // that has the JVM MXBeans registered in it    ...     ',non-directive
'try {        // Assuming the RuntimeMXBean has been registered in mbs        _ClassElement_ oname = new _ClassElement_(_ClassPathElement_);             // Get standard attribute \"_ClassElement_\"        String vendor = (String) _ClassPathElement_(oname, \"_ClassElement_\");    } catch (....) {        // Catch the exceptions thrown by _ClassElement_ constructor        // and _ClassPathElement_ method        ...    ',directive
'}  </pre></blockquote>  ',non-directive
'<li>Use MXBean proxy.</li> <blockquote><pre>    MBeanServerConnection mbs;     // Connect to a running JVM (or itself) and get MBeanServerConnection    // that has the JVM MBeans registered in it    ...     ',non-directive
'// Get a MBean proxy for RuntimeMXBean interface    RuntimeMXBean proxy =         _ClassPathElement_(mbs,                                                 _ClassPathElement_,                                                 _ClassPathElement_);    // Get standard attribute \"_ClassElement_\"     String vendor = _ClassPathElement_(); </pre></blockquote> </ol>   ',non-directive
'<h4><a name=\"extension\">Platform Extension</a></h4>  A Java virtual machine implementation may add its platform extension to the management interface by defining platform-dependent interfaces that extend the standard management interfaces to include platform-specific metrics and management operations.   ',directive
'The static factory methods in the <tt>_ClassElement_</tt> class will return the MBeans with the platform extension.  ',non-directive
'<p> It is recommended to name the platform-specific attributes with a vendor-specific prefix such as the vendor\'s name to avoid collisions of the attribute name between the future extension to the standard management interface and the platform extension. ',directive
'If the future extension to the standard management interface defines a new attribute for a management interface and the attribute name is happened to be same as some vendor-specific attribute\'s name, the applications accessing that vendor-specific attribute would have to be modified to cope with versioning and compatibility issues.  ',non-directive
'<p>Below is an example showing how to access a platform-specific attribute from Sun\'s implementation of the <tt>RuntimeMXBean</tt>.  ',non-directive
'<p> 1) Direct access to the Sun-specific MXBean interface <blockquote><pre>    _ClassPathElement_ mxbean =         (_ClassPathElement_) _ClassPathElement_();     // Get the standard attribute \"_ClassElement_\"    String vendor = _ClassPathElement_();     // Get the platform-specific attribute \"Bar\"    _ClassElement_ bar = _ClassPathElement_();  </pre> </blockquote>  <p> 2) Access the Sun-specific MXBean interface via <tt>MBeanServer</tt>  <blockquote><pre>    MBeanServerConnection mbs;     // Connect to a running JVM (or itself) and get MBeanServerConnection    // that has the JVM MXBeans registered in it    ...     ',non-directive
'try {        // Assuming the RuntimeMXBean has been registered in mbs        _ClassElement_ oname = new _ClassElement_(_ClassPathElement_);             // Get standard attribute \"_ClassElement_\"        String vendor = (String) _ClassPathElement_(oname, \"_ClassElement_\");         // Check if this MXBean contains Sun\'s extension        if (_ClassPathElement_(oname, \"_ClassPathElement_\")) {            // Get platform-specific attribute \"Bar\"            _ClassElement_ bar = (String) _ClassPathElement_(oname, \"Bar\");        }    } catch (....) {        // Catch the exceptions thrown by _ClassElement_ constructor        // and MBeanServer methods        ...    ',directive
'}  </pre></blockquote>  <p> Unless otherwise noted, passing a <tt>null</tt> argument to a constructor or method in any class or interface in this package will cause a {',directive
'@link _ClassPathElement_ _ClassElement_} to be thrown.  ',non-directive
'<p> The _ClassPathElement_ API is thread-safe.  ',directive
'@see <a href=\"_OSPathElement_package-_ClassPathElement_\">      JMX Specification.</a>  ',non-directive
'@author  Mandy Chung ',non-directive
'@version _ClassPathElement_, _OSPathElement_10 ',non-directive
'@since   _ClassPathElement_  ',non-directive
'  Provides classes and interfaces for handling text, dates, numbers, and messages in a manner independent of natural languages.  This means your main application or applet can be written to be language-independent, and it can rely upon separate, dynamically-linked localized resources. This allows the flexibility of adding localizations for new localizations at any time. <p> These classes are capable of formatting dates, numbers, and messages, parsing; searching and sorting strings; and iterating over characters, words, sentences, and line breaks.  This package contains three main groups of classes and interfaces: <ul> <li>Classes for iteration over text <li>Classes for formatting and parsing <li>Classes for string collation </ul> <!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   <li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',non-directive
'  Provides classes and interfaces for handling text, dates, numbers, and messages in a manner independent of natural languages.  ',non-directive
'This means your main application or applet can be written to be language-independent, and it can rely upon separate, dynamically-linked localized resources. ',non-directive
'This allows the flexibility of adding localizations for new localizations at any time. ',non-directive
'<p> These classes are capable of formatting dates, numbers, and messages, parsing; searching and sorting strings; and iterating over characters, words, sentences, and line breaks.  ',non-directive
'This package contains three main groups of classes and interfaces: <ul> ',non-directive
'<li>Classes for iteration over text ',non-directive
'<li>Classes for formatting and parsing ',non-directive
'<li>Classes for string collation </ul> ',non-directive
'<!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Service provider classes for the classes in the _ClassPathElement_ package. <!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   <li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',non-directive
' Service provider classes for the classes in the _ClassPathElement_ package. ',non-directive
'<!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides the API for accessing and processing data stored in a  data source (usually a relational database) using the  Java<sup><font size=-2>TM</font></sup> programming language.  This API includes a framework whereby different drivers can be installed dynamically to access different data sources. Although the JDBC<sup><font size=-2>TM</font></sup> API is mainly geared  to passing SQL statements to a database, it provides for reading and writing data from any data source with a tabular format. The _OSPathElement_writer facility, available through the  <code>_ClassPathElement_</code> group of interfaces, can be customized to use and update data from a spread sheet, flat file, or any other tabular  data source. <P> <h2>What the JDBC<sup><font size=-2>TM</font></sup> _ClassPathElement_ API Includes</h2> The JDBC<sup><font size=-2>TM</font></sup> _ClassPathElement_ API includes both the <code>_ClassPathElement_</code> package, referred to as the JDBC core API, and the <code>_ClassPathElement_</code> package, referred to as the JDBC Optional Package API. This complete JDBC API is included in the Java<sup><font size=-2>TM</font></sup>   Standard Edition (Java SE<sup><font size=-2>TM</font></sup>), version 6.   The <code>_ClassPathElement_</code> package extends the functionality of the JDBC API  from a client-side API to a server-side API, and it is an essential part of the Java<sup><font size=-2>TM</font></sup>  Enterprise Edition (Java EE<sup><font size=-2>TM</font></sup>) technology.  <P> <h2>Versions</h2> The JDBC _ClassPathElement_ API incorporates all of the previous JDBC API versions: <UL>  <LI> The JDBC _ClassPathElement_ API  <LI> The JDBC _ClassPathElement_ core API  <LI> The JDBC _ClassPathElement_ Optional Package API<br>       (Note that the JDBC _ClassPathElement_ core API and the JDBC _ClassPathElement_ Optional Package       API together are referred to as the JDBC _ClassPathElement_ API.)  <LI> The JDBC _ClassPathElement_ API  <LI> The JDBC _ClassPathElement_ API </UL> <P> Classes, interfaces, methods, fields, constructors, and exceptions  have the following \"since\" tags that indicate when they were introduced  into the Java platform. When these \"since\" tags are used in Javadoc<sup><font size=-2>TM</font></sup> comments for the JDBC API, they indicate the following: <UL>  <LI>Since _ClassPathElement_ -- new in the JDBC _ClassPathElement_ API and part of the Java SE platform,       version 6  <LI>Since _ClassPathElement_ -- new in the JDBC _ClassPathElement_ API and part of the J2SE platform,       version _ClassPathElement_  <LI>Since _ClassPathElement_ -- new in the JDBC _ClassPathElement_ API and part of the J2SE platform,       version _ClassPathElement_  <LI>Since _ClassPathElement_ or no \"since\" tag -- in the original JDBC _ClassPathElement_ API and part of       the JDK<sup><font size=-2>TM</font></sup>, version _ClassPathElement_ </UL> <P> <b>NOTE:</b> Many of the new features are optional; consequently, there is  some variation in drivers and the features they support. Always  check your driver\'s documentation to see whether it supports a feature before you try to use it. <P> <b>NOTE:</b> The class <code>SQLPermission</code> was added in the Java<sup><font size=-2>TM</font></sup> 2 SDK, Standard Edition,  version _ClassPathElement_ release. This class is used to prevent unauthorized access to the logging stream associated with the <code>_ClassElement_</code>, which may contain information such as table names, column data, and so on. <p>  <h2>What the <code>_ClassPathElement_</code> Package Contains</h2> The <code>_ClassPathElement_</code> package contains API for the following: <UL>   <LI>Making a connection with a database via the <code>_ClassElement_</code> facility   <UL>   <LI><code>_ClassElement_</code> class -- makes a connection with a driver   <LI><code>SQLPermission</code> class -- provides permission when code                   running within a Security Manager, such as an applet,                   attempts to set up a logging stream through the                   <code>_ClassElement_</code>   <LI><code>Driver</code> interface -- provides the API for registering              and connecting drivers based on JDBC technology (\"JDBC drivers\");               generally used only by the <code>_ClassElement_</code> class   <LI><code>_ClassElement_</code> class -- provides properties for a              JDBC driver; not used by the general user   </UL>   <LI>Sending SQL statements to a database   <UL>   <LI><code>Statement</code> --  used to send basic SQL statements   <LI><code>_ClassElement_</code> --  used to send prepared statements or                basic SQL statements (derived from <code>Statement</code>)   <LI><code>_ClassElement_</code> --  used to call database stored                procedures (derived from <code>_ClassElement_</code>)   <LI><code>Connection</code> interface --  provides methods for creating              statements and managing connections and their properties   <LI><code>Savepoint</code> --  provides savepoints in a transaction    </UL>   <LI>Retrieving and updating the results of a query   <UL>   <LI><code>_ClassElement_</code> interface   </UL>   <LI>Standard mappings for SQL types to classes and interfaces in the        Java programming language   <UL>   <LI><code>Array</code> interface -- mapping for SQL <code>ARRAY</code>    <LI><code>Blob</code> interface -- mapping for SQL <code>BLOB</code>    <LI><code>Clob</code> interface -- mapping for SQL <code>CLOB</code>   <LI><code>Date</code> class -- mapping for SQL <code>DATE</code>     <LI><code>NClob</code> interface -- mapping for SQL <code>NCLOB</code>   <LI><code>Ref</code> interface -- mapping for SQL <code>REF</code>     <LI><code>_ClassElement_</code> interface -- mapping for SQL <code>ROWID</code>   <LI><code>Struct</code> interface -- mapping for SQL <code>STRUCT</code>     <LI><code>SQLXML</code> interface -- mapping for SQL <code>XML</code>   <LI><code>Time</code> class -- mapping for SQL <code>TIME</code>    <LI><code>Timestamp</code> class -- mapping for SQL <code>TIMESTAMP</code>    <LI><code>Types</code> class -- provides constants for SQL types   </UL>   <LI>Custom mapping an SQL user-defined type (UDT) to a class in the    Java programming language   <UL>   <LI><code>SQLData</code> interface -- specifies the mapping of               a UDT to an instance of this class   <LI><code>SQLInput</code> interface -- provides methods for reading               UDT attributes from a stream   <LI><code>SQLOutput</code> interface -- provides methods for writing               UDT attributes back to a stream   </UL>   <LI>Metadata   <UL>   <LI><code>_ClassElement_</code> interface -- provides information               about the database   <LI><code>_ClassElement_</code> interface -- provides information               about the columns of a <code>_ClassElement_</code> object   <LI><code>_ClassElement_</code> interface -- provides information               about the parameters to <code>_ClassElement_</code> commands   </UL>   <LI>Exceptions  <UL>    <LI><code>SQLException</code> -- thrown by most methods when there    is a problem accessing data and by some methods for other reasons    <LI><code>SQLWarning</code> -- thrown to indicate a warning    <LI><code>_ClassElement_</code> -- thrown to indicate that data may have         been truncated    <LI><code>_ClassElement_</code> -- thrown to indicate that not all    commands in a batch update executed successfully  </UL> </UL> <P> <h3><code>_ClassPathElement_</code> and <code>_ClassPathElement_</code> Features Introduced in the JDBC _ClassPathElement_ API</h3> <UL>   <LI>auto _ClassPathElement_ discovery -- no longer need to load a  <code>_ClassPathElement_</code> class via <code>_ClassPathElement_</code>  <LI>National Character Set support added  <li>Support added for the SQL:2003 XML data type  <lI>SQLException enhancements -- Added support for cause chaining; New SQLExceptions  added for common SQLState class value codes  <li>Enhanced _OSPathElement_Clob functionality -- Support provided to create and free a _OSPathElement_Clob instance  as well as additional methods added to improve accessiblity  <li>Support added for accessing a SQL ROWID  <li>Support added to allow a JDBC application to access an instance of a JDBC resource  that has been wrapped by a vendor, usually in an application server or connection   pooling environment.  <li>Availability to be notfied when a <code>_ClassElement_</code> that is associated  with a <code>_ClassElement_</code> has been closed or the driver determines is invalid     </UL> <P> <P> <h3><code>_ClassPathElement_</code> and <code>_ClassPathElement_</code> Features Introduced in the JDBC _ClassPathElement_ API</h3> <UL>   <LI>Pooled statements -- reuse of statements associated with a pooled         connection   <LI>Savepoints -- allow a transaction to be rolled back to a designated       savepoint   <LI>Properties defined for <code>_ClassElement_</code> -- specify       how connections are to be pooled   <LI>Metadata for parameters of a <code>_ClassElement_</code> object   <LI>Ability to retrieve values from automatically generated columns   <LI>Ability to have multiple <code>_ClassElement_</code> objects         returned from <code>_ClassElement_</code> objects open at the       same time   <LI>Ability to identify parameters to <code>_ClassElement_</code>       objects by name as well as by index   <LI><code>_ClassElement_</code> holdability -- ability to specify whether cursors       should be held open or closed at the end of a transaction   <LI>Ability to retrieve and update the SQL structured type instance that a       <code>Ref</code> object references   <LI>Ability to programmatically update <code>BLOB</code>,       <code>CLOB</code>, <code>ARRAY</code>, and <code>REF</code> values.   <LI>Addition of the <code>_ClassPathElement_</code> data type --        allows JDBC drivers access to objects stored outside a data source   <LI>Addition of metadata for retrieving SQL type hierarchies </UL> <P> <h3><code>_ClassPathElement_</code> Features Introduced in the JDBC _ClassPathElement_ Core API</h3> <UL>   <LI>Scrollable result sets--using new methods in the <code>_ClassElement_</code>    interface that allow the cursor to be moved to a particular row or to a    position relative to its current position   <LI>Batch updates   <LI>Programmatic updates--using <code>_ClassElement_</code> updater methods   <LI>New data types--interfaces mapping the SQL3 data types   <LI>Custom mapping of user-defined types (UDTs)   <LI>Miscellaneous features, including performance hints, the use of character    streams, full precision for <code>_ClassPathElement_</code> values,    additional security, and    support for time zones in date, time, and timestamp values.  </UL> <P> <h3><code>_ClassPathElement_</code> Features Introduced in the JDBC _ClassPathElement_ Optional Package API</h3> <UL>   <LI>The <code>_ClassElement_</code> interface as a means of making a connection.  The       Java Naming and Directory Interface<sup><font size=-2>TM</font></sup>       (JNDI) is used for registering a <code>_ClassElement_</code> object with a        naming service and also for  retrieving it.   <LI>Pooled connections -- allowing connections to be used and reused   <LI>Distributed transactions -- allowing a transaction to span diverse       DBMS servers   <LI><code>_ClassElement_</code> technology -- providing a convenient means of        handling and passing data </UL> <P> <P> <h3>Custom Mapping of UDTs</h3> A user-defined type (UDT) defined in SQL can be mapped to a class in the Java programming language. An SQL structured type or an SQL <code>DISTINCT</code> type are the UDTs that may be custom mapped.  The following three steps set up a custom mapping: <ol>   <li>Defining the SQL structured type or <code>DISTINCT</code> type in SQL   <li>Defining the class in the Java programming language to which the    SQL UDT will be mapped.  This class must implement the    <code>SQLData</code> interface.   <li>Making an entry in a <code>Connection</code> object\'s type map       that contains two things:    <ul>        <li>the fully-qualified SQL name of the UDT        <li>the <code>Class</code> object for the class that implements the             <code>SQLData</code> interface    </ul> </ol> <p> When these are in place for a UDT, calling the methods <code>_ClassPathElement_</code> or <code>_ClassPathElement_</code>  on that UDT will automatically retrieve the custom mapping for it. Also, the <code>_ClassPathElement_</code> method will automatically map the object back to its SQL type to store it in the data source.  <h2>Package Specification</h2>  <ul>   <li><a href=\"_OSPathElement_/_ClassPathElement_\">Specification        of the JDBC _ClassPathElement_ API</a> </ul>  <h2>Related Documentation</h2>  <ul>   <li><a href=\"_ClassPathElement_\">Getting Started</a>--overviews of the major interfaces <P>   <li><a href=\"_OSPathElement_/_OSPathElement_jdbc\">Chapters on the JDBC       API</a>--from the online version of <i>The Java Tutorial Continued</i> <P>   <li><a href=\"_OSPathElement_/_OSPathElement_jdbc\"> <i>JDBC<sup><font size=-2>TM</font></sup>API Tutorial and Reference,  Third Edition</i></a>-- a complete reference and tutorial for the JDBC _ClassPathElement_ API </ul> <P> @since _ClassPathElement_ ',directive
'  Provides the API for accessing and processing data stored in a  data source (usually a relational database) using the  Java<sup><font size=-2>TM</font></sup> programming language.  ',non-directive
'This API includes a framework whereby different drivers can be installed dynamically to access different data sources. ',non-directive
'Although the JDBC<sup><font size=-2>TM</font></sup> API is mainly geared  to passing SQL statements to a database, it provides for reading and writing data from any data source with a tabular format. ',non-directive
'The _OSPathElement_writer facility, available through the  <code>_ClassPathElement_</code> group of interfaces, can be customized to use and update data from a spread sheet, flat file, or any other tabular  data source. ',non-directive
'<P> <h2>What the JDBC<sup><font size=-2>TM</font></sup> _ClassPathElement_ API Includes</h2> The JDBC<sup><font size=-2>TM</font></sup> _ClassPathElement_ API includes both the <code>_ClassPathElement_</code> package, referred to as the JDBC core API, and the <code>_ClassPathElement_</code> package, referred to as the JDBC Optional Package API. ',non-directive
'This complete JDBC API is included in the Java<sup><font size=-2>TM</font></sup>   Standard Edition (Java SE<sup><font size=-2>TM</font></sup>), version 6.   ',non-directive
'The <code>_ClassPathElement_</code> package extends the functionality of the JDBC API  from a client-side API to a server-side API, and it is an essential part of the Java<sup><font size=-2>TM</font></sup>  Enterprise Edition (Java EE<sup><font size=-2>TM</font></sup>) technology.  ',directive
'<P> <h2>Versions</h2> The JDBC _ClassPathElement_ API incorporates all of the previous JDBC API versions: <UL>  ',non-directive
'<LI> The JDBC _ClassPathElement_ API  ',non-directive
'<LI> The JDBC _ClassPathElement_ core API  ',non-directive
'<LI> The JDBC _ClassPathElement_ Optional Package API<br>       (Note that the JDBC _ClassPathElement_ core API and the JDBC _ClassPathElement_ Optional Package       API together are referred to as the JDBC _ClassPathElement_ API.)  ',directive
'<LI> The JDBC _ClassPathElement_ API  ',non-directive
'<LI> The JDBC _ClassPathElement_ API </UL> ',non-directive
'<P> Classes, interfaces, methods, fields, constructors, and exceptions  have the following \"since\" tags that indicate when they were introduced  into the Java platform. ',non-directive
'When these \"since\" tags are used in Javadoc<sup><font size=-2>TM</font></sup> comments for the JDBC API, they indicate the following: <UL>  ',non-directive
'<LI>Since _ClassPathElement_ -- new in the JDBC _ClassPathElement_ API and part of the Java SE platform,       version 6  ',non-directive
'<LI>Since _ClassPathElement_ -- new in the JDBC _ClassPathElement_ API and part of the J2SE platform,       version _ClassPathElement_  ',non-directive
'<LI>Since _ClassPathElement_ -- new in the JDBC _ClassPathElement_ API and part of the J2SE platform,       version _ClassPathElement_  ',non-directive
'<LI>Since _ClassPathElement_ or no \"since\" tag -- in the original JDBC _ClassPathElement_ API and part of       the JDK<sup><font size=-2>TM</font></sup>, version _ClassPathElement_ </UL> ',non-directive
'<P> <b>NOTE:</b> Many of the new features are optional; consequently, there is  some variation in drivers and the features they support. ',directive
'Always  check your driver\'s documentation to see whether it supports a feature before you try to use it. ',directive
'<P> <b>NOTE:</b> The class <code>SQLPermission</code> was added in the Java<sup><font size=-2>TM</font></sup> 2 SDK, Standard Edition,  version _ClassPathElement_ release. ',directive
'This class is used to prevent unauthorized access to the logging stream associated with the <code>_ClassElement_</code>, which may contain information such as table names, column data, and so on. ',directive
'<p>  <h2>What the <code>_ClassPathElement_</code> Package Contains</h2> The <code>_ClassPathElement_</code> package contains API for the following: <UL>   ',non-directive
'<LI>Making a connection with a database via the <code>_ClassElement_</code> facility   <UL>   ',non-directive
'<LI><code>_ClassElement_</code> class -- makes a connection with a driver   ',non-directive
'<LI><code>SQLPermission</code> class -- provides permission when code                   running within a Security Manager, such as an applet,                   attempts to set up a logging stream through the                   <code>_ClassElement_</code>   ',non-directive
'<LI><code>Driver</code> interface -- provides the API for registering              and connecting drivers based on JDBC technology (\"JDBC drivers\");               generally used only by the <code>_ClassElement_</code> class   ',directive
'<LI><code>_ClassElement_</code> class -- provides properties for a              JDBC driver; not used by the general user   </UL>   ',non-directive
'<LI>Sending SQL statements to a database   <UL>   ',non-directive
'<LI><code>Statement</code> --  used to send basic SQL statements   ',non-directive
'<LI><code>_ClassElement_</code> --  used to send prepared statements or                basic SQL statements (derived from <code>Statement</code>)   ',non-directive
'<LI><code>_ClassElement_</code> --  used to call database stored                procedures (derived from <code>_ClassElement_</code>)   ',directive
'<LI><code>Connection</code> interface --  provides methods for creating              statements and managing connections and their properties   ',non-directive
'<LI><code>Savepoint</code> --  provides savepoints in a transaction    </UL>   ',non-directive
'<LI>Retrieving and updating the results of a query   <UL>   ',non-directive
'<LI><code>_ClassElement_</code> interface   </UL>   ',non-directive
'<LI>Standard mappings for SQL types to classes and interfaces in the        Java programming language   <UL>   ',non-directive
'<LI><code>Array</code> interface -- mapping for SQL <code>ARRAY</code>    ',non-directive
'<LI><code>Blob</code> interface -- mapping for SQL <code>BLOB</code>    ',non-directive
'<LI><code>Clob</code> interface -- mapping for SQL <code>CLOB</code>   ',non-directive
'<LI><code>Date</code> class -- mapping for SQL <code>DATE</code>     ',non-directive
'<LI><code>NClob</code> interface -- mapping for SQL <code>NCLOB</code>   ',non-directive
'<LI><code>Ref</code> interface -- mapping for SQL <code>REF</code>     ',non-directive
'<LI><code>_ClassElement_</code> interface -- mapping for SQL <code>ROWID</code>   ',non-directive
'<LI><code>Struct</code> interface -- mapping for SQL <code>STRUCT</code>     ',non-directive
'<LI><code>SQLXML</code> interface -- mapping for SQL <code>XML</code>   ',non-directive
'<LI><code>Time</code> class -- mapping for SQL <code>TIME</code>    ',non-directive
'<LI><code>Timestamp</code> class -- mapping for SQL <code>TIMESTAMP</code>    ',non-directive
'<LI><code>Types</code> class -- provides constants for SQL types   </UL>   ',non-directive
'<LI>Custom mapping an SQL user-defined type (UDT) to a class in the    Java programming language   <UL>   ',non-directive
'<LI><code>SQLData</code> interface -- specifies the mapping of               a UDT to an instance of this class   ',non-directive
'<LI><code>SQLInput</code> interface -- provides methods for reading               UDT attributes from a stream   ',non-directive
'<LI><code>SQLOutput</code> interface -- provides methods for writing               UDT attributes back to a stream   </UL>   ',non-directive
'<LI>Metadata   <UL>   ',non-directive
'<LI><code>_ClassElement_</code> interface -- provides information               about the database   ',non-directive
'<LI><code>_ClassElement_</code> interface -- provides information               about the columns of a <code>_ClassElement_</code> object   ',non-directive
'<LI><code>_ClassElement_</code> interface -- provides information               about the parameters to <code>_ClassElement_</code> commands   </UL>   ',non-directive
'<LI>Exceptions  <UL>    ',non-directive
'<LI><code>SQLException</code> -- thrown by most methods when there    is a problem accessing data and by some methods for other reasons    ',non-directive
'<LI><code>SQLWarning</code> -- thrown to indicate a warning    ',directive
'<LI><code>_ClassElement_</code> -- thrown to indicate that data may have         been truncated    ',directive
'<LI><code>_ClassElement_</code> -- thrown to indicate that not all    commands in a batch update executed successfully  </UL> ',non-directive
'</UL> ',non-directive
'<P> <h3><code>_ClassPathElement_</code> and <code>_ClassPathElement_</code> Features Introduced in the JDBC _ClassPathElement_ API</h3> <UL>   ',non-directive
'<LI>auto _ClassPathElement_ discovery -- no longer need to load a  <code>_ClassPathElement_</code> class via <code>_ClassPathElement_</code>  ',non-directive
'<LI>National Character Set support added  ',non-directive
'<li>Support added for the SQL:2003 XML data type  ',non-directive
'<lI>SQLException enhancements -- Added support for cause chaining; New SQLExceptions  added for common SQLState class value codes  ',non-directive
'<li>Enhanced _OSPathElement_Clob functionality -- Support provided to create and free a _OSPathElement_Clob instance  as well as additional methods added to improve accessiblity  ',directive
'<li>Support added for accessing a SQL ROWID  ',non-directive
'<li>Support added to allow a JDBC application to access an instance of a JDBC resource  that has been wrapped by a vendor, usually in an application server or connection   pooling environment.  ',non-directive
'<li>Availability to be notfied when a <code>_ClassElement_</code> that is associated  with a <code>_ClassElement_</code> has been closed or the driver determines is invalid     </UL> ',non-directive
'<P> <P> <h3><code>_ClassPathElement_</code> and <code>_ClassPathElement_</code> Features Introduced in the JDBC _ClassPathElement_ API</h3> <UL>   ',non-directive
'<LI>Pooled statements -- reuse of statements associated with a pooled         connection   ',non-directive
'<LI>Savepoints -- allow a transaction to be rolled back to a designated       savepoint   ',non-directive
'<LI>Properties defined for <code>_ClassElement_</code> -- specify       how connections are to be pooled   ',non-directive
'<LI>Metadata for parameters of a <code>_ClassElement_</code> object   ',non-directive
'<LI>Ability to retrieve values from automatically generated columns   ',non-directive
'<LI>Ability to have multiple <code>_ClassElement_</code> objects         returned from <code>_ClassElement_</code> objects open at the       same time   ',directive
'<LI>Ability to identify parameters to <code>_ClassElement_</code>       objects by name as well as by index   ',directive
'<LI><code>_ClassElement_</code> holdability -- ability to specify whether cursors       should be held open or closed at the end of a transaction   ',directive
'<LI>Ability to retrieve and update the SQL structured type instance that a       <code>Ref</code> object references   ',non-directive
'<LI>Ability to programmatically update <code>BLOB</code>,       <code>CLOB</code>, <code>ARRAY</code>, and <code>REF</code> values.   ',non-directive
'<LI>Addition of the <code>_ClassPathElement_</code> data type --        allows JDBC drivers access to objects stored outside a data source   ',directive
'<LI>Addition of metadata for retrieving SQL type hierarchies </UL> ',directive
'<P> <h3><code>_ClassPathElement_</code> Features Introduced in the JDBC _ClassPathElement_ Core API</h3> <UL>   ',non-directive
'<LI>Scrollable result sets--using new methods in the <code>_ClassElement_</code>    interface that allow the cursor to be moved to a particular row or to a    position relative to its current position   ',non-directive
'<LI>Batch updates   ',non-directive
'<LI>Programmatic updates--using <code>_ClassElement_</code> updater methods   ',non-directive
'<LI>New data types--interfaces mapping the SQL3 data types   ',non-directive
'<LI>Custom mapping of user-defined types (UDTs)   ',non-directive
'<LI>Miscellaneous features, including performance hints, the use of character    streams, full precision for <code>_ClassPathElement_</code> values,    additional security, and    support for time zones in date, time, and timestamp values.  ',directive
'</UL> ',non-directive
'<P> <h3><code>_ClassPathElement_</code> Features Introduced in the JDBC _ClassPathElement_ Optional Package API</h3> <UL>   ',non-directive
'<LI>The <code>_ClassElement_</code> interface as a means of making a connection.  ',non-directive
'The       Java Naming and Directory Interface<sup><font size=-2>TM</font></sup>       (JNDI) is used for registering a <code>_ClassElement_</code> object with a        naming service and also for  retrieving it.   ',non-directive
'<LI>Pooled connections -- allowing connections to be used and reused   ',non-directive
'<LI>Distributed transactions -- allowing a transaction to span diverse       DBMS servers   ',non-directive
'<LI><code>_ClassElement_</code> technology -- providing a convenient means of        handling and passing data </UL> ',non-directive
'<P> <P> <h3>Custom Mapping of UDTs</h3> A user-defined type (UDT) defined in SQL can be mapped to a class in the Java programming language. ',non-directive
'An SQL structured type or an SQL <code>DISTINCT</code> type are the UDTs that may be custom mapped.  ',directive
'The following three steps set up a custom mapping: <ol>   ',non-directive
'<li>Defining the SQL structured type or <code>DISTINCT</code> type in SQL   ',non-directive
'<li>Defining the class in the Java programming language to which the    SQL UDT will be mapped.  ',non-directive
'This class must implement the    <code>SQLData</code> interface.   ',directive
'<li>Making an entry in a <code>Connection</code> object\'s type map       that contains two things:    <ul>        ',non-directive
'<li>the fully-qualified SQL name of the UDT        ',non-directive
'<li>the <code>Class</code> object for the class that implements the             <code>SQLData</code> interface    </ul> ',non-directive
'</ol> ',non-directive
'<p> When these are in place for a UDT, calling the methods <code>_ClassPathElement_</code> or <code>_ClassPathElement_</code>  on that UDT will automatically retrieve the custom mapping for it. ',directive
'Also, the <code>_ClassPathElement_</code> method will automatically map the object back to its SQL type to store it in the data source.  ',non-directive
'<h2>Package Specification</h2>  <ul>   ',non-directive
'<li><a href=\"_OSPathElement_/_ClassPathElement_\">Specification        of the JDBC _ClassPathElement_ API</a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  <ul>   ',non-directive
'<li><a href=\"_ClassPathElement_\">Getting Started</a>--overviews of the major interfaces <P>   ',non-directive
'<li><a href=\"_OSPathElement_/_OSPathElement_jdbc\">Chapters on the JDBC       API</a>--from the online version of <i>The Java Tutorial Continued</i> <P>   ',non-directive
'<li><a href=\"_OSPathElement_/_OSPathElement_jdbc\"> <i>JDBC<sup><font size=-2>TM</font></sup>API Tutorial and Reference,  Third Edition</i></a>-- a complete reference and tutorial for the JDBC _ClassPathElement_ API </ul> ',non-directive
'<P> ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides the classes necessary to create an applet and the classes an applet uses to communicate with its applet context. <p> The applet framework involves two entities: the <i>applet</i> and the <i>applet context</i>. An applet is an  embeddable window (see the Panel class) with a few extra methods that the applet  context can use to initialize, start, and stop the applet. <p> The applet context is an application that is responsible for loading and running applets. For example, the applet context could be a Web browser or an applet development environment. <p> <!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   <li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',directive
'  Provides the classes necessary to create an applet and the classes an applet uses to communicate with its applet context. ',directive
'<p> The applet framework involves two entities: the <i>applet</i> and the <i>applet context</i>. ',directive
'An applet is an  embeddable window (see the Panel class) with a few extra methods that the applet  context can use to initialize, start, and stop the applet. ',non-directive
'<p> The applet context is an application that is responsible for loading and running applets. ',non-directive
'For example, the applet context could be a Web browser or an applet development environment. ',non-directive
'<p> <!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Contains the collections framework, legacy collection classes, event model, date and time facilities, internationalization, and miscellaneous utility classes (a string tokenizer, a random-number generator, and a bit array).  <h2>Package Specification</h2> <ul>   <li><a href=\"_ClassPathElement_\"><b>Collections Framework Overview</b></a>   <li><a href=\"_ClassPathElement_\"><b>        Collections Framework Annotated Outline</b></a> </ul>  <h2>Related Documentation</h2> For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>     <li><a href=\"_OSPathElement_/_OSPathElement_\">        <b>Collections Framework Tutorial</b></a>     <li><a     href=\"_ClassPathElement_\"><b>Collections     Framework Design FAQ</b></a> </ul>  @since _ClassPathElement_ ',non-directive
'  Contains the collections framework, legacy collection classes, event model, date and time facilities, internationalization, and miscellaneous utility classes (a string tokenizer, a random-number generator, and a bit array).  ',non-directive
'<h2>Package Specification</h2> <ul>   ',non-directive
'<li><a href=\"_ClassPathElement_\"><b>Collections Framework Overview</b></a>   ',non-directive
'<li><a href=\"_ClassPathElement_\"><b>        Collections Framework Annotated Outline</b></a> </ul>  ',non-directive
'<h2>Related Documentation</h2> For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>     ',non-directive
'<li><a href=\"_OSPathElement_/_OSPathElement_\">        <b>Collections Framework Tutorial</b></a>     ',non-directive
'<li><a     href=\"_ClassPathElement_\"><b>Collections     Framework Design FAQ</b></a> </ul>  ',non-directive
'@since _ClassPathElement_ ',non-directive
' <P> Provides the classes and interfaces of  the Java<SUP><FONT SIZE=\"-2\">TM</FONT></SUP> 2  platform\'s core logging facilities. The central goal of the logging APIs is to support maintaining and servicing software at customer sites.   <P> There are four main target uses of the logs: </P>  <OL>    <LI> <I>Problem diagnosis by end users and system administrators</I>.            This consists of simple logging of common problems that can be fixed            or tracked locally, such as running out of resources, security failures,           and simple configuration errors.             <LI> <I>Problem diagnosis by field service engineers</I>. The logging information            used by field service engineers may be considerably more complex and            verbose than that required by system administrators.  Typically such information            will require extra logging within particular subsystems.     <LI> <I>Problem diagnosis by the development organization</I>.          When a problem occurs in the field, it may be necessary to return the captured logging          information to the original development team for diagnosis. This logging          information may be extremely detailed and fairly inscrutable. Such information might include          detailed tracing on the internal execution of particular subsystems.                <LI> <I>Problem diagnosis by developers</I>. The Logging APIs may also be            used to help debug an application under development. This may             include logging information generated by the target application            as well as logging information generated by lower-level libraries.                      Note however that while this use is perfectly reasonable,            the logging APIs are not intended to replace the normal debugging             and profiling tools that may already exist in the development environment.  </OL>  </P> The key elements of this package include: <UL>    <LI> <I>Logger</I>: The main entity on which applications make                  logging calls. A Logger object is used to log messages                  for a specific system or application                 component.    <LI> <I>_ClassElement_</I>: Used to pass logging requests between the logging                    framework and individual log handlers.    <LI> <I>Handler</I>: Exports _ClassElement_ objects to a variety of destinations                  including memory, output streams, consoles, files, and sockets.                  A variety of Handler subclasses exist for this purpose. Additional Handlers                  may be developed by third parties and delivered on top of the core platform.    <LI> <I>Level</I>: Defines a set of standard logging levels that can be used                       to control logging output. Programs can be configured to output logging                       for some levels while ignoring output for others.    <LI> <I>Filter</I>: Provides fine-grained control over what gets logged,                        beyond the control provided by log levels. The logging APIs support a general-purpose                        filter mechanism that allows application code to attach arbitrary filters to                         control logging output.                             <LI> <I>Formatter</I>: Provides support for formatting _ClassElement_ objects. This                            package includes two formatters, _ClassElement_ and                            XMLFormatter, for formatting log records in plain text                           or XML respectively. As with Handlers, additional Formatters                            may be developed by third parties. </UL> <P> The Logging APIs offer both static and dynamic configuration control. Static control enables field service staff to set up a particular configuration and then re-launch the  application with the new logging settings. Dynamic control allows for updates to the  logging configuration within a currently running program. The APIs also allow for logging to be  enabled or disabled for different functional areas of the system. For example,  a field service engineer might be interested in tracing all AWT events, but might have no interest in  socket events or memory management. </P>  <h2>Null Pointers</h2> <p> In general, unless otherwise noted in the javadoc, methods and constructors will throw _ClassElement_ if passed a null argument. The one broad exception to this rule is that the logging convenience methods in the Logger class (the config, entering, exiting, fine, finer, finest,  log, logp, logrb, severe, throwing, and warning methods)   will accept null values  for all arguments except for the initial Level argument (if any). <p> <H2>Related Documentation</H2> <P> For an overview of control flow,  please refer to the  <a href=\"_ClassPathElement_\"> Java Logging Overview</a>. </P>  <!-- Put @see and @since tags down here. -->  @since _ClassPathElement_   ',directive
' <P> Provides the classes and interfaces of  the Java<SUP><FONT SIZE=\"-2\">TM</FONT></SUP> 2  platform\'s core logging facilities. ',non-directive
'The central goal of the logging APIs is to support maintaining and servicing software at customer sites.   ',non-directive
'<P> There are four main target uses of the logs: </P>  <OL>    ',non-directive
'<LI> <I>Problem diagnosis by end users and system administrators</I>.            ',non-directive
'This consists of simple logging of common problems that can be fixed            or tracked locally, such as running out of resources, security failures,           and simple configuration errors.          ',directive
?,non-directive
'<LI> <I>Problem diagnosis by field service engineers</I>. ',non-directive
'The logging information            used by field service engineers may be considerably more complex and            verbose than that required by system administrators.  ',directive
'Typically such information            will require extra logging within particular subsystems.     ',directive
'<LI> <I>Problem diagnosis by the development organization</I>.          ',non-directive
'When a problem occurs in the field, it may be necessary to return the captured logging          information to the original development team for diagnosis. ',directive
'This logging          information may be extremely detailed and fairly inscrutable. ',directive
'Such information might include          detailed tracing on the internal execution of particular subsystems.                ',non-directive
'<LI> <I>Problem diagnosis by developers</I>. ',non-directive
'The Logging APIs may also be            used to help debug an application under development. ',directive
'This may             include logging information generated by the target application            as well as logging information generated by lower-level libraries.                      ',directive
'Note however that while this use is perfectly reasonable,            the logging APIs are not intended to replace the normal debugging             and profiling tools that may already exist in the development environment.  ',directive
'</OL>  ',non-directive
'</P> The key elements of this package include: <UL>    ',non-directive
'<LI> <I>Logger</I>: The main entity on which applications make                  logging calls. ',directive
'A Logger object is used to log messages                  for a specific system or application                 component.    ',non-directive
'<LI> <I>_ClassElement_</I>: Used to pass logging requests between the logging                    framework and individual log handlers.    ',directive
'<LI> <I>Handler</I>: Exports _ClassElement_ objects to a variety of destinations                  including memory, output streams, consoles, files, and sockets.                  ',non-directive
'A variety of Handler subclasses exist for this purpose. ',directive
'Additional Handlers                  may be developed by third parties and delivered on top of the core platform.    ',directive
'<LI> <I>Level</I>: Defines a set of standard logging levels that can be used                       to control logging output. ',non-directive
'Programs can be configured to output logging                       for some levels while ignoring output for others.    ',non-directive
'<LI> <I>Filter</I>: Provides fine-grained control over what gets logged,                        beyond the control provided by log levels. ',non-directive
'The logging APIs support a general-purpose                        filter mechanism that allows application code to attach arbitrary filters to                         control logging output.                          ',non-directive
?,non-directive
'<LI> <I>Formatter</I>: Provides support for formatting _ClassElement_ objects. ',non-directive
'This                            package includes two formatters, _ClassElement_ and                            XMLFormatter, for formatting log records in plain text                           or XML respectively. ',non-directive
'As with Handlers, additional Formatters                            may be developed by third parties. ',directive
'</UL> ',non-directive
'<P> The Logging APIs offer both static and dynamic configuration control. ',non-directive
'Static control enables field service staff to set up a particular configuration and then re-launch the  application with the new logging settings. ',non-directive
'Dynamic control allows for updates to the  logging configuration within a currently running program. ',non-directive
'The APIs also allow for logging to be  enabled or disabled for different functional areas of the system. ',non-directive
'For example,  a field service engineer might be interested in tracing all AWT events, but might have no interest in  socket events or memory management. ',non-directive
'</P>  <h2>Null Pointers</h2> <p> In general, unless otherwise noted in the javadoc, methods and constructors will throw _ClassElement_ if passed a null argument. ',directive
'The one broad exception to this rule is that the logging convenience methods in the Logger class (the config, entering, exiting, fine, finer, finest,  log, logp, logrb, severe, throwing, and warning methods)   will accept null values  for all arguments except for the initial Level argument (if any). ',directive
'<p> <H2>Related Documentation</H2> <P> For an overview of control flow,  please refer to the  <a href=\"_ClassPathElement_\"> Java Logging Overview</a>. ',non-directive
'</P>  <!-- Put ',non-directive
'@see and ',non-directive
'@since tags down here. ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_   ',non-directive
'  This package allows applications to store and retrieve user and system preference and configuration data. This data is stored persistently in an implementation-dependent backing store. There are two separate trees of preference nodes, one for user preferences and one for system preferences.  <!-- <h2>Package Specification</h2> <h2>Related Documentation</h2> -->  @since _ClassPathElement_ ',non-directive
'  This package allows applications to store and retrieve user and system preference and configuration data. ',non-directive
'This data is stored persistently in an implementation-dependent backing store. ',non-directive
'There are two separate trees of preference nodes, one for user preferences and one for system preferences.  ',non-directive
'<!-- <h2>Package Specification</h2> <h2>Related Documentation</h2> -->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  <p> Utility classes commonly useful in concurrent programming.  This package includes a few small standardized extensible frameworks, as well as some classes that provide useful functionality and are otherwise tedious or difficult to implement.  Here are brief descriptions of the main components. See also the <tt>locks</tt> and <tt>atomic</tt> packages.  <h2>Executors</h2>  <b>Interfaces.</b> {@link _ClassPathElement_} is a simple standardized interface for defining custom thread-like subsystems, including thread pools, asynchronous IO, and lightweight task frameworks.  Depending on which concrete Executor class is being used, tasks may execute in a newly created thread, an existing task-execution thread, or the thread calling <tt>execute()</tt>, and may execute sequentially or concurrently.  {@link _ClassPathElement_} provides a more complete asynchronous task execution framework.  An _ClassElement_ manages queuing and scheduling of tasks, and allows controlled shutdown.  The {@link _ClassPathElement_} subinterface and associated interfaces add support for delayed and periodic task execution. _ClassElement_ provide methods arranging asynchronous execution of any function expressed as {@link _ClassPathElement_}, the result-bearing analog of {@link _ClassPathElement_}.  A {@link _ClassPathElement_} returns the results of a function, allows determination of whether execution has completed, and provides a means to cancel execution.  A {@link _ClassPathElement_} is a Future that possesses a <tt>run</tt> method that upon execution, sets its results.  <p>  <b>Implementations.</b> Classes {@link _ClassPathElement_} and {@link _ClassPathElement_} provide tunable, flexible thread pools. The {@link _ClassPathElement_} class provides factory methods for the most common kinds and configurations of Executors, as well as a few utility methods for using them. Other utilities based on Executors include the concrete class {@link _ClassPathElement_} providing a common extensible implementation of Futures, and {@link _ClassPathElement_}, that assists in coordinating the processing of groups of asynchronous tasks.  <h2>Queues</h2>  The _ClassPathElement_ {@link _ClassPathElement_} class supplies an efficient scalable thread-safe non-blocking FIFO queue.  Five implementations in _ClassPathElement_ support the extended {@link _ClassPathElement_} interface, that defines blocking versions of put and take: {@link _ClassPathElement_}, {@link _ClassPathElement_}, {@link _ClassPathElement_}, {@link _ClassPathElement_}, and {@link _ClassPathElement_}. The different classes cover the most common usage contexts for producer-consumer, messaging, parallel tasking, and related concurrent designs. The {@link _ClassPathElement_} interface extends <tt>_ClassElement_</tt> to support both FIFO and LIFO (stack-based) operations. Class {@link _ClassPathElement_} provides an implementation.   <h2>Timing</h2>  The {@link _ClassPathElement_} class provides multiple granularities (including nanoseconds) for specifying and controlling time-out based operations.  Most classes in the package contain operations based on time-outs in addition to indefinite waits.  In all cases that time-outs are used, the time-out specifies the minimum time that the method should wait before indicating that it timed-out.  Implementations make a &quot;best effort&quot; to detect time-outs as soon as possible after they occur.  However, an indefinite amount of time may elapse between a time-out being detected and a thread actually executing again after that time-out.  All methods that accept timeout parameters treat values less than or equal to zero to mean not to wait at all.  To wait \"forever\", you can use a value of <tt>_ClassPathElement_</tt>.  <h2>Synchronizers</h2>  Four classes aid common special-purpose synchronization idioms. {@link _ClassPathElement_} is a classic concurrency tool. {@link _ClassPathElement_} is a very simple yet very common utility for blocking until a given number of signals, events, or conditions hold.  A {@link _ClassPathElement_} is a resettable multiway synchronization point useful in some styles of parallel programming. An {@link _ClassPathElement_} allows two threads to exchange objects at a rendezvous point, and is useful in several pipeline designs.  <h2>Concurrent Collections</h2>  Besides Queues, this package supplies Collection implementations designed for use in multithreaded contexts: {@link _ClassPathElement_}, {@link _ClassPathElement_}, {@link _ClassPathElement_}, {@link _ClassPathElement_}, and {@link _ClassPathElement_}. When many threads are expected to access a given collection, a <tt>_ClassElement_</tt> is normally preferable to a synchronized <tt>_ClassElement_</tt>, and a <tt>_ClassElement_</tt> is normally preferable to a synchronized <tt>_ClassElement_</tt>. A <tt>_ClassElement_</tt> is preferable to a synchronized <tt>_ClassElement_</tt> when the expected number of reads and traversals greatly outnumber the number of updates to a list.  <p>The \"Concurrent\" prefix used with some classes in this package is a shorthand indicating several differences from similar \"synchronized\" classes. For example <tt>_ClassPathElement_</tt> and <tt>_ClassPathElement_(new _ClassElement_())</tt> are synchronized. But {@link _ClassPathElement_} is \"concurrent\".  A concurrent collection is thread-safe, but not governed by a single exclusion lock. In the particular case of _ClassElement_, it safely permits any number of concurrent reads as well as a tunable number of concurrent writes.  \"Synchronized\" classes can be useful when you need to prevent all access to a collection via a single lock, at the expense of poorer scalability. In other cases in which multiple threads are expected to access a common collection, \"concurrent\" versions are normally preferable. And unsynchronized collections are preferable when either collections are unshared, or are accessible only when holding other locks.  <p> Most concurrent Collection implementations (including most Queues) also differ from the usual _ClassPathElement_ conventions in that their Iterators provide <em>weakly consistent</em> rather than fast-fail traversal. A weakly consistent iterator is thread-safe, but does not necessarily freeze the collection while iterating, so it may (or may not) reflect any updates since the iterator was created.  <a name=\"_ClassElement_\"> <h2> Memory Consistency Properties </h2>  <a href=\"_OSPathElement_/_ClassPathElement_\"> Chapter 17 of the Java Language Specification</a> defines the <i>happens-before</i> relation on memory operations such as reads and writes of shared variables.  The results of a write by one thread are guaranteed to be visible to a read by another thread only if the write operation <i>happens-before</i> the read operation.  The {@code synchronized} and {@code volatile} constructs, as well as the {@code _ClassPathElement_()} and {@code _ClassPathElement_()} methods, can form <i>happens-before</i> relationships. In particular:  <ul>   <li>Each action in a thread <i>happens-before</i> every action in that   thread that comes later in the program\'s order.    <li>An unlock ({@code synchronized} block or method exit) of a   monitor <i>happens-before</i> every subsequent lock ({@code synchronized}   block or method entry) of that same monitor. And because   the <i>happens-before</i> relation is transitive, all actions   of a thread prior to unlocking <i>happen-before</i> all actions   subsequent to any thread locking that monitor.    <li>A write to a {@code volatile} field <i>happens-before</i> every   subsequent read of that same field. Writes and reads of   {@code volatile} fields have similar memory consistency effects   as entering and exiting monitors, but do <em>not</em> entail   mutual exclusion locking.    <li>A call to {@code start} on a thread <i>happens-before</i> any action in the   started thread.    <li>All actions in a thread <i>happen-before</i> any other thread   successfully returns from a {@code join} on that thread.  </ul>   The methods of all classes in {@code _ClassPathElement_} and its subpackages extend these guarantees to higher-level synchronization. In particular:  <ul>    <li>Actions in a thread prior to placing an object into any concurrent   collection <i>happen-before</i> actions subsequent to the access or   removal of that element from the collection in another thread.    <li>Actions in a thread prior to the submission of a {@code Runnable}   to an {@code Executor} <i>happen-before</i> its execution begins.   Similarly for {@code Callables} submitted to an {@code _ClassElement_}.    <li>Actions taken by the asynchronous computation represented by a   {@code Future} <i>happen-before</i> actions subsequent to the   retrieval of the result via {@code _ClassPathElement_()} in another thread.    <li>Actions prior to \"releasing\" synchronizer methods such as   {@code _ClassPathElement_}, {@code _ClassPathElement_}, and   {@code _ClassPathElement_} <i>happen-before</i> actions   subsequent to a successful \"acquiring\" method such as   {@code _ClassPathElement_}, {@code _ClassPathElement_},   {@code _ClassPathElement_}, and {@code _ClassPathElement_} on the   same synchronizer object in another thread.    <li>For each pair of threads that successfully exchange objects via   an {@code Exchanger}, actions prior to the {@code exchange()}   in each thread <i>happen-before</i> those subsequent to the   corresponding {@code exchange()} in another thread.    <li>Actions prior to calling {@code _ClassPathElement_}   <i>happen-before</i> actions performed by the barrier action, and   actions performed by the barrier action <i>happen-before</i> actions   subsequent to a successful return from the corresponding {@code await}   in other threads.  </ul>  @since _ClassPathElement_  ',directive
'  <p> Utility classes commonly useful in concurrent programming.  ',directive
'This package includes a few small standardized extensible frameworks, as well as some classes that provide useful functionality and are otherwise tedious or difficult to implement.  ',non-directive
'Here are brief descriptions of the main components. ',non-directive
'See also the <tt>locks</tt> and <tt>atomic</tt> packages.  ',directive
'<h2>Executors</h2>  <b>Interfaces.</b> {',non-directive
'@link _ClassPathElement_} is a simple standardized interface for defining custom thread-like subsystems, including thread pools, asynchronous IO, and lightweight task frameworks.  ',directive
'Depending on which concrete Executor class is being used, tasks may execute in a newly created thread, an existing task-execution thread, or the thread calling <tt>execute()</tt>, and may execute sequentially or concurrently.  ',directive
'{',non-directive
'@link _ClassPathElement_} provides a more complete asynchronous task execution framework.  ',directive
'An _ClassElement_ manages queuing and scheduling of tasks, and allows controlled shutdown.  ',non-directive
'The {',non-directive
'@link _ClassPathElement_} subinterface and associated interfaces add support for delayed and periodic task execution. ',directive
'_ClassElement_ provide methods arranging asynchronous execution of any function expressed as {',non-directive
'@link _ClassPathElement_}, the result-bearing analog of {',directive
'@link _ClassPathElement_}.  ',non-directive
'A {',non-directive
'@link _ClassPathElement_} returns the results of a function, allows determination of whether execution has completed, and provides a means to cancel execution.  ',directive
'A {',non-directive
'@link _ClassPathElement_} is a Future that possesses a <tt>run</tt> method that upon execution, sets its results.  ',directive
'<p>  <b>Implementations.</b> Classes {',non-directive
'@link _ClassPathElement_} and {',directive
'@link _ClassPathElement_} provide tunable, flexible thread pools. ',directive
'The {',non-directive
'@link _ClassPathElement_} class provides factory methods for the most common kinds and configurations of Executors, as well as a few utility methods for using them. ',directive
'Other utilities based on Executors include the concrete class {',non-directive
'@link _ClassPathElement_} providing a common extensible implementation of Futures, and {',directive
'@link _ClassPathElement_}, that assists in coordinating the processing of groups of asynchronous tasks.  ',directive
'<h2>Queues</h2>  The _ClassPathElement_ {',directive
'@link _ClassPathElement_} class supplies an efficient scalable thread-safe non-blocking FIFO queue.  ',directive
'Five implementations in _ClassPathElement_ support the extended {',directive
'@link _ClassPathElement_} interface, that defines blocking versions of put and take: {',directive
'@link _ClassPathElement_}, {',directive
'@link _ClassPathElement_}, {',directive
'@link _ClassPathElement_}, {',directive
'@link _ClassPathElement_}, and {',directive
'@link _ClassPathElement_}. ',directive
'The different classes cover the most common usage contexts for producer-consumer, messaging, parallel tasking, and related concurrent designs. ',directive
'The {',non-directive
'@link _ClassPathElement_} interface extends <tt>_ClassElement_</tt> to support both FIFO and LIFO (stack-based) operations. ',directive
'Class {',non-directive
'@link _ClassPathElement_} provides an implementation.   ',directive
'<h2>Timing</h2>  The {',non-directive
'@link _ClassPathElement_} class provides multiple granularities (including nanoseconds) for specifying and controlling time-out based operations.  ',directive
'Most classes in the package contain operations based on time-outs in addition to indefinite waits.  ',directive
'In all cases that time-outs are used, the time-out specifies the minimum time that the method should wait before indicating that it timed-out.  ',directive
'Implementations make a &quot;best effort&quot; to detect time-outs as soon as possible after they occur.  ',directive
'However, an indefinite amount of time may elapse between a time-out being detected and a thread actually executing again after that time-out.  ',directive
'All methods that accept timeout parameters treat values less than or equal to zero to mean not to wait at all.  ',non-directive
'To wait \"forever\", you can use a value of <tt>_ClassPathElement_</tt>.  ',non-directive
'<h2>Synchronizers</h2>  Four classes aid common special-purpose synchronization idioms. ',directive
'{',non-directive
'@link _ClassPathElement_} is a classic concurrency tool. ',directive
'{',non-directive
'@link _ClassPathElement_} is a very simple yet very common utility for blocking until a given number of signals, events, or conditions hold.  ',directive
'A {',non-directive
'@link _ClassPathElement_} is a resettable multiway synchronization point useful in some styles of parallel programming. ',directive
'An {',non-directive
'@link _ClassPathElement_} allows two threads to exchange objects at a rendezvous point, and is useful in several pipeline designs.  ',directive
'<h2>Concurrent Collections</h2>  Besides Queues, this package supplies Collection implementations designed for use in multithreaded contexts: {',directive
'@link _ClassPathElement_}, {',directive
'@link _ClassPathElement_}, {',directive
'@link _ClassPathElement_}, {',directive
'@link _ClassPathElement_}, and {',directive
'@link _ClassPathElement_}. ',directive
'When many threads are expected to access a given collection, a <tt>_ClassElement_</tt> is normally preferable to a synchronized <tt>_ClassElement_</tt>, and a <tt>_ClassElement_</tt> is normally preferable to a synchronized <tt>_ClassElement_</tt>. ',directive
'A <tt>_ClassElement_</tt> is preferable to a synchronized <tt>_ClassElement_</tt> when the expected number of reads and traversals greatly outnumber the number of updates to a list.  ',directive
'<p>The \"Concurrent\" prefix used with some classes in this package is a shorthand indicating several differences from similar \"synchronized\" classes. ',directive
'For example <tt>_ClassPathElement_</tt> and <tt>_ClassPathElement_(new _ClassElement_())</tt> are synchronized. ',directive
'But {',non-directive
'@link _ClassPathElement_} is \"concurrent\".  ',directive
'A concurrent collection is thread-safe, but not governed by a single exclusion lock. ',directive
'In the particular case of _ClassElement_, it safely permits any number of concurrent reads as well as a tunable number of concurrent writes.  ',directive
'Synchronized\" classes can be useful when you need to prevent all access to a collection via a single lock, at the expense of poorer scalability.',directive
'In other cases in which multiple threads are expected to access a common collection, \"concurrent\" versions are normally preferable. ',directive
'And unsynchronized collections are preferable when either collections are unshared, or are accessible only when holding other locks.  ',directive
'<p> Most concurrent Collection implementations (including most Queues) also differ from the usual _ClassPathElement_ conventions in that their Iterators provide <em>weakly consistent</em> rather than fast-fail traversal. ',directive
'A weakly consistent iterator is thread-safe, but does not necessarily freeze the collection while iterating, so it may (or may not) reflect any updates since the iterator was created.  ',directive
'<a name=\"_ClassElement_\"> <h2> Memory Consistency Properties </h2>  <a href=\"_OSPathElement_/_ClassPathElement_\"> Chapter 17 of the Java Language Specification</a> defines the <i>happens-before</i> relation on memory operations such as reads and writes of shared variables.  ',directive
'The results of a write by one thread are guaranteed to be visible to a read by another thread only if the write operation <i>happens-before</i> the read operation.  ',directive
'The {@code synchronized} and {@code volatile} constructs, as well as the {@code _ClassPathElement_()} and {@code _ClassPathElement_()} methods, can form <i>happens-before</i> relationships. ',directive
'In particular:  <ul>   ',non-directive
'<li>Each action in a thread <i>happens-before</i> every action in that   thread that comes later in the program\'s order.    ',directive
'<li>An unlock ({@code synchronized} block or method exit) of a   monitor <i>happens-before</i> every subsequent lock ({@code synchronized}   block or method entry) of that same monitor. ',directive
'And because   the <i>happens-before</i> relation is transitive, all actions   of a thread prior to unlocking <i>happen-before</i> all actions   subsequent to any thread locking that monitor.    ',directive
'<li>A write to a {@code volatile} field <i>happens-before</i> every   subsequent read of that same field. ',directive
'Writes and reads of   {@code volatile} fields have similar memory consistency effects   as entering and exiting monitors, but do <em>not</em> entail   mutual exclusion locking.    ',directive
'<li>A call to {@code start} on a thread <i>happens-before</i> any action in the   started thread.    ',directive
'<li>All actions in a thread <i>happen-before</i> any other thread   successfully returns from a {@code join} on that thread.  ',directive
'</ul>   ',non-directive
'The methods of all classes in {@code _ClassPathElement_} and its subpackages extend these guarantees to higher-level synchronization. ',directive
'In particular:  <ul>    ',non-directive
'<li>Actions in a thread prior to placing an object into any concurrent   collection <i>happen-before</i> actions subsequent to the access or   removal of that element from the collection in another thread.    ',directive
'<li>Actions in a thread prior to the submission of a {@code Runnable}   to an {@code Executor} <i>happen-before</i> its execution begins.   ',directive
'Similarly for {@code Callables} submitted to an {@code _ClassElement_}.    ',directive
'<li>Actions taken by the asynchronous computation represented by a   {@code Future} <i>happen-before</i> actions subsequent to the   retrieval of the result via {@code _ClassPathElement_()} in another thread.    ',directive
'<li>Actions prior to \"releasing\" synchronizer methods such as   {@code _ClassPathElement_}, {@code _ClassPathElement_}, and   {@code _ClassPathElement_} <i>happen-before</i> actions   subsequent to a successful \"acquiring\" method such as   {@code _ClassPathElement_}, {@code _ClassPathElement_},   {@code _ClassPathElement_}, and {@code _ClassPathElement_} on the   same synchronizer object in another thread.    ',directive
'<li>For each pair of threads that successfully exchange objects via   an {@code Exchanger}, actions prior to the {@code exchange()}   in each thread <i>happen-before</i> those subsequent to the   corresponding {@code exchange()} in another thread.    ',directive
'<li>Actions prior to calling {@code _ClassPathElement_}   <i>happen-before</i> actions performed by the barrier action, and   actions performed by the barrier action <i>happen-before</i> actions   subsequent to a successful return from the corresponding {@code await}   in other threads.  ',directive
'</ul>  ',non-directive
'@since _ClassPathElement_  ',non-directive
'  Interfaces and classes providing a framework for locking and waiting for conditions that is distinct from built-in synchronization and monitors. The framework permits much greater flexibility in the use of locks and conditions, at the expense of more awkward syntax.  <p> The {@link _ClassPathElement_} interface supports locking disciplines that differ in semantics (reentrant, fair, etc), and that can be used in non-block-structured contexts including hand-over-hand and lock reordering algorithms. The main implementation is {@link _ClassPathElement_}.  <p> The {@link _ClassPathElement_} interface similarly defines locks that may be shared among readers but are exclusive to writers.  Only a single implementation, {@link _ClassPathElement_}, is provided, since it covers most standard usage contexts. But programmers may create their own implementations to cover nonstandard requirements.  <p> The {@link _ClassPathElement_} interface describes condition variables that may be associated with Locks. These are similar in usage to the implicit monitors accessed using <tt>_ClassPathElement_</tt>, but offer extended capabilities.  In particular, multiple <tt>Condition</tt> objects may be associated with a single <tt>Lock</tt>.  To avoid compatibility issues, the names of <tt>Condition</tt> methods are different than the corresponding <tt>Object</tt> versions.  <p> The {@link _ClassPathElement_} class serves as a useful superclass for defining locks and other synchronizers that rely on queuing blocked threads.  The {@link _ClassPathElement_} class provides the same functionality but extends support to 64 bits of synchronization state. Both extend class {@link _ClassPathElement_}, a simple class that helps record the thread currently holding exclusive synchronization.  The {@link _ClassPathElement_} class provides lower-level blocking and unblocking support that is useful for those developers implementing their own customized lock classes.  @since _ClassPathElement_  ',directive
'  Interfaces and classes providing a framework for locking and waiting for conditions that is distinct from built-in synchronization and monitors. ',directive
'The framework permits much greater flexibility in the use of locks and conditions, at the expense of more awkward syntax.  ',directive
'<p> The {',non-directive
'@link _ClassPathElement_} interface supports locking disciplines that differ in semantics (reentrant, fair, etc), and that can be used in non-block-structured contexts including hand-over-hand and lock reordering algorithms. ',directive
'The main implementation is {',non-directive
'@link _ClassPathElement_}.  ',directive
'<p> The {',non-directive
'@link _ClassPathElement_} interface similarly defines locks that may be shared among readers but are exclusive to writers.  ',directive
'Only a single implementation, {',directive
'@link _ClassPathElement_}, is provided, since it covers most standard usage contexts. ',directive
'But programmers may create their own implementations to cover nonstandard requirements.  ',directive
'<p> The {',non-directive
'@link _ClassPathElement_} interface describes condition variables that may be associated with Locks. ',directive
'These are similar in usage to the implicit monitors accessed using <tt>_ClassPathElement_</tt>, but offer extended capabilities.  ',directive
'In particular, multiple <tt>Condition</tt> objects may be associated with a single <tt>Lock</tt>.  ',directive
'To avoid compatibility issues, the names of <tt>Condition</tt> methods are different than the corresponding <tt>Object</tt> versions.  ',directive
'<p> The {',non-directive
'@link _ClassPathElement_} class serves as a useful superclass for defining locks and other synchronizers that rely on queuing blocked threads.  ',directive
'The {',non-directive
'@link _ClassPathElement_} class provides the same functionality but extends support to 64 bits of synchronization state. ',directive
'Both extend class {',directive
'@link _ClassPathElement_}, a simple class that helps record the thread currently holding exclusive synchronization.  ',directive
'The {',non-directive
'@link _ClassPathElement_} class provides lower-level blocking and unblocking support that is useful for those developers implementing their own customized lock classes.  ',directive
'@since _ClassPathElement_  ',non-directive
' Service provider classes for the classes in the _ClassPathElement_ package. <!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   <li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',non-directive
' Service provider classes for the classes in the _ClassPathElement_ package. ',non-directive
'<!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Classes for matching character sequences against patterns specified by regular expressions.  <p> An instance of the {@link _ClassPathElement_} class represents a regular expression that is specified in string form in a syntax similar to that used by Perl.  <p> Instances of the {@link _ClassPathElement_} class are used to match character sequences against a given pattern.  Input is provided to matchers via the {@link _ClassPathElement_} interface in order to support matching against characters from a wide variety of input sources. </p>  <p> Unless otherwise noted, passing a <tt>null</tt> argument to a method in any class or interface in this package will cause a {@link _ClassPathElement_ _ClassElement_} to be thrown.  <h2>Related Documentation</h2>  <p> An excellent tutorial and overview of regular expressions is <a href=\"_OSPathElement_/_OSPathElement_\"><i>Mastering Regular Expressions</i>, Jeffrey E. F. Friedl, O\'Reilly and Associates, 1997.</a> </p>  <!-- For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ @version _ClassPathElement_, _OSPathElement_02 @author Mike _ClassElement_ @author Mark Reinhold  ',directive
'  Classes for matching character sequences against patterns specified by regular expressions.  ',non-directive
'<p> An instance of the {',non-directive
'@link _ClassPathElement_} class represents a regular expression that is specified in string form in a syntax similar to that used by Perl.  ',non-directive
'<p> Instances of the {',non-directive
'@link _ClassPathElement_} class are used to match character sequences against a given pattern.  ',non-directive
'Input is provided to matchers via the {',non-directive
'@link _ClassPathElement_} interface in order to support matching against characters from a wide variety of input sources. ',non-directive
'</p>  <p> Unless otherwise noted, passing a <tt>null</tt> argument to a method in any class or interface in this package will cause a {',directive
'@link _ClassPathElement_ _ClassElement_} to be thrown.  ',non-directive
'<h2>Related Documentation</h2>  <p> An excellent tutorial and overview of regular expressions is <a href=\"_OSPathElement_/_OSPathElement_\"><i>Mastering Regular Expressions</i>, Jeffrey E. ',non-directive
'F. ',non-directive
'Friedl, O\'Reilly and Associates, 1997.</a> </p>  <!-- For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'@version _ClassPathElement_, _OSPathElement_02 ',non-directive
'@author Mike _ClassElement_ ',non-directive
'@author Mark Reinhold  ',non-directive
'  Provides classes for reading and writing the JAR (Java ARchive) file format, which is based on the standard ZIP file format with an optional manifest file.  The manifest stores meta-information about the JAR file contents and is also used for signing JAR files.   <h2>Package Specification</h2>  The <code>_ClassPathElement_</code> package is based on the following specifications: <ul>   <li><b>Info-ZIP file format</b> - The JAR format is based on the Info-ZIP        file format. See        <a href=\"_OSPathElement_package-_ClassPathElement_#package_description\">_ClassPathElement_       package description.</a> <p>       In JAR files, all file names must be encoded in the UTF-8 encoding.  <p>   <li><a href=\"_ClassPathElement_\">       Manifest and Signature Specification</a> - The manifest format specification. </ul>  <!-- <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',directive
'  Provides classes for reading and writing the JAR (Java ARchive) file format, which is based on the standard ZIP file format with an optional manifest file.  ',non-directive
'The manifest stores meta-information about the JAR file contents and is also used for signing JAR files.   ',non-directive
'<h2>Package Specification</h2>  The <code>_ClassPathElement_</code> package is based on the following specifications: <ul>   ',non-directive
'<li><b>Info-ZIP file format</b> - The JAR format is based on the Info-ZIP        file format. ',non-directive
'See        <a href=\"_OSPathElement_package-_ClassPathElement_#package_description\">_ClassPathElement_       package description.</a> <p>       In JAR files, all file names must be encoded in the UTF-8 encoding.  ',directive
'<p>   ',non-directive
'<li><a href=\"_ClassPathElement_\">       Manifest and Signature Specification</a> - The manifest format specification. ',non-directive
'</ul>  ',non-directive
'<!-- <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides classes for reading and writing the standard ZIP and GZIP file formats.  Also includes classes for compressing and decompressing data using the DEFLATE compression algorithm, which is used by the ZIP and GZIP file formats. Additionally, there are utility classes for computing the CRC-32 and Adler-32 checksums of arbitrary input streams.   <h2>Package Specification</h2>  </a> <ul>   <li><a href=\"_OSPathElement_/_OSPathElement_appnote-970311-_ClassPathElement_\">       Info-ZIP Application Note 970311       </a> - a detailed description of the Info-ZIP format upon which       the <code>_ClassPathElement_</code> classes are based. <p>   <li><a href=\"_OSPathElement_/_ClassPathElement_\">       ZLIB Compressed Data Format Specification version _ClassPathElement_</a>       &nbsp;       <a href=\"_OSPathElement_/_ClassPathElement_\">       (_ClassElement_)</a>       (RFC 1950) <p>   <li><a href=\"_OSPathElement_/_ClassPathElement_\">       DEFLATE Compressed Data Format Specification version _ClassPathElement_</a>       &nbsp;       <a href=\"_OSPathElement_/_ClassPathElement_\">       (_ClassElement_)</a>       (RFC 1951) <p>   <li><a href=\"_OSPathElement_/_ClassPathElement_\">       GZIP file format specification version _ClassPathElement_</a>       &nbsp;       <a href=\"_OSPathElement_/_ClassPathElement_\">       (_ClassElement_)</a>       (RFC 1952) <p>   <li>CRC-32 checksum is described in RFC 1952 (above) <p>   <li>Adler-32 checksum is described in RFC 1950 (above)  </ul>   <!-- <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',directive
'  Provides classes for reading and writing the standard ZIP and GZIP file formats.  ',non-directive
'Also includes classes for compressing and decompressing data using the DEFLATE compression algorithm, which is used by the ZIP and GZIP file formats. ',non-directive
'Additionally, there are utility classes for computing the CRC-32 and Adler-32 checksums of arbitrary input streams.   ',directive
'<h2>Package Specification</h2>  </a> <ul>   ',non-directive
'<li><a href=\"_OSPathElement_/_OSPathElement_appnote-970311-_ClassPathElement_\">       Info-ZIP Application Note 970311       </a> - a detailed description of the Info-ZIP format upon which       the <code>_ClassPathElement_</code> classes are based. ',directive
'<p>   ',non-directive
'<li><a href=\"_OSPathElement_/_ClassPathElement_\">       ZLIB Compressed Data Format Specification version _ClassPathElement_</a>       &nbsp;       <a href=\"_OSPathElement_/_ClassPathElement_\">       (_ClassElement_)</a>       (RFC 1950) <p>   ',directive
'<li><a href=\"_OSPathElement_/_ClassPathElement_\">       DEFLATE Compressed Data Format Specification version _ClassPathElement_</a>       &nbsp;       <a href=\"_OSPathElement_/_ClassPathElement_\">       (_ClassElement_)</a>       (RFC 1951) <p>   ',directive
'<li><a href=\"_OSPathElement_/_ClassPathElement_\">       GZIP file format specification version _ClassPathElement_</a>       &nbsp;       <a href=\"_OSPathElement_/_ClassPathElement_\">       (_ClassElement_)</a>       (RFC 1952) <p>   ',directive
'<li>CRC-32 checksum is described in RFC 1952 (above) <p>   ',non-directive
'<li>Adler-32 checksum is described in RFC 1950 (above)  </ul>   ',non-directive
'<!-- <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides classes for performing arbitrary-precision integer arithmetic (_ClassElement_) and arbitrary-precision decimal arithmetic (_ClassElement_). _ClassElement_ is analogous to Java\'s primitive integer types except that it provides arbitrary precision, hence operations on _ClassElement_ do not overflow or lose precision.  In addition to standard arithmetic operations, _ClassElement_ provides modular arithmetic, GCD calculation, primality testing, prime generation, bit manipulation, and a few other miscellaneous operations.  _ClassElement_ provides arbitrary-precision signed decimal numbers suitable for currency calculations and the like.   _ClassElement_ gives the user complete control over rounding behavior, allowing the user to choose from a comprehensive set of eight rounding modes.  <!-- <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',directive
'  Provides classes for performing arbitrary-precision integer arithmetic (_ClassElement_) and arbitrary-precision decimal arithmetic (_ClassElement_). ',non-directive
'_ClassElement_ is analogous to Java\'s primitive integer types except that it provides arbitrary precision, hence operations on _ClassElement_ do not overflow or lose precision.  ',non-directive
'In addition to standard arithmetic operations, _ClassElement_ provides modular arithmetic, GCD calculation, primality testing, prime generation, bit manipulation, and a few other miscellaneous operations.  ',directive
'_ClassElement_ provides arbitrary-precision signed decimal numbers suitable for currency calculations and the like.   ',non-directive
'_ClassElement_ gives the user complete control over rounding behavior, allowing the user to choose from a comprehensive set of eight rounding modes.  ',non-directive
'<!-- <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides the classes and interfaces for the security framework. This includes classes that implement an easily configurable, fine-grained access control security architecture. This package also supports the generation and storage of cryptographic public key pairs, as well as a number of exportable cryptographic operations including those for message digest and signature generation.  Finally, this package provides classes that support _OSPathElement_guarded objects and secure random number generation.  Many of the classes provided in this package (the cryptographic and secure random number generator classes in particular) are provider-based.  The class itself defines a programming interface to which applications may write.  The implementations themselves may then be written by independent third-party vendors and plugged in seamlessly as needed.  Therefore application developers may take advantage of any number of provider-based implementations without having to add or rewrite code.  <h2>Package Specification</h2>  <ul>   <li><a href=\"{@_ClassElement_}/_ClassPathElement_\"><b>     Cryptography Architecture</b></a></li>    <li>PKCS8: Private-Key Information Standard, Version _ClassPathElement_, November 1993</li> </ul>  <h2>Related Documentation</h2>  For further documentation, please see: <ul>   <li><a href=     \"{@_ClassElement_}/_OSPathElement_security-_ClassPathElement_\"><b>     Security Architecture</b></a></li>    <li><a href=     \"{@_ClassElement_}/_ClassPathElement_\"><b>     How to Implement a Provider for the Java Cryptography Architecture     </b></a></li>   <li><a href=     \"{@_ClassElement_}/_ClassPathElement_\"><b>     Default Policy Implementation and Policy File Syntax     </b></a></li>    <li><a href=     \"{@_ClassElement_}/_ClassPathElement_\"><b>     Policy Permissions     </b></a></li>    <li><a href=     \"{@_ClassElement_}/_ClassPathElement_\"><b>     Security Tools Summary     </b></a></li>    <li><b>keytool</b>     (<a href=\"{@_ClassElement_}/_ClassPathElement_\">       for _OSPathElement_Linux</a>)     (<a href=\"{@_ClassElement_}/_ClassPathElement_\">       for Windows</a>)     </li>    <li><b>jarsigner</b>     (<a href=\"{@_ClassElement_}/_ClassPathElement_\">       for _OSPathElement_Linux</a>)     (<a href=\"{@_ClassElement_}/_ClassPathElement_\">       for Windows</a>)     </li>  </ul>  @since _ClassPathElement_ ',directive
'  Provides the classes and interfaces for the security framework. ',non-directive
'This includes classes that implement an easily configurable, fine-grained access control security architecture. ',non-directive
'This package also supports the generation and storage of cryptographic public key pairs, as well as a number of exportable cryptographic operations including those for message digest and signature generation.  ',non-directive
'Finally, this package provides classes that support _OSPathElement_guarded objects and secure random number generation.  ',non-directive
'Many of the classes provided in this package (the cryptographic and secure random number generator classes in particular) are provider-based.  ',non-directive
'The class itself defines a programming interface to which applications may write.  ',directive
'The implementations themselves may then be written by independent third-party vendors and plugged in seamlessly as needed.  ',directive
'Therefore application developers may take advantage of any number of provider-based implementations without having to add or rewrite code.  ',directive
'<h2>Package Specification</h2>  <ul>   ',non-directive
'<li><a href=\"{@_ClassElement_}/_ClassPathElement_\"><b>     Cryptography Architecture</b></a></li>    ',non-directive
'<li>PKCS8: Private-Key Information Standard, Version _ClassPathElement_, November 1993</li> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For further documentation, please see: <ul>   ',non-directive
'<li><a href=     \"{@_ClassElement_}/_OSPathElement_security-_ClassPathElement_\"><b>     Security Architecture</b></a></li>    ',non-directive
'<li><a href=     \"{@_ClassElement_}/_ClassPathElement_\"><b>     How to Implement a Provider for the Java Cryptography Architecture     </b></a></li>   ',non-directive
'<li><a href=     \"{@_ClassElement_}/_ClassPathElement_\"><b>     Default Policy Implementation and Policy File Syntax     </b></a></li>    ',non-directive
'<li><a href=     \"{@_ClassElement_}/_ClassPathElement_\"><b>     Policy Permissions     </b></a></li>    ',non-directive
'<li><a href=     \"{@_ClassElement_}/_ClassPathElement_\"><b>     Security Tools Summary     </b></a></li>    ',non-directive
'<li><b>keytool</b>     (<a href=\"{@_ClassElement_}/_ClassPathElement_\">       for _OSPathElement_Linux</a>)     (<a href=\"{@_ClassElement_}/_ClassPathElement_\">       for Windows</a>)     </li>    ',non-directive
'<li><b>jarsigner</b>     (<a href=\"{@_ClassElement_}/_ClassPathElement_\">       for _OSPathElement_Linux</a>)     (<a href=\"{@_ClassElement_}/_ClassPathElement_\">       for Windows</a>)     </li>  </ul>  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides interfaces for generating RSA (Rivest, Shamir and Adleman _ClassElement_ algorithm) keys as defined in the RSA Laboratory Technical Note PKCS#1, and DSA (Digital Signature Algorithm) keys as defined in NIST\'s FIPS-186. <P> Note that these interfaces are intended only for key implementations whose key material is accessible and  available. These interfaces are not intended for key  implementations whose key material resides in  inaccessible, protected storage (such as in a  hardware device).  <P> For more developer information on how to use these  interfaces, including information on how to design  <code>Key</code> classes for hardware devices, please refer to these cryptographic provider developer guides: <ul>   <li><a href=     \"{@_ClassElement_}/_ClassPathElement_\">     <b>How to Implement a Provider for the     Java<FONT SIZE=-2><SUP>TM</SUP></FONT> Cryptography Architecture     </b></a></li> </ul>  <h2>Package Specification</h2>  <ul>   <li>PKCS #1: RSA Encryption Standard, Version _ClassPathElement_, November 1993 </li>   <li>Federal Information Processing Standards Publication (FIPS PUB) 186:     Digital Signature Standard (DSS) </li> </ul>  <h2>Related Documentation</h2>  For further documentation, please see: <ul>   <li>     <a href=       \"{@_ClassElement_}/_ClassPathElement_\">       <b>Java<FONT SIZE=-2><SUP>TM</SUP></FONT>       Cryptography Architecture API Specification and Reference       </b></a></li> </ul>  @since _ClassPathElement_ ',directive
'  Provides interfaces for generating RSA (Rivest, Shamir and Adleman _ClassElement_ algorithm) keys as defined in the RSA Laboratory Technical Note PKCS#1, and DSA (Digital Signature Algorithm) keys as defined in NIST\'s FIPS-186. ',directive
'<P> Note that these interfaces are intended only for key implementations whose key material is accessible and  available. ',directive
'These interfaces are not intended for key  implementations whose key material resides in  inaccessible, protected storage (such as in a  hardware device).  ',non-directive
'<P> For more developer information on how to use these  interfaces, including information on how to design  <code>Key</code> classes for hardware devices, please refer to these cryptographic provider developer guides: <ul>   ',non-directive
'<li><a href=     \"{@_ClassElement_}/_ClassPathElement_\">     <b>How to Implement a Provider for the     Java<FONT SIZE=-2><SUP>TM</SUP></FONT> Cryptography Architecture     </b></a></li> </ul>  ',non-directive
'<h2>Package Specification</h2>  <ul>   ',non-directive
'<li>PKCS #1: RSA Encryption Standard, Version _ClassPathElement_, November 1993 </li>   ',non-directive
'<li>Federal Information Processing Standards Publication (FIPS PUB) 186:     Digital Signature Standard (DSS) </li> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For further documentation, please see: <ul>   ',non-directive
'<li>     <a href=       \"{@_ClassElement_}/_ClassPathElement_\">       <b>Java<FONT SIZE=-2><SUP>TM</SUP></FONT>       Cryptography Architecture API Specification and Reference       </b></a></li> </ul>  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides classes and interfaces for key specifications and algorithm parameter specifications.  <p>A key specification is a transparent representation of the key material that constitutes a key. A key may be specified in an algorithm-specific way, or in an algorithm-independent encoding format (such as _ClassPathElement_). This package contains key specifications for DSA public and private keys, RSA public and private keys, PKCS #8 private keys in DER-encoded format, and _ClassPathElement_ public and private keys in DER-encoded format.  <p>An algorithm parameter specification is a transparent representation of the sets of parameters used with an algorithm. This package contains an algorithm parameter specification for parameters used with the DSA algorithm.  <h2>Package Specification</h2>  <ul>   <li>PKCS #1: RSA Encryption Standard, Version _ClassPathElement_, November 1993</li>   <li>PKCS #8: Private-Key Information Syntax Standard,      Version _ClassPathElement_, November 1993</li>   <li>Federal Information Processing Standards Publication (FIPS PUB) 186:     Digital Signature Standard (DSS)</li> </ul>  <h2>Related Documentation</h2>  For documentation that includes information about algorithm parameter and key specifications, please see: <ul>   <li>     <a href=       \"{@_ClassElement_}/_ClassPathElement_\">       <b>Java<FONT SIZE=-2><SUP>TM</SUP></FONT>       Cryptography Architecture API Specification and Reference       </b></a></li>   <li>     <a href=       \"{@_ClassElement_}/_ClassPathElement_\">       <b>How to Implement a Provider for the       Java<FONT SIZE=-2><SUP>TM</SUP></FONT> Cryptography Architecture       </b></a></li> </ul>  @since _ClassPathElement_ ',directive
'  Provides classes and interfaces for key specifications and algorithm parameter specifications.  ',non-directive
'<p>A key specification is a transparent representation of the key material that constitutes a key. ',non-directive
'A key may be specified in an algorithm-specific way, or in an algorithm-independent encoding format (such as _ClassPathElement_). ',directive
'This package contains key specifications for DSA public and private keys, RSA public and private keys, PKCS #8 private keys in DER-encoded format, and _ClassPathElement_ public and private keys in DER-encoded format.  ',non-directive
'<p>An algorithm parameter specification is a transparent representation of the sets of parameters used with an algorithm. ',non-directive
'This package contains an algorithm parameter specification for parameters used with the DSA algorithm.  ',non-directive
'<h2>Package Specification</h2>  <ul>   ',non-directive
'<li>PKCS #1: RSA Encryption Standard, Version _ClassPathElement_, November 1993</li>   ',non-directive
'<li>PKCS #8: Private-Key Information Syntax Standard,      Version _ClassPathElement_, November 1993</li>   ',non-directive
'<li>Federal Information Processing Standards Publication (FIPS PUB) 186:     Digital Signature Standard (DSS)</li> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For documentation that includes information about algorithm parameter and key specifications, please see: <ul>   ',non-directive
'<li>     <a href=       \"{@_ClassElement_}/_ClassPathElement_\">       <b>Java<FONT SIZE=-2><SUP>TM</SUP></FONT>       Cryptography Architecture API Specification and Reference       </b></a></li>   ',non-directive
'<li>     <a href=       \"{@_ClassElement_}/_ClassPathElement_\">       <b>How to Implement a Provider for the       Java<FONT SIZE=-2><SUP>TM</SUP></FONT> Cryptography Architecture       </b></a></li> </ul>  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  Provides classes and interfaces for parsing and managing certificates, certificate revocation lists (CRLs), and  certification paths. It contains support for _ClassPathElement_ v3  certificates and _ClassPathElement_ v2 CRLs.  <h2>Package Specification</h2>  <ul>   <li><a href=\"_ClassPathElement_\"><b>Cryptography    Architecture</b></a>   <li>RFC 2459: _ClassPathElement_ Certificate and CRL Profile </ul>  <h2>Related Documentation</h2>  For information about _ClassPathElement_ certificates and CRLs, please see: <ul>   <li><a href=\"_OSPathElement_/_ClassPathElement_\"> _OSPathElement_/_ClassPathElement_</a>   <li><a href=\"_ClassPathElement_\"> _ClassPathElement_ Certificates and CRLs</a> </ul>  @since _ClassPathElement_ ',non-directive
'  Provides classes and interfaces for parsing and managing certificates, certificate revocation lists (CRLs), and  certification paths. ',non-directive
'It contains support for _ClassPathElement_ v3  certificates and _ClassPathElement_ v2 CRLs.  ',non-directive
'<h2>Package Specification</h2>  <ul>   ',non-directive
'<li><a href=\"_ClassPathElement_\"><b>Cryptography    Architecture</b></a>   ',non-directive
'<li>RFC 2459: _ClassPathElement_ Certificate and CRL Profile </ul>  ',non-directive
'<h2>Related Documentation</h2>  For information about _ClassPathElement_ certificates and CRLs, please see: <ul>   ',non-directive
'<li><a href=\"_OSPathElement_/_ClassPathElement_\"> _OSPathElement_/_ClassPathElement_</a>   ',non-directive
'<li><a href=\"_ClassPathElement_\"> _ClassPathElement_ Certificates and CRLs</a> </ul>  ',non-directive
'@since _ClassPathElement_ ',non-directive
'  The classes and interfaces in this package have been superseded by classes in the _ClassPathElement_ package. See that package and, for example, _ClassPathElement_ for details.  <!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   <li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  <h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   <li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> -->  @since _ClassPathElement_ ',non-directive
'  The classes and interfaces in this package have been superseded by classes in the _ClassPathElement_ package. ',non-directive
'See that package and, for example, _ClassPathElement_ for details.  ',non-directive
'<!-- <h2>Package Specification</h2>  ##### FILL IN ANY SPECS NEEDED BY JAVA COMPATIBILITY KIT ##### <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO ANY FRAMEMAKER SPECIFICATION HERE #####</a> </ul>  ',non-directive
'<h2>Related Documentation</h2>  For overviews, tutorials, examples, guides, and tool documentation, please see: <ul>   ',non-directive
'<li><a href=\"\">##### REFER TO NON-SPEC DOCUMENTATION HERE #####</a> </ul> ',non-directive
'-->  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Closes this dialog\'s tray, disposing its widgets.    @throws _ClassElement_ if the tray was not open ',non-directive
' Closes this dialog\'s tray, disposing its widgets.   ',non-directive
?,non-directive
'@throws _ClassElement_ if the tray was not open ',directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns whether or not context help is available for this dialog. This  can affect whether or not the dialog will display additional help  mechanisms such as a help control in the button bar.    @return whether or not context help is available for this dialog ',directive
' Returns whether or not context help is available for this dialog. ',non-directive
'This  can affect whether or not the dialog will display additional help  mechanisms such as a help control in the button bar.   ',directive
?,non-directive
'@return whether or not context help is available for this dialog ',non-directive
' The tray dialog\'s default layout is a modified version of the default  <code>Window</code> layout that can accomodate a tray, however it still  conforms to the description of the <code>Window</code> default layout.  <p>  Note: Trays may not be supported with all custom layouts on the dialog\'s  Shell. To avoid problems, use a single outer <code>Composite</code> for  your dialog area, and set your custom layout on that <code>Composite</code>.  </p>    @see _ClassPathElement_#_ClassElement_()  @return a newly created layout or <code>null</code> for no layout ',directive
' The tray dialog\'s default layout is a modified version of the default  <code>Window</code> layout that can accomodate a tray, however it still  conforms to the description of the <code>Window</code> default layout.  ',non-directive
'<p>  Note: Trays may not be supported with all custom layouts on the dialog\'s  Shell. ',directive
'To avoid problems, use a single outer <code>Composite</code> for  your dialog area, and set your custom layout on that <code>Composite</code>.  ',directive
'</p>    ',non-directive
'@see _ClassPathElement_#_ClassElement_()  ',non-directive
'@return a newly created layout or <code>null</code> for no layout ',directive
' Returns the tray currently shown in the dialog, or <code>null</code>  if there is no tray.    @return the dialog\'s current tray, or <code>null</code> if there is none ',non-directive
' Returns the tray currently shown in the dialog, or <code>null</code>  if there is no tray.   ',directive
?,non-directive
'@return the dialog\'s current tray, or <code>null</code> if there is none ',directive
' Constructs the tray\'s widgets and displays the tray in this dialog. The  dialog\'s size will be adjusted to accomodate the tray.    @param tray the tray to show in this dialog  @throws _ClassElement_ if the dialog already has a tray open  @throws _ClassElement_ if the dialog does not support trays,             for example if it uses a custom layout. ',non-directive
' Constructs the tray\'s widgets and displays the tray in this dialog. ',non-directive
'The  dialog\'s size will be adjusted to accomodate the tray.   ',non-directive
?,non-directive
'@param tray the tray to show in this dialog  ',non-directive
'@throws _ClassElement_ if the dialog already has a tray open  ',directive
'@throws _ClassElement_ if the dialog does not support trays,             for example if it uses a custom layout. ',directive
' Sets whether or not context help is available for this dialog. This  can affect whether or not the dialog will display additional help  mechanisms such as a help control in the button bar.    @param _ClassElement_ whether or not context help is available for the dialog ',directive
' Sets whether or not context help is available for this dialog. ',non-directive
'This  can affect whether or not the dialog will display additional help  mechanisms such as a help control in the button bar.   ',directive
?,non-directive
'@param _ClassElement_ whether or not context help is available for the dialog ',non-directive
' Tests if dialogs that have help control should show it  all the time or only when explicitly requested for  each dialog instance.    @return <code>true</code> if dialogs that support help  control should show it by default, <code>false</code> otherwise.  @since _ClassPathElement_ ',directive
' Tests if dialogs that have help control should show it  all the time or only when explicitly requested for  each dialog instance.   ',non-directive
?,non-directive
'@return <code>true</code> if dialogs that support help  control should show it by default, <code>false</code> otherwise.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Sets whether JFace dialogs that support help control should  show the control by default. If set to <code>false</code>,   help control can still be shown on a per-dialog basis.    @param _ClassElement_ <code>true</code> to show the help  control, <code>false</code> otherwise.  @since _ClassPathElement_ ',directive
' Sets whether JFace dialogs that support help control should  show the control by default. ',non-directive
'If set to <code>false</code>,   help control can still be shown on a per-dialog basis.   ',non-directive
?,non-directive
'@param _ClassElement_ <code>true</code> to show the help  control, <code>false</code> otherwise.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Button id for an \"Ok\" button (value 0). ',non-directive
' Button id for an \"Ok\" button (value 0). ',non-directive
' Button id for a \"Cancel\" button (value 1). ',non-directive
' Button id for a \"Cancel\" button (value 1). ',non-directive
' Button id for a \"Yes\" button (value 2). ',non-directive
' Button id for a \"Yes\" button (value 2). ',non-directive
' Button id for a \"No\" button (value 3). ',non-directive
' Button id for a \"No\" button (value 3). ',non-directive
' Button id for a \"Yes to All\" button (value 4). ',non-directive
' Button id for a \"Yes to All\" button (value 4). ',non-directive
' Button id for a \"Skip\" button (value 5). ',non-directive
' Button id for a \"Skip\" button (value 5). ',non-directive
' Button id for a \"Stop\" button (value 6). ',non-directive
' Button id for a \"Stop\" button (value 6). ',non-directive
' Button id for an \"Abort\" button (value 7). ',non-directive
' Button id for an \"Abort\" button (value 7). ',non-directive
' Button id for a \"Retry\" button (value 8). ',non-directive
' Button id for a \"Retry\" button (value 8). ',non-directive
' Button id for an \"Ignore\" button (value 9). ',non-directive
' Button id for an \"Ignore\" button (value 9). ',non-directive
' Button id for a \"Proceed\" button (value 10). ',non-directive
' Button id for a \"Proceed\" button (value 10). ',non-directive
' Button id for an \"Open\" button (value 11). ',non-directive
' Button id for an \"Open\" button (value 11). ',non-directive
' Button id for a \"Close\" button (value 12). ',non-directive
' Button id for a \"Close\" button (value 12). ',non-directive
' Button id for a \"Details\" button (value 13). ',non-directive
' Button id for a \"Details\" button (value 13). ',non-directive
' Button id for a \"Back\" button (value 14). ',non-directive
' Button id for a \"Back\" button (value 14). ',non-directive
' Button id for a \"Next\" button (value 15). ',non-directive
' Button id for a \"Next\" button (value 15). ',non-directive
' Button id for a \"Finish\" button (value 16). ',non-directive
' Button id for a \"Finish\" button (value 16). ',non-directive
' Button id for a \"Help\" button (value 17). ',non-directive
' Button id for a \"Help\" button (value 17). ',non-directive
' Button id for a \"Select All\" button (value 18). ',non-directive
' Button id for a \"Select All\" button (value 18). ',non-directive
' Button id for a \"Deselect All\" button (value 19). ',non-directive
' Button id for a \"Deselect All\" button (value 19). ',non-directive
' Button id for a \"Select types\" button (value 20). ',non-directive
' Button id for a \"Select types\" button (value 20). ',non-directive
' Button id for a \"No to All\" button (value 21). ',non-directive
' Button id for a \"No to All\" button (value 21). ',non-directive
' Starting button id reserved for internal use by JFace (value 256). JFace  classes make ids by adding to this number. ',non-directive
' Starting button id reserved for internal use by JFace (value 256). ',directive
'JFace  classes make ids by adding to this number. ',non-directive
' Starting button id reserved for use by clients of JFace (value 1024).  Clients of JFace should make ids by adding to this number. ',directive
' Starting button id reserved for use by clients of JFace (value 1024).  ',directive
'Clients of JFace should make ids by adding to this number. ',directive
' The label for OK buttons. ',non-directive
' The label for OK buttons. ',non-directive
' The label for cancel buttons. ',non-directive
' The label for cancel buttons. ',non-directive
' The label for yes buttons. ',non-directive
' The label for yes buttons. ',non-directive
' The label for no buttons. ',non-directive
' The label for no buttons. ',non-directive
' The label for not to all buttons. ',non-directive
' The label for not to all buttons. ',non-directive
' The label for yes to all buttons. ',non-directive
' The label for yes to all buttons. ',non-directive
' The label for skip buttons. ',non-directive
' The label for skip buttons. ',non-directive
' The label for stop buttons. ',non-directive
' The label for stop buttons. ',non-directive
' The label for abort buttons. ',non-directive
' The label for abort buttons. ',non-directive
' The label for retry buttons. ',non-directive
' The label for retry buttons. ',non-directive
' The label for ignore buttons. ',non-directive
' The label for ignore buttons. ',non-directive
' The label for proceed buttons. ',non-directive
' The label for proceed buttons. ',non-directive
' The label for open buttons. ',non-directive
' The label for open buttons. ',non-directive
' The label for close buttons. ',non-directive
' The label for close buttons. ',non-directive
' The label for show details buttons. ',non-directive
' The label for show details buttons. ',non-directive
' The label for hide details buttons. ',non-directive
' The label for hide details buttons. ',non-directive
' The label for back buttons. ',non-directive
' The label for back buttons. ',non-directive
' The label for next buttons. ',non-directive
' The label for next buttons. ',non-directive
' The label for finish buttons. ',non-directive
' The label for finish buttons. ',non-directive
' The label for help buttons. ',non-directive
' The label for help buttons. ',non-directive
' Vertical margin in dialog units (value 7). ',non-directive
' Vertical margin in dialog units (value 7). ',non-directive
' Vertical spacing in dialog units (value 4). ',non-directive
' Vertical spacing in dialog units (value 4). ',non-directive
' Horizontal margin in dialog units (value 7). ',non-directive
' Horizontal margin in dialog units (value 7). ',non-directive
' Horizontal spacing in dialog units (value 4). ',non-directive
' Horizontal spacing in dialog units (value 4). ',non-directive
' Height of button bar in dialog units (value 25). ',non-directive
' Height of button bar in dialog units (value 25). ',non-directive
' Left margin in dialog units (value 20). ',non-directive
' Left margin in dialog units (value 20). ',non-directive
' Button margin in dialog units (value 4). ',non-directive
' Button margin in dialog units (value 4). ',non-directive
' Button height in dialog units (value 14).    @deprecated This constant is no longer in use.  The button heights are now determined by the layout. ',non-directive
' Button height in dialog units (value 14).   ',non-directive
?,non-directive
'@deprecated This constant is no longer in use.  ',directive
'The button heights are now determined by the layout. ',non-directive
' Button width in dialog units (value 61). ',non-directive
' Button width in dialog units (value 61). ',non-directive
' Indent in dialog units (value 21). ',non-directive
' Indent in dialog units (value 21). ',non-directive
' Small indent in dialog units (value 7). ',non-directive
' Small indent in dialog units (value 7). ',non-directive
' Entry field width in dialog units (value 200). ',non-directive
' Entry field width in dialog units (value 200). ',non-directive
' Minimum width of message area in dialog units (value 300). ',non-directive
' Minimum width of message area in dialog units (value 300). ',non-directive
' _ClassElement_ provides a simple implementation to display or hide a control  at the bottom of the parent composite. Other animations will be written as  subclasses of this class. <p>  Instances of this class can be created using an _ClassElement_.    @since _ClassPathElement_ ',directive
' _ClassElement_ provides a simple implementation to display or hide a control  at the bottom of the parent composite. ',non-directive
'Other animations will be written as  subclasses of this class. ',directive
'<p>  Instances of this class can be created using an _ClassElement_.   ',directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Constructs a new _ClassElement_ instance and passes along the  control that will be displayed or hidden.    @param control the control that will be displayed or hidden. ',non-directive
' Constructs a new _ClassElement_ instance and passes along the  control that will be displayed or hidden.   ',non-directive
?,non-directive
'@param control the control that will be displayed or hidden. ',non-directive
'the control that will be displayed or hidden ',non-directive
'the control that will be displayed or hidden ',non-directive
' Initialize the progress bar to be animated. ',non-directive
' Initialize the progress bar to be animated. ',non-directive
' Initialize the progress bar.    @param max             The maximum value. ',non-directive
' Initialize the progress bar.   ',non-directive
?,non-directive
'@param max             The maximum value. ',non-directive
' Progress is done. ',non-directive
' Progress is done. ',non-directive
' Moves the progress indicator to the end. ',non-directive
' Moves the progress indicator to the end. ',non-directive
' Moves the progress indicator by the given amount of work units  @param work the amount of work to increment by. ',non-directive
' Moves the progress indicator by the given amount of work units  ',non-directive
'@param work the amount of work to increment by. ',non-directive
' Show the receiver as showing an error.  @since _ClassPathElement_ ',directive
' Show the receiver as showing an error.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Show the receiver as being paused.  @since _ClassPathElement_ ',non-directive
' Show the receiver as being paused.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Reset the progress bar to it\'s normal style.  @since _ClassPathElement_ ',non-directive
' Reset the progress bar to it\'s normal style.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Create a _ClassElement_ as a child under the given parent.    @param parent             The widgets parent ',non-directive
' Create a _ClassElement_ as a child under the given parent.   ',non-directive
?,non-directive
'@param parent             The widgets parent ',non-directive
' Create a _ClassElement_ as a child under the given parent.    @param parent             The widgets parent  @param style the SWT style constants for progress monitors created    by the receiver.  @since _ClassPathElement_ ',non-directive
' Create a _ClassElement_ as a child under the given parent.   ',non-directive
?,non-directive
'@param parent             The widgets parent  ',non-directive
'@param style the SWT style constants for progress monitors created    by the receiver.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Minimal interface to a message provider. Used for dialog pages which can  provide a message with an icon.    @since _ClassPathElement_ ',non-directive
' Minimal interface to a message provider. ',non-directive
'Used for dialog pages which can  provide a message with an icon.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the current message for this message provider.  <p>  A message provides instruction or information to the user.  </p>    @return the message, or <code>null</code> if none ',non-directive
' Returns the current message for this message provider.  ',non-directive
'<p>  A message provides instruction or information to the user.  ',non-directive
'</p>    ',non-directive
'@return the message, or <code>null</code> if none ',directive
' Returns a value indicating if the message is a an information message, a  warning message, or an error message.  <p>  Returns one of <code>NONE</code>,<code>INFORMATION</code>,  <code>WARNING</code>, or <code>ERROR</code>.  </p>    @return the message type ',directive
' Returns a value indicating if the message is a an information message, a  warning message, or an error message.  ',non-directive
'<p>  Returns one of <code>NONE</code>,<code>INFORMATION</code>,  <code>WARNING</code>, or <code>ERROR</code>.  ',directive
'</p>    ',non-directive
'@return the message type ',non-directive
' Constant for a regular message (value 0).  <p>  Typically this indicates that the message should be shown without an  icon.  </p> ',directive
' Constant for a regular message (value 0).  ',non-directive
'<p>  Typically this indicates that the message should be shown without an  icon.  ',non-directive
'</p> ',non-directive
' Constant for an info message (value 1). ',non-directive
' Constant for an info message (value 1). ',non-directive
' Constant for a warning message (value 2). ',directive
' Constant for a warning message (value 2). ',non-directive
' Constant for an error message (value 3). ',directive
' Constant for an error message (value 3). ',non-directive
' The IInputValidator is the interface for simple validators.   @see _ClassPathElement_ ',non-directive
' The IInputValidator is the interface for simple validators.   ',non-directive
'@see _ClassPathElement_ ',non-directive
' Clear blocked state from the receiver. ',non-directive
' Clear blocked state from the receiver. ',non-directive
' Set blocked state from the receiver.    @param reason             IStatus that gives the details ',non-directive
' Set blocked state from the receiver.   ',non-directive
?,non-directive
'@param reason             IStatus that gives the details ',non-directive
' The cancel button has been pressed.    @since _ClassPathElement_ ',non-directive
' The cancel button has been pressed.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' The <code>_ClassElement_</code> implementation of this method  only closes the dialog if there are no currently running runnables. ',directive
' The <code>_ClassElement_</code> implementation of this method  only closes the dialog if there are no currently running runnables. ',directive
' Clear the cursors in the dialog.    @since _ClassPathElement_ ',non-directive
' Clear the cursors in the dialog.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates the cancel button.    @param parent             the parent composite  @since _ClassPathElement_ ',non-directive
' Creates the cancel button.   ',non-directive
?,non-directive
'@param parent             the parent composite  ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns the progress monitor to use for operations run in this progress  dialog.    @return the progress monitor ',non-directive
' Returns the progress monitor to use for operations run in this progress  dialog.   ',non-directive
?,non-directive
'@return the progress monitor ',non-directive
' Returns whether the dialog should be opened before the operation is run.  Defaults to <code>true</code>    @return <code>true</code> to open the dialog before run,          <code>false</code> to only create the dialog, but not open it  @since _ClassPathElement_ ',directive
' Returns whether the dialog should be opened before the operation is run.  ',non-directive
'Defaults to <code>true</code>    ',non-directive
'@return <code>true</code> to open the dialog before run,          <code>false</code> to only create the dialog, but not open it  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Sets whether the dialog should be opened before the operation is run.  NOTE: Setting this to false and not forking a process may starve any  _ClassElement_ that tries to open the dialog later.    @param openOnRun             <code>true</code> to open the dialog before run,             <code>false</code> to only create the dialog, but not open             it  @since _ClassPathElement_ ',directive
' Sets whether the dialog should be opened before the operation is run.  ',non-directive
'NOTE: Setting this to false and not forking a process may starve any  _ClassElement_ that tries to open the dialog later.   ',directive
?,non-directive
'@param openOnRun             <code>true</code> to open the dialog before run,             <code>false</code> to only create the dialog, but not open             it  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the nesting depth of running operations.    @return the nesting depth of running operations  @since _ClassPathElement_ ',non-directive
' Returns the nesting depth of running operations.   ',non-directive
?,non-directive
'@return the nesting depth of running operations  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Increments the nesting depth of running operations.    @since _ClassPathElement_ ',non-directive
' Increments the nesting depth of running operations.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Decrements the nesting depth of running operations.    @since _ClassPathElement_   ',non-directive
' Decrements the nesting depth of running operations.   ',non-directive
?,non-directive
'@since _ClassPathElement_   ',non-directive
' Called just before the operation is run. Default behaviour is to open or  create the dialog, based on the setting of <code>getOpenOnRun</code>,  and increment the nesting depth.    @since _ClassPathElement_ ',directive
' Called just before the operation is run. ',directive
'Default behaviour is to open or  create the dialog, based on the setting of <code>getOpenOnRun</code>,  and increment the nesting depth.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Called just after the operation is run. Default behaviour is to decrement  the nesting depth, and close the dialog.    @since _ClassPathElement_ ',directive
' Called just after the operation is run. ',directive
'Default behaviour is to decrement  the nesting depth, and close the dialog.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Sets whether the progress dialog is cancelable or not.    @param cancelable             <code>true</code> if the end user can cancel this progress             dialog, and <code>false</code> if it cannot be canceled ',non-directive
' Sets whether the progress dialog is cancelable or not.   ',non-directive
?,non-directive
'@param cancelable             <code>true</code> if the end user can cancel this progress             dialog, and <code>false</code> if it cannot be canceled ',non-directive
' Helper to _OSPathElement_disable Cancel button for this dialog.    @param b             <code>true</code> to enable the cancel button, and             <code>false</code> to disable it  @since _ClassPathElement_ ',non-directive
' Helper to _OSPathElement_disable Cancel button for this dialog.   ',non-directive
?,non-directive
'@param b             <code>true</code> to enable the cancel button, and             <code>false</code> to disable it  ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a progress monitor dialog under the given shell. The dialog has a  standard title and no image. <code>open</code> is non-blocking.    @param parent             the parent shell, or <code>null</code> to create a top-level             shell ',non-directive
' Creates a progress monitor dialog under the given shell. ',non-directive
'The dialog has a  standard title and no image. ',non-directive
'<code>open</code> is non-blocking.   ',directive
?,non-directive
'@param parent             the parent shell, or <code>null</code> to create a top-level             shell ',directive
' The progress indicator control. ',non-directive
' The progress indicator control. ',non-directive
' The label control for the task. Kept for backwards compatibility. ',non-directive
' The label control for the task. ',non-directive
'Kept for backwards compatibility. ',directive
' The label control for the subtask. ',non-directive
' The label control for the subtask. ',non-directive
' The Cancel button control. ',non-directive
' The Cancel button control. ',non-directive
' Indicates whether the Cancel button is to be shown. ',non-directive
' Indicates whether the Cancel button is to be shown. ',non-directive
' Indicates whether the Cancel button is to be enabled. ',non-directive
' Indicates whether the Cancel button is to be enabled. ',non-directive
' The cursor used in the cancel button; ',non-directive
' The cursor used in the cancel button; ',non-directive
' A dialog to display one or more errors to the user, as contained in an  <code>IStatus</code> object. If an error contains additional detailed  information then a Details button is automatically supplied, which shows or  hides an error details viewer when pressed by the user.    <p>  This dialog should be considered being a \"local\" way of error handling. It  cannot be changed or replaced by \"global\" error handling facility (  <code>_ClassPathElement_</code>). If product defines  its own way of handling errors, this error dialog may cause UI inconsistency,  so until it is absolutely necessary, <code>_ClassElement_</code> should be  used.  </p>    @see _ClassPathElement_ ',directive
' A dialog to display one or more errors to the user, as contained in an  <code>IStatus</code> object. ',non-directive
'If an error contains additional detailed  information then a Details button is automatically supplied, which shows or  hides an error details viewer when pressed by the user.   ',non-directive
' <p>  This dialog should be considered being a \"local\" way of error handling. ',non-directive
'It  cannot be changed or replaced by \"global\" error handling facility (  <code>_ClassPathElement_</code>). ',directive
'If product defines  its own way of handling errors, this error dialog may cause UI inconsistency,  so until it is absolutely necessary, <code>_ClassElement_</code> should be  used.  ',directive
'</p>    ',non-directive
'@see _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Create the details button if it should be included.    @param parent             the parent composite  @since _ClassPathElement_ ',directive
' Create the details button if it should be included.   ',non-directive
?,non-directive
'@param parent             the parent composite  ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Extends <code>_ClassPathElement_()</code>. Opens an error dialog to display  the error. If you specified a mask to filter the displaying of these  children, the error dialog will only be displayed if there is at least  one child status matching the mask. ',directive
' Extends <code>_ClassPathElement_()</code>. ',non-directive
'Opens an error dialog to display  the error. ',non-directive
'If you specified a mask to filter the displaying of these  children, the error dialog will only be displayed if there is at least  one child status matching the mask. ',directive
' Opens an error dialog to display the given error. Use this method if the  error object being displayed does not contain child items, or if you wish  to display all such items without filtering.    @param parent             the parent shell of the dialog, or <code>null</code> if none  @param _ClassElement_             the title to use for this dialog, or <code>null</code> to             indicate that the default title should be used  @param message             the message to show in this dialog, or <code>null</code> to             indicate that the error\'s message should be shown as the             primary message  @param status             the error to show to the user  @return the code of the button that was pressed that resulted in this          dialog closing. This will be <code>_ClassPathElement_</code> if the OK          button was pressed, or <code>_ClassPathElement_</code> if this          dialog\'s close window decoration or the ESC key was used. ',directive
' Opens an error dialog to display the given error. ',non-directive
'Use this method if the  error object being displayed does not contain child items, or if you wish  to display all such items without filtering.   ',directive
?,non-directive
'@param parent             the parent shell of the dialog, or <code>null</code> if none  ',non-directive
'@param _ClassElement_             the title to use for this dialog, or <code>null</code> to             indicate that the default title should be used  ',directive
'@param message             the message to show in this dialog, or <code>null</code> to             indicate that the error\'s message should be shown as the             primary message  ',directive
'@param status             the error to show to the user  ',non-directive
'@return the code of the button that was pressed that resulted in this          dialog closing. ',non-directive
'This will be <code>_ClassPathElement_</code> if the OK          button was pressed, or <code>_ClassPathElement_</code> if this          dialog\'s close window decoration or the ESC key was used. ',non-directive
' Opens an error dialog to display the given error. Use this method if the  error object being displayed contains child items <it>and </it> you wish  to specify a mask which will be used to filter the displaying of these  children. The error dialog will only be displayed if there is at least  one child status matching the mask.    @param _ClassElement_             the parent shell of the dialog, or <code>null</code> if none  @param title             the title to use for this dialog, or <code>null</code> to             indicate that the default title should be used  @param message             the message to show in this dialog, or <code>null</code> to             indicate that the error\'s message should be shown as the             primary message  @param status             the error to show to the user  @param _ClassElement_             the mask to use to filter the displaying of child items, as             per <code>_ClassPathElement_</code>  @return the code of the button that was pressed that resulted in this          dialog closing. This will be <code>_ClassPathElement_</code> if the OK          button was pressed, or <code>_ClassPathElement_</code> if this          dialog\'s close window decoration or the ESC key was used.  @see _ClassPathElement_#matches(int) ',directive
' Opens an error dialog to display the given error. ',non-directive
'Use this method if the  error object being displayed contains child items <it>and </it> you wish  to specify a mask which will be used to filter the displaying of these  children. ',directive
'The error dialog will only be displayed if there is at least  one child status matching the mask.   ',directive
?,non-directive
'@param _ClassElement_             the parent shell of the dialog, or <code>null</code> if none  ',non-directive
'@param title             the title to use for this dialog, or <code>null</code> to             indicate that the default title should be used  ',directive
'@param message             the message to show in this dialog, or <code>null</code> to             indicate that the error\'s message should be shown as the             primary message  ',directive
'@param status             the error to show to the user  ',non-directive
'@param _ClassElement_             the mask to use to filter the displaying of child items, as             per <code>_ClassPathElement_</code>  ',non-directive
'@return the code of the button that was pressed that resulted in this          dialog closing. ',non-directive
'This will be <code>_ClassPathElement_</code> if the OK          button was pressed, or <code>_ClassPathElement_</code> if this          dialog\'s close window decoration or the ESC key was used.  ',non-directive
'@see _ClassPathElement_#matches(int) ',non-directive
' Returns whether the given status object should be displayed.    @param status             a status object  @param mask             a mask as per <code>_ClassPathElement_</code>  @return <code>true</code> if the given status should be displayed, and          <code>false</code> otherwise  @see _ClassPathElement_#matches(int) ',directive
' Returns whether the given status object should be displayed.   ',non-directive
?,non-directive
'@param status             a status object  ',non-directive
'@param mask             a mask as per <code>_ClassPathElement_</code>  ',non-directive
'@return <code>true</code> if the given status should be displayed, and          <code>false</code> otherwise  ',non-directive
'@see _ClassPathElement_#matches(int) ',non-directive
?,non-directive
?,non-directive
' Return whether the Details button should be included. This method is  invoked once when the dialog is built. Default implementation is tight to  default implementation of {@link #_ClassElement_(Composite)} and   displays details button if there is anything on the display list.    @return whether the Details button should be included  @since _ClassPathElement_  @see #_ClassElement_(Composite) ',directive
' Return whether the Details button should be included. ',non-directive
'This method is  invoked once when the dialog is built. ',directive
'Default implementation is tight to  default implementation of {',directive
'@link #_ClassElement_(Composite)} and   displays details button if there is anything on the display list.   ',non-directive
?,non-directive
'@return whether the Details button should be included  ',non-directive
'@since _ClassPathElement_  ',non-directive
'@see #_ClassElement_(Composite) ',non-directive
?,non-directive
?,non-directive
' Static to prevent opening of error dialogs for automated testing. ',directive
' Static to prevent opening of error dialogs for automated testing. ',directive
' Interface for a page in a multi-page dialog. ',non-directive
' Interface for a page in a multi-page dialog. ',non-directive
' Disposes the SWT resources allocated by this  dialog page. ',non-directive
' Disposes the SWT resources allocated by this  dialog page. ',directive
' Returns the top level control for this dialog page.  <p>  May return <code>null</code> if the control  has not been created yet.  </p>   @return the top level control or <code>null</code> ',directive
' Returns the top level control for this dialog page.  ',non-directive
'<p>  May return <code>null</code> if the control  has not been created yet.  ',directive
'</p>   ',non-directive
'@return the top level control or <code>null</code> ',directive
' Returns this dialog page\'s description text.   @return the description text for this dialog page,    or <code>null</code> if none ',non-directive
' Returns this dialog page\'s description text.   ',non-directive
'@return the description text for this dialog page,    or <code>null</code> if none ',directive
' Returns the current error message for this dialog page.  May be <code>null</code> to indicate no error message.  <p>  An error message should describe some error state,  as opposed to a message which may simply provide instruction  or information to the user.  </p>    @return the error message, or <code>null</code> if none ',directive
' Returns the current error message for this dialog page.  ',non-directive
'May be <code>null</code> to indicate no error message.  ',directive
'<p>  An error message should describe some error state,  as opposed to a message which may simply provide instruction  or information to the user.  ',non-directive
'</p>    ',non-directive
'@return the error message, or <code>null</code> if none ',directive
' Returns this dialog page\'s image.   @return the image for this dialog page, or <code>null</code>   if none ',non-directive
' Returns this dialog page\'s image.   ',non-directive
'@return the image for this dialog page, or <code>null</code>   if none ',directive
' Returns this dialog page\'s title.   @return the title of this dialog page,    or <code>null</code> if none ',non-directive
' Returns this dialog page\'s title.   ',non-directive
'@return the title of this dialog page,    or <code>null</code> if none ',directive
' Notifies that help has been requested for this dialog page. ',non-directive
' Notifies that help has been requested for this dialog page. ',non-directive
' Sets this dialog page\'s description text.    @param description the description text for this dialog   page, or <code>null</code> if none ',non-directive
' Sets this dialog page\'s description text.   ',non-directive
?,non-directive
'@param description the description text for this dialog   page, or <code>null</code> if none ',directive
' Sets this dialog page\'s image.   @param image the image for this dialog page,    or <code>null</code> if none ',non-directive
' Sets this dialog page\'s image.   ',non-directive
'@param image the image for this dialog page,    or <code>null</code> if none ',directive
' Set this dialog page\'s title.   @param title the title of this dialog page,    or <code>null</code> if none ',non-directive
' Set this dialog page\'s title.   ',non-directive
'@param title the title of this dialog page,    or <code>null</code> if none ',directive
' Sets the visibility of this dialog page.   @param visible <code>true</code> to make this page visible,   and <code>false</code> to hide it ',non-directive
' Sets the visibility of this dialog page.   ',non-directive
'@param visible <code>true</code> to make this page visible,   and <code>false</code> to hide it ',non-directive
' An abstract base class for dialogs with a status bar and _OSPathElement_CANCEL buttons.  The status message is specified in an IStatus which can be of severity ERROR,  WARNING, INFO or OK. The OK button is enabled or disabled depending on the  status.    @since _ClassPathElement_ ',directive
' An abstract base class for dialogs with a status bar and _OSPathElement_CANCEL buttons.  ',non-directive
'The status message is specified in an IStatus which can be of severity ERROR,  WARNING, INFO or OK. ',directive
'The OK button is enabled or disabled depending on the  status.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Specifies whether status line appears to the left of the buttons  (default) or above them.    @param _ClassElement_             if <code>true</code> status line is placed above buttons; if             <code>false</code> to the right ',non-directive
' Specifies whether status line appears to the left of the buttons  (default) or above them.   ',non-directive
?,non-directive
'@param _ClassElement_             if <code>true</code> status line is placed above buttons; if             <code>false</code> to the right ',non-directive
' Update the dialog\'s status line to reflect the given status. It is safe  to call this method before the dialog has been opened.    @param status             the status to set ',directive
' Update the dialog\'s status line to reflect the given status. ',non-directive
'It is safe  to call this method before the dialog has been opened.   ',directive
?,non-directive
'@param status             the status to set ',non-directive
' Returns the last status.    @return IStatus ',non-directive
' Returns the last status.   ',non-directive
?,non-directive
'@return IStatus ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Sets the title for this dialog.    @param title             the title. ',non-directive
' Sets the title for this dialog.   ',non-directive
?,non-directive
'@param title             the title. ',non-directive
' Sets the image for this dialog.    @param image             the image. ',non-directive
' Sets the image for this dialog.   ',non-directive
?,non-directive
'@param image             the image. ',non-directive
' Creates an instance of a status dialog.    @param parent             the parent Shell of the dialog ',non-directive
' Creates an instance of a status dialog.   ',non-directive
?,non-directive
'@param parent             the parent Shell of the dialog ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Create an empty dialog settings which loads and saves its  content to a file.  Use the methods <code>load(String)</code> and <code>store(String)</code>  to load and store this dialog settings.   @param _ClassElement_ the name of the section in the settings. ',non-directive
' Create an empty dialog settings which loads and saves its  content to a file.  ',non-directive
'Use the methods <code>load(String)</code> and <code>store(String)</code>  to load and store this dialog settings.   ',non-directive
'@param _ClassElement_ the name of the section in the settings. ',non-directive
' Event object describing a page selection change. The source of these events  is a page change provider.    @see IPageChangeProvider  @see IPageChangedListener    @since _ClassPathElement_ ',non-directive
' Event object describing a page selection change. ',non-directive
'The source of these events  is a page change provider.   ',directive
?,non-directive
'@see IPageChangeProvider  ',non-directive
'@see IPageChangedListener    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the page change provider that is the source of this event.    @return the originating page change provider ',non-directive
' Returns the page change provider that is the source of this event.   ',non-directive
?,non-directive
'@return the originating page change provider ',non-directive
' Creates a new event for the given source and selected page.    @param source             the page change provider  @param _ClassElement_             the selected page. In the JFace provided dialogs this             will be an <code>IDialogPage</code>. ',non-directive
' Creates a new event for the given source and selected page.   ',non-directive
?,non-directive
'@param source             the page change provider  ',non-directive
'@param _ClassElement_             the selected page. ',non-directive
'In the JFace provided dialogs this             will be an <code>IDialogPage</code>. ',directive
' The selected page. ',non-directive
' The selected page. ',non-directive
?,non-directive
?,non-directive
' The <code>_ClassElement_</code> implementation of this  <code>Window</code> methods returns an initial size which is at least  some reasonable minimum.    @return the initial size of the dialog ',non-directive
' The <code>_ClassElement_</code> implementation of this  <code>Window</code> methods returns an initial size which is at least  some reasonable minimum.   ',directive
?,non-directive
'@return the initial size of the dialog ',non-directive
' Retained for backward compatibility.    Returns the title area composite. There is no composite in this  implementation so the shell is returned.    @return Composite  @deprecated ',non-directive
' Retained for backward compatibility.   ',directive
' Returns the title area composite. ',non-directive
'There is no composite in this  implementation so the shell is returned.   ',directive
?,non-directive
'@return Composite  ',non-directive
'@deprecated ',directive
' Returns the title image label.    @return the title image label ',non-directive
' Returns the title image label.   ',non-directive
?,non-directive
'@return the title image label ',non-directive
' Display the given error message. The currently displayed message is saved  and will be redisplayed when the error message is set to  <code>null</code>.    @param _ClassElement_             the _ClassElement_ to display or <code>null</code> ',directive
' Display the given error message. ',non-directive
'The currently displayed message is saved  and will be redisplayed when the error message is set to  <code>null</code>.   ',directive
?,non-directive
'@param _ClassElement_             the _ClassElement_ to display or <code>null</code> ',directive
' Sets the message for this dialog with an indication of what type of  message it is.  <p>  The valid message types are one of <code>NONE</code>,  <code>INFORMATION</code>,<code>WARNING</code>, or  <code>ERROR</code>.  </p>  <p>  Note that for backward compatibility, a message of type  <code>ERROR</code> is different than an error message (set using  <code>_ClassElement_</code>). An error message overrides the current  message until the error message is cleared. This method replaces the  current message and does not affect the error message.  </p>    @param _ClassElement_             the message, or <code>null</code> to clear the message  @param _ClassElement_             the message type  @since _ClassPathElement_ ',directive
' Sets the message for this dialog with an indication of what type of  message it is.  ',non-directive
'<p>  The valid message types are one of <code>NONE</code>,  <code>INFORMATION</code>,<code>WARNING</code>, or  <code>ERROR</code>.  ',directive
'</p>  <p>  Note that for backward compatibility, a message of type  <code>ERROR</code> is different than an error message (set using  <code>_ClassElement_</code>). ',directive
'An error message overrides the current  message until the error message is cleared. ',directive
'This method replaces the  current message and does not affect the error message.  ',directive
'</p>    ',non-directive
'@param _ClassElement_             the message, or <code>null</code> to clear the message  ',directive
'@param _ClassElement_             the message type  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Sets the title to be shown in the title area of this dialog.    @param _ClassElement_             the title show ',non-directive
' Sets the title to be shown in the title area of this dialog.   ',non-directive
?,non-directive
'@param _ClassElement_             the title show ',non-directive
' Sets the title bar color for this dialog.    @param color             the title bar color ',non-directive
' Sets the title bar color for this dialog.   ',non-directive
?,non-directive
'@param color             the title bar color ',non-directive
' Sets the title image to be shown in the title area of this dialog.    @param _ClassElement_             the title image to be shown ',non-directive
' Sets the title image to be shown in the title area of this dialog.   ',non-directive
?,non-directive
'@param _ClassElement_             the title image to be shown ',non-directive
' Instantiate a new title area dialog.    @param _ClassElement_             the parent SWT shell ',non-directive
' Instantiate a new title area dialog.   ',non-directive
?,non-directive
'@param _ClassElement_             the parent SWT shell ',non-directive
' Image registry key for error message image. ',directive
' Image registry key for error message image. ',non-directive
' Image registry key for banner image (value  <code>\"dialog_title_banner_image\"</code>). ',non-directive
' Image registry key for banner image (value  <code>\"dialog_title_banner_image\"</code>). ',non-directive
' Message type constant used to display an info icon with the message.    @since _ClassPathElement_  @deprecated ',non-directive
' Message type constant used to display an info icon with the message.   ',non-directive
?,non-directive
'@since _ClassPathElement_  ',non-directive
'@deprecated ',directive
' Message type constant used to display a warning icon with the message.    @since _ClassPathElement_  @deprecated ',directive
' Message type constant used to display a warning icon with the message.   ',non-directive
?,non-directive
'@since _ClassPathElement_  ',non-directive
'@deprecated ',directive
' Returns the style for the message label.    @return the style for the message label    @since _ClassPathElement_ ',non-directive
' Returns the style for the message label.   ',non-directive
?,non-directive
'@return the style for the message label    ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Create the dialog area and the button bar for the receiver.    @param parent ',non-directive
' Create the dialog area and the button bar for the receiver.   ',non-directive
?,non-directive
'@param parent ',non-directive
' Return the <code>Image</code> to be used when displaying an error.    @return image the error image ',directive
' Return the <code>Image</code> to be used when displaying an error.   ',non-directive
?,non-directive
'@return image the error image ',non-directive
' Return the <code>Image</code> to be used when displaying a warning.    @return image the warning image ',directive
' Return the <code>Image</code> to be used when displaying a warning.   ',non-directive
?,non-directive
'@return image the warning image ',non-directive
' Return the <code>Image</code> to be used when displaying information.    @return image the information image ',non-directive
' Return the <code>Image</code> to be used when displaying information.   ',non-directive
?,non-directive
'@return image the information image ',non-directive
' Return the <code>Image</code> to be used when displaying a question.    @return image the question image ',non-directive
' Return the <code>Image</code> to be used when displaying a question.   ',non-directive
?,non-directive
'@return image the question image ',non-directive
' Constructor for _ClassElement_.    @param _ClassElement_             the parent shell, or <code>null</code> to create a top-level             shell ',non-directive
' Constructor for _ClassElement_.   ',non-directive
?,non-directive
'@param _ClassElement_             the parent shell, or <code>null</code> to create a top-level             shell ',directive
' Message (a localized string). ',non-directive
' Message (a localized string). ',non-directive
' Message label is the label the message is shown on. ',non-directive
' Message label is the label the message is shown on. ',non-directive
' Return the label for the image. ',non-directive
' Return the label for the image. ',non-directive
?,non-directive
?,non-directive
' Sets the text in the decorated field which will be displayed in the  message area.    @param text             the text to be displayed in the message area    @see _ClassPathElement_#_ClassElement_(String string) ',non-directive
' Sets the text in the decorated field which will be displayed in the  message area.   ',non-directive
?,non-directive
'@param text             the text to be displayed in the message area    ',non-directive
'@see _ClassPathElement_#_ClassElement_(String string) ',non-directive
' Adds an image to decorated field to be shown in the message area.    @param image             desired image to be shown in the _ClassElement_ ',directive
' Adds an image to decorated field to be shown in the message area.   ',non-directive
?,non-directive
'@param image             desired image to be shown in the _ClassElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' (non-Javadoc)    @see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',non-directive
' (non-Javadoc)    ',non-directive
'@see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',non-directive
' Constructs a new instance of <code>_ClassElement_</code>.    @param parent             The parent shell.  @param _ClassElement_             The shell style.  @param takeFocusOnOpen             A boolean indicating whether focus should be taken by this             popup when it opens.  @param _ClassElement_             A boolean indicating whether the bounds (size and location) of             the dialog should be persisted upon close of the dialog. The             bounds can only be persisted if the dialog settings for             persisting the bounds are also specified. If a menu action             will be provided that allows the user to control this feature,             then the last known value of the user\'s setting will be used             instead of this flag.  @param _ClassElement_             A boolean indicating whether a menu for moving and resizing             the popup should be provided.  @param _ClassElement_             A boolean indicating whether actions allowing the user to             control the persisting of the dialog size and location should             be shown in the dialog menu. This parameter has no effect if             <code>_ClassElement_</code> is <code>false</code>.  @param _ClassElement_             Text to be shown in an upper title area, or <code>null</code>             if there is no title.  @param _ClassElement_             Text to be shown in a lower info area, or <code>null</code>             if there is no info area.    @see _ClassElement_#_ClassElement_()  @deprecated As of _ClassPathElement_, replaced by              {@link #_ClassElement_(Shell, int, boolean, boolean, boolean, boolean, boolean, String, String)} ',directive
' Constructs a new instance of <code>_ClassElement_</code>.   ',non-directive
?,non-directive
'@param parent             The parent shell.  ',non-directive
'@param _ClassElement_             The shell style.  ',non-directive
'@param takeFocusOnOpen             A boolean indicating whether focus should be taken by this             popup when it opens.  ',non-directive
'@param _ClassElement_             A boolean indicating whether the bounds (size and location) of             the dialog should be persisted upon close of the dialog. ',non-directive
'The             bounds can only be persisted if the dialog settings for             persisting the bounds are also specified. ',directive
'If a menu action             will be provided that allows the user to control this feature,             then the last known value of the user\'s setting will be used             instead of this flag.  ',directive
'@param _ClassElement_             A boolean indicating whether a menu for moving and resizing             the popup should be provided.  ',non-directive
'@param _ClassElement_             A boolean indicating whether actions allowing the user to             control the persisting of the dialog size and location should             be shown in the dialog menu. ',non-directive
'This parameter has no effect if             <code>_ClassElement_</code> is <code>false</code>.  ',directive
'@param _ClassElement_             Text to be shown in an upper title area, or <code>null</code>             if there is no title.  ',directive
'@param _ClassElement_             Text to be shown in a lower info area, or <code>null</code>             if there is no info area.   ',directive
?,non-directive
'@see _ClassElement_#_ClassElement_()  ',non-directive
'@deprecated As of _ClassPathElement_, replaced by              {',directive
'@link #_ClassElement_(Shell, int, boolean, boolean, boolean, boolean, boolean, String, String)} ',directive
' Constructs a new instance of <code>_ClassElement_</code>.    @param parent             The parent shell.  @param _ClassElement_             The shell style.  @param takeFocusOnOpen             A boolean indicating whether focus should be taken by this             popup when it opens.  @param _ClassElement_             A boolean indicating whether the size should be persisted upon             close of the dialog. The size can only be persisted if the             dialog settings for persisting the bounds are also specified.             If a menu action will be provided that allows the user to             control this feature and the user hasn\'t changed that setting,             then this flag is used as initial default for the menu.  @param _ClassElement_             A boolean indicating whether the location should be persisted             upon close of the dialog. The location can only be persisted             if the dialog settings for persisting the bounds are also             specified. If a menu action will be provided that allows the             user to control this feature and the user hasn\'t changed that             setting, then this flag is used as initial default for the             menu. default for the menu until the user changed it.  @param _ClassElement_             A boolean indicating whether a menu for moving and resizing             the popup should be provided.  @param _ClassElement_             A boolean indicating whether actions allowing the user to             control the persisting of the dialog bounds and location             should be shown in the dialog menu. This parameter has no             effect if <code>_ClassElement_</code> is <code>false</code>.  @param _ClassElement_             Text to be shown in an upper title area, or <code>null</code>             if there is no title.  @param _ClassElement_             Text to be shown in a lower info area, or <code>null</code>             if there is no info area.    @see _ClassElement_#_ClassElement_()    @since _ClassPathElement_ ',directive
' Constructs a new instance of <code>_ClassElement_</code>.   ',non-directive
?,non-directive
'@param parent             The parent shell.  ',non-directive
'@param _ClassElement_             The shell style.  ',non-directive
'@param takeFocusOnOpen             A boolean indicating whether focus should be taken by this             popup when it opens.  ',non-directive
'@param _ClassElement_             A boolean indicating whether the size should be persisted upon             close of the dialog. ',non-directive
'The size can only be persisted if the             dialog settings for persisting the bounds are also specified.             ',directive
'If a menu action will be provided that allows the user to             control this feature and the user hasn\'t changed that setting,             then this flag is used as initial default for the menu.  ',directive
'@param _ClassElement_             A boolean indicating whether the location should be persisted             upon close of the dialog. ',non-directive
'The location can only be persisted             if the dialog settings for persisting the bounds are also             specified. ',directive
'If a menu action will be provided that allows the             user to control this feature and the user hasn\'t changed that             setting, then this flag is used as initial default for the             menu. ',directive
'default for the menu until the user changed it.  ',non-directive
'@param _ClassElement_             A boolean indicating whether a menu for moving and resizing             the popup should be provided.  ',non-directive
'@param _ClassElement_             A boolean indicating whether actions allowing the user to             control the persisting of the dialog bounds and location             should be shown in the dialog menu. ',non-directive
'This parameter has no             effect if <code>_ClassElement_</code> is <code>false</code>.  ',directive
'@param _ClassElement_             Text to be shown in an upper title area, or <code>null</code>             if there is no title.  ',non-directive
'@param _ClassElement_             Text to be shown in a lower info area, or <code>null</code>             if there is no info area.   ',non-directive
?,non-directive
'@see _ClassElement_#_ClassElement_()    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Shell style appropriate for a simple hover popup that cannot get focus.   ',non-directive
' Shell style appropriate for a simple hover popup that cannot get focus.   ',non-directive
?,non-directive
' Shell style appropriate for an info popup that can get focus. ',non-directive
' Shell style appropriate for an info popup that can get focus. ',non-directive
' Shell style appropriate for a resizable info popup that can get focus. ',non-directive
' Shell style appropriate for a resizable info popup that can get focus. ',non-directive
' Margin width (in pixels) to be used in layouts inside popup dialogs  (value is 0). ',non-directive
' Margin width (in pixels) to be used in layouts inside popup dialogs  (value is 0). ',non-directive
' Margin height (in pixels) to be used in layouts inside popup dialogs  (value is 0). ',non-directive
' Margin height (in pixels) to be used in layouts inside popup dialogs  (value is 0). ',non-directive
' Vertical spacing (in pixels) between cells in the layouts inside popup  dialogs (value is 1). ',directive
' Vertical spacing (in pixels) between cells in the layouts inside popup  dialogs (value is 1). ',non-directive
' Vertical spacing (in pixels) between cells in the layouts inside popup  dialogs (value is 1). ',directive
' Vertical spacing (in pixels) between cells in the layouts inside popup  dialogs (value is 1). ',non-directive
' Image registry key for menu image.    @since _ClassPathElement_ ',non-directive
' Image registry key for menu image.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Image registry key for disabled menu image.    @since _ClassPathElement_ ',non-directive
' Image registry key for disabled menu image.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Abstract base implementation of a dialog page. All dialog pages are  subclasses of this one. ',directive
' Abstract base implementation of a dialog page. ',non-directive
'All dialog pages are  subclasses of this one. ',directive
' Returns the top level control for this dialog page.    @return the top level control ',non-directive
' Returns the top level control for this dialog page.   ',non-directive
?,non-directive
'@return the top level control ',non-directive
?,non-directive
?,non-directive
' Returns the symbolic font name used by dialog pages.    @return the symbolic font name ',non-directive
' Returns the symbolic font name used by dialog pages.   ',non-directive
?,non-directive
'@return the symbolic font name ',non-directive
?,non-directive
?,non-directive
' Returns the default font to use for this dialog page.    @return the font ',non-directive
' Returns the default font to use for this dialog page.   ',non-directive
?,non-directive
'@return the font ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Tests whether this page\'s UI content has already been created.    @return <code>true</code> if the control has been created, and          <code>false</code> if not ',non-directive
' Tests whether this page\'s UI content has already been created.   ',non-directive
?,non-directive
'@return <code>true</code> if the control has been created, and          <code>false</code> if not ',non-directive
' Set the control for the receiver.  @param _ClassElement_ ',non-directive
' Set the control for the receiver.  ',non-directive
'@param _ClassElement_ ',non-directive
?,non-directive
?,non-directive
' Sets or clears the error message for this page.    @param _ClassElement_             the message, or <code>null</code> to clear the error message ',directive
' Sets or clears the error message for this page.   ',non-directive
?,non-directive
'@param _ClassElement_             the message, or <code>null</code> to clear the error message ',directive
?,non-directive
?,non-directive
' Sets or clears the message for this page.  <p>  This is a shortcut for <code>_ClassElement_(_ClassElement_, NONE)</code>  </p>    @param _ClassElement_             the message, or <code>null</code> to clear the message ',non-directive
' Sets or clears the message for this page.  ',non-directive
'<p>  This is a shortcut for <code>_ClassElement_(_ClassElement_, NONE)</code>  </p>    ',non-directive
'@param _ClassElement_             the message, or <code>null</code> to clear the message ',directive
' Sets the message for this page with an indication of what type of message  it is.  <p>  The valid message types are one of <code>NONE</code>,  <code>INFORMATION</code>,<code>WARNING</code>, or  <code>ERROR</code>.  </p>  <p>  Note that for backward compatibility, a message of type  <code>ERROR</code> is different than an error message (set using  <code>_ClassElement_</code>). An error message overrides the current  message until the error message is cleared. This method replaces the  current message and does not affect the error message.  </p>    @param _ClassElement_             the message, or <code>null</code> to clear the message  @param _ClassElement_             the message type  @since _ClassPathElement_ ',directive
' Sets the message for this page with an indication of what type of message  it is.  ',non-directive
'<p>  The valid message types are one of <code>NONE</code>,  <code>INFORMATION</code>,<code>WARNING</code>, or  <code>ERROR</code>.  ',directive
'</p>  <p>  Note that for backward compatibility, a message of type  <code>ERROR</code> is different than an error message (set using  <code>_ClassElement_</code>). ',directive
'An error message overrides the current  message until the error message is cleared. ',directive
'This method replaces the  current message and does not affect the error message.  ',directive
'</p>    ',non-directive
'@param _ClassElement_             the message, or <code>null</code> to clear the message  ',directive
'@param _ClassElement_             the message type  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a new empty dialog page. ',non-directive
' Creates a new empty dialog page. ',non-directive
' Creates a new dialog page with the given title.    @param title             the title of this dialog page, or <code>null</code> if none ',non-directive
' Creates a new dialog page with the given title.   ',non-directive
?,non-directive
'@param title             the title of this dialog page, or <code>null</code> if none ',directive
' Creates a new dialog page with the given title and image.    @param title             the title of this dialog page, or <code>null</code> if none  @param image             the image for this dialog page, or <code>null</code> if none ',non-directive
' Creates a new dialog page with the given title and image.   ',non-directive
?,non-directive
'@param title             the title of this dialog page, or <code>null</code> if none  ',directive
'@param image             the image for this dialog page, or <code>null</code> if none ',directive
' A dialog is a specialized window used for narrow-focused communication with  the user.  <p>  Dialogs are usually modal. Consequently, it is generally bad practice to open  a dialog without a parent. A modal dialog without a parent is not prevented  from disappearing behind the application\'s other windows, making it very  confusing for the user.  </p>  <p>  If there is more than one modal dialog is open the second one should be  parented off of the shell of the first one otherwise it is possible that the  OS will give focus to the first dialog potentially blocking the UI.  </p> ',directive
' A dialog is a specialized window used for narrow-focused communication with  the user.  ',non-directive
'<p>  Dialogs are usually modal. ',non-directive
'Consequently, it is generally bad practice to open  a dialog without a parent. ',directive
'A modal dialog without a parent is not prevented  from disappearing behind the application\'s other windows, making it very  confusing for the user.  ',directive
'</p>  <p>  If there is more than one modal dialog is open the second one should be  parented off of the shell of the first one otherwise it is possible that the  OS will give focus to the first dialog potentially blocking the UI.  ',directive
'</p> ',non-directive
' Shortens the given text <code>_ClassElement_</code> so that its width in  pixels does not exceed the width of the given control. Overrides  characters in the center of the original string with an ellipsis (\"...\")  if necessary. If a <code>null</code> value is given, <code>null</code>  is returned.    @param _ClassElement_             the original string or <code>null</code>  @param control             the control the string will be displayed on  @return the string to display, or <code>null</code> if null was passed          in    @since _ClassPathElement_ ',directive
' Shortens the given text <code>_ClassElement_</code> so that its width in  pixels does not exceed the width of the given control. ',non-directive
'Overrides  characters in the center of the original string with an ellipsis (\"...\")  if necessary. ',directive
'If a <code>null</code> value is given, <code>null</code>  is returned.   ',directive
?,non-directive
'@param _ClassElement_             the original string or <code>null</code>  ',directive
'@param control             the control the string will be displayed on  ',non-directive
'@return the string to display, or <code>null</code> if null was passed          in    ',directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' Returns the button created when <code>_ClassElement_</code> is called  with an ID of <code>_ClassPathElement_</code>. If  <code>_ClassElement_</code> was never called with this parameter, or if  <code>_ClassElement_</code> is overridden, <code>_ClassElement_</code>  will return <code>null</code>.    @return the cancel button or <code>null</code>    @see #_ClassElement_(Composite, int, String, boolean)  @since _ClassPathElement_  @deprecated Use <code>_ClassElement_(_ClassPathElement_)</code>              instead. This method will be removed soon. ',directive
' Returns the button created when <code>_ClassElement_</code> is called  with an ID of <code>_ClassPathElement_</code>. ',non-directive
'If  <code>_ClassElement_</code> was never called with this parameter, or if  <code>_ClassElement_</code> is overridden, <code>_ClassElement_</code>  will return <code>null</code>.   ',directive
?,non-directive
'@return the cancel button or <code>null</code>    ',directive
'@see #_ClassElement_(Composite, int, String, boolean)  ',non-directive
'@since _ClassPathElement_  ',non-directive
'@deprecated Use <code>_ClassElement_(_ClassPathElement_)</code>              instead. ',directive
'This method will be removed soon. ',directive
' Set the layout data of the button to a _ClassElement_ with appropriate heights  and widths.    @param button ',non-directive
' Set the layout data of the button to a _ClassElement_ with appropriate heights  and widths.   ',non-directive
?,non-directive
'@param button ',non-directive
' Set the layout data of the button to a _ClassElement_ with appropriate heights  and widths.    @param button ',non-directive
' Set the layout data of the button to a _ClassElement_ with appropriate heights  and widths.   ',non-directive
?,non-directive
'@param button ',non-directive
' @see _ClassPathElement_#close() ',non-directive
?,non-directive
'@see _ClassPathElement_#close() ',non-directive
' Applies the dialog font to all controls that currently have the default  font.    @param control             the control to apply the font to. Font will also be applied to             its children. If the control is <code>null</code> nothing             happens. ',non-directive
' Applies the dialog font to all controls that currently have the default  font.   ',non-directive
?,non-directive
'@param control             the control to apply the font to. ',non-directive
'Font will also be applied to             its children. ',non-directive
'If the control is <code>null</code> nothing             happens. ',directive
' Return whether or not the dialog font is currently the same as the  default font.    @return boolean if the two are the same ',non-directive
' Return whether or not the dialog font is currently the same as the  default font.   ',non-directive
?,non-directive
'@return boolean if the two are the same ',non-directive
?,non-directive
?,non-directive
' Get the IDialogBlockedHandler to be used by _ClassElement_ and  _ClassElement_.    @return Returns the _ClassElement_. ',non-directive
' Get the IDialogBlockedHandler to be used by _ClassElement_ and  _ClassElement_.   ',non-directive
?,non-directive
'@return Returns the _ClassElement_. ',non-directive
' Set the IDialogBlockedHandler to be used by _ClassElement_ and  _ClassElement_.    @param _ClassElement_             The _ClassElement_ for the dialogs. ',non-directive
' Set the IDialogBlockedHandler to be used by _ClassElement_ and  _ClassElement_.   ',non-directive
?,non-directive
'@param _ClassElement_             The _ClassElement_ for the dialogs. ',non-directive
' Gets the dialog settings that should be used for remembering the bounds of  of the dialog, according to the dialog bounds strategy.    @return settings the dialog settings used to store the dialog\'s location          _OSPathElement_or size, or <code>null</code> if the dialog\'s bounds should          never be stored.    @since _ClassPathElement_  @see Dialog#_ClassElement_() ',directive
' Gets the dialog settings that should be used for remembering the bounds of  of the dialog, according to the dialog bounds strategy.   ',non-directive
?,non-directive
'@return settings the dialog settings used to store the dialog\'s location          _OSPathElement_or size, or <code>null</code> if the dialog\'s bounds should          never be stored.   ',directive
?,non-directive
'@since _ClassPathElement_  ',non-directive
'@see Dialog#_ClassElement_() ',non-directive
' Returns the initial size to use for the shell. Overridden  to check whether a size has been stored in dialog settings.  If a size has been stored, it is returned.    @return the initial size of the shell    @since _ClassPathElement_  @see #_ClassElement_()  @see #_ClassElement_() ',directive
' Returns the initial size to use for the shell. ',non-directive
'Overridden  to check whether a size has been stored in dialog settings.  ',directive
'If a size has been stored, it is returned.   ',non-directive
?,non-directive
'@return the initial size of the shell    ',non-directive
'@since _ClassPathElement_  ',non-directive
'@see #_ClassElement_()  ',non-directive
'@see #_ClassElement_() ',non-directive
' Returns the initial location to use for the shell. Overridden  to check whether the bounds of the dialog have been stored in  dialog settings.  If a location has been stored, it is returned.    @param _ClassElement_             the initial size of the shell, as returned by             <code>_ClassElement_</code>.  @return the initial location of the shell    @since _ClassPathElement_  @see #_ClassElement_()  @see #_ClassElement_() ',directive
' Returns the initial location to use for the shell. ',non-directive
'Overridden  to check whether the bounds of the dialog have been stored in  dialog settings.  ',directive
'If a location has been stored, it is returned.   ',non-directive
?,non-directive
'@param _ClassElement_             the initial size of the shell, as returned by             <code>_ClassElement_</code>.  ',non-directive
'@return the initial location of the shell    ',non-directive
'@since _ClassPathElement_  ',non-directive
'@see #_ClassElement_()  ',non-directive
'@see #_ClassElement_() ',non-directive
' Returns a boolean indicating whether the dialog should be  considered resizable when the shell style is initially  set.      This method is used to ensure that all style   bits appropriate for resizable dialogs are added to the   shell style.  Individual dialogs may always set the shell   style to ensure that a dialog is resizable, but using this  method ensures that resizable dialogs will be created with  the same set of style bits.    Style bits will never be removed based on the return value   of this method.  For example, if a dialog returns   <code>false</code>, but also sets a style bit for a   _ClassPathElement_ border, the style bit will be honored.    @return a boolean indicating whether the dialog is   resizable and should have the default style bits for  resizable dialogs    @since _ClassPathElement_ ',directive
' Returns a boolean indicating whether the dialog should be  considered resizable when the shell style is initially  set.     ',non-directive
' This method is used to ensure that all style   bits appropriate for resizable dialogs are added to the   shell style.  ',non-directive
'Individual dialogs may always set the shell   style to ensure that a dialog is resizable, but using this  method ensures that resizable dialogs will be created with  the same set of style bits.   ',non-directive
' Style bits will never be removed based on the return value   of this method.  ',directive
'For example, if a dialog returns   <code>false</code>, but also sets a style bit for a   _ClassPathElement_ border, the style bit will be honored.   ',directive
?,non-directive
'@return a boolean indicating whether the dialog is   resizable and should have the default style bits for  resizable dialogs    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a dialog instance. Note that the window will have no visual  representation (no widgets) until it is told to open. By default,  <code>open</code> blocks for dialogs.    @param _ClassElement_             the parent shell, or <code>null</code> to create a top-level             shell ',directive
' Creates a dialog instance. ',non-directive
'Note that the window will have no visual  representation (no widgets) until it is told to open. ',directive
'By default,  <code>open</code> blocks for dialogs.   ',directive
?,non-directive
'@param _ClassElement_             the parent shell, or <code>null</code> to create a top-level             shell ',directive
' Image registry key for error image (value  <code>\"dialog_error_image\"</code>).    @deprecated use              _ClassPathElement_(_ClassPathElement_) ',directive
' Image registry key for error image (value  <code>\"dialog_error_image\"</code>).   ',non-directive
?,non-directive
'@deprecated use              _ClassPathElement_(_ClassPathElement_) ',directive
' Image registry key for info image (value <code>\"dialog_info_image\"</code>).    @deprecated use              _ClassPathElement_(_ClassPathElement_) ',non-directive
' Image registry key for info image (value <code>\"dialog_info_image\"</code>).   ',non-directive
?,non-directive
'@deprecated use              _ClassPathElement_(_ClassPathElement_) ',directive
' Image registry key for question image (value  <code>\"dialog_question_image\"</code>).    @deprecated _ClassPathElement_(_ClassPathElement_) ',non-directive
' Image registry key for question image (value  <code>\"dialog_question_image\"</code>).   ',non-directive
?,non-directive
'@deprecated _ClassPathElement_(_ClassPathElement_) ',directive
' Image registry key for warning image (value  <code>\"dialog_warning_image\"</code>).    @deprecated use              _ClassPathElement_(_ClassPathElement_) ',directive
' Image registry key for warning image (value  <code>\"dialog_warning_image\"</code>).   ',non-directive
?,non-directive
'@deprecated use              _ClassPathElement_(_ClassPathElement_) ',directive
' Image registry key for info message image (value  <code>\"dialog_messasge_info_image\"</code>).    @since _ClassPathElement_ ',non-directive
' Image registry key for info message image (value  <code>\"dialog_messasge_info_image\"</code>).   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Image registry key for info message image (value  <code>\"dialog_messasge_warning_image\"</code>).    @since _ClassPathElement_ ',non-directive
' Image registry key for info message image (value  <code>\"dialog_messasge_warning_image\"</code>).   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Image registry key for info message image (value  <code>\"dialog_message_error_image\"</code>).    @since _ClassPathElement_ ',non-directive
' Image registry key for info message image (value  <code>\"dialog_message_error_image\"</code>).   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Image registry key for help image (value  <code>\"dialog_help_image\"</code>).    @since _ClassPathElement_ ',non-directive
' Image registry key for help image (value  <code>\"dialog_help_image\"</code>).   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' The ellipsis is the string that is used to represent shortened text.    @since _ClassPathElement_ ',non-directive
' The ellipsis is the string that is used to represent shortened text.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' A value that can be used for stored dialog width or height that  indicates that the default bounds should be used.    @since _ClassPathElement_ ',directive
' A value that can be used for stored dialog width or height that  indicates that the default bounds should be used.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Persist the last location of the dialog.  @since _ClassPathElement_ ',non-directive
' Persist the last location of the dialog.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Persist the last known size of the dialog.  @since _ClassPathElement_ ',non-directive
' Persist the last known size of the dialog.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' The dialog area; <code>null</code> until dialog is layed out. ',non-directive
' The dialog area; <code>null</code> until dialog is layed out. ',directive
' The button bar; <code>null</code> until dialog is layed out. ',non-directive
' The button bar; <code>null</code> until dialog is layed out. ',directive
' Create a default instance of the blocked handler which does not do  anything. ',non-directive
' Create a default instance of the blocked handler which does not do  anything. ',non-directive
' Helper class to save the _OSPathElement_disable state of a control including all its  descendent controls. ',non-directive
' Helper class to save the _OSPathElement_disable state of a control including all its  descendent controls. ',non-directive
' Saves the current _OSPathElement_disable state of the given control and its  descendents in the returned object; the controls are all disabled.    @param w             the control  @return an object capturing the _OSPathElement_disable state ',non-directive
' Saves the current _OSPathElement_disable state of the given control and its  descendents in the returned object; the controls are all disabled.   ',directive
?,non-directive
'@param w             the control  ',non-directive
'@return an object capturing the _OSPathElement_disable state ',non-directive
' Saves the current _OSPathElement_disable state of the given control and its  descendents in the returned object except for the given list of exception  cases; the controls that are saved are also disabled.    @param w             the control  @param exceptions             the list of controls to not disable (element type:             <code>Control</code>)  @return an object capturing the _OSPathElement_disable state ',non-directive
' Saves the current _OSPathElement_disable state of the given control and its  descendents in the returned object except for the given list of exception  cases; the controls that are saved are also disabled.   ',directive
?,non-directive
'@param w             the control  ',non-directive
'@param exceptions             the list of controls to not disable (element type:             <code>Control</code>)  ',non-directive
'@return an object capturing the _OSPathElement_disable state ',non-directive
' Restores the window enable state saved in this object. ',non-directive
' Restores the window enable state saved in this object. ',non-directive
' Creates a new object and saves in it the current _OSPathElement_disable state of  the given control and its descendents; the controls that are saved are  also disabled.    @param w             the control ',non-directive
' Creates a new object and saves in it the current _OSPathElement_disable state of  the given control and its descendents; the controls that are saved are  also disabled.   ',directive
?,non-directive
'@param w             the control ',non-directive
' Creates a new object and saves in it the current _OSPathElement_disable state of  the given control and its descendents except for the given list of  exception cases; the controls that are saved are also disabled.    @param w             the control  @param exceptions             the list of controls to not disable (element type:             <code>Control</code>), or <code>null</code> if none ',non-directive
' Creates a new object and saves in it the current _OSPathElement_disable state of  the given control and its descendents except for the given list of  exception cases; the controls that are saved are also disabled.   ',directive
?,non-directive
'@param w             the control  ',non-directive
'@param exceptions             the list of controls to not disable (element type:             <code>Control</code>), or <code>null</code> if none ',directive
' A _ClassElement_ defines the area to be shown in an error dialog for extra support information.  @since _ClassPathElement_  ',directive
' A _ClassElement_ defines the area to be shown in an error dialog for extra support information.  ',non-directive
'@since _ClassPathElement_  ',non-directive
' Create an area for adding support components as a child of parent.  @param parent The parent {@link Composite}  @param status The {@link IStatus} that is being displayed.  @return Control ',non-directive
' Create an area for adding support components as a child of parent.  ',non-directive
'@param parent The parent {',non-directive
'@link Composite}  ',non-directive
'@param status The {',non-directive
'@link IStatus} that is being displayed.  ',non-directive
'@return Control ',non-directive
?,non-directive
?,non-directive
' <p>  This class is the abstract superclass of all dialog trays. A tray can be opened  in any <code>_ClassElement_</code>.  </p>    @see _ClassPathElement_  @since _ClassPathElement_ ',directive
' <p>  This class is the abstract superclass of all dialog trays. ',directive
'A tray can be opened  in any <code>_ClassElement_</code>.  ',directive
'</p>    ',non-directive
'@see _ClassPathElement_  ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' The _ClassElement_ is a resusable component for adding an accessible  message area to a dialog.    When the message is normal a CLabel is used but an errors replaces the  message area with a non editable text that can take focus for use by screen  readers.    @since _ClassPathElement_ ',directive
' The _ClassElement_ is a resusable component for adding an accessible  message area to a dialog.   ',non-directive
' When the message is normal a CLabel is used but an errors replaces the  message area with a non editable text that can take focus for use by screen  readers.   ',directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Create the contents for the receiver.    @param parent             the Composite that the children will be created in ',non-directive
' Create the contents for the receiver.   ',non-directive
?,non-directive
'@param parent             the Composite that the children will be created in ',non-directive
' Set the _ClassElement_ for the title area. In most cases this will be a copy  of the _ClassElement_ used in _ClassElement_.    @param _ClassElement_             the _ClassElement_ for the title  @see #_ClassElement_(Object) ',non-directive
' Set the _ClassElement_ for the title area. ',non-directive
'In most cases this will be a copy  of the _ClassElement_ used in _ClassElement_.   ',directive
?,non-directive
'@param _ClassElement_             the _ClassElement_ for the title  ',non-directive
'@see #_ClassElement_(Object) ',non-directive
' Set the _ClassElement_ for the _ClassElement_. In most cases this will be a copy  of the _ClassElement_ used in _ClassElement_.    @param _ClassElement_             the _ClassElement_ for the message area composite.  @see #_ClassElement_(Object) ',non-directive
' Set the _ClassElement_ for the _ClassElement_. ',non-directive
'In most cases this will be a copy  of the _ClassElement_ used in _ClassElement_.   ',directive
?,non-directive
'@param _ClassElement_             the _ClassElement_ for the message area composite.  ',non-directive
'@see #_ClassElement_(Object) ',non-directive
' Show the title.    @param _ClassElement_             String for the titke  @param _ClassElement_             Image or <code>null</code> ',non-directive
' Show the title.   ',non-directive
?,non-directive
'@param _ClassElement_             String for the titke  ',non-directive
'@param _ClassElement_             Image or <code>null</code> ',directive
' Enable the title and disable the message text and image. ',non-directive
' Enable the title and disable the message text and image. ',non-directive
' Show the new message in the message text and update the image. Base the  background color on whether or not there are errors.    @param _ClassElement_             The new value for the message  @param _ClassElement_             One of the IMessageProvider constants. If _ClassElement_ is             _ClassPathElement_ show the title.  @see IMessageProvider ',directive
' Show the new message in the message text and update the image. ',non-directive
'Base the  background color on whether or not there are errors.   ',directive
?,non-directive
'@param _ClassElement_             The new value for the message  ',non-directive
'@param _ClassElement_             One of the IMessageProvider constants. ',non-directive
'If _ClassElement_ is             _ClassPathElement_ show the title.  ',directive
'@see IMessageProvider ',non-directive
' Clear the error message. Restore the previously displayed message if  there is one, if not restore the title label.    ',directive
' Clear the error message. ',non-directive
'Restore the previously displayed message if  there is one, if not restore the title label.    ',directive
?,non-directive
' Create a new instance of the receiver. ',non-directive
' Create a new instance of the receiver. ',non-directive
' Minimal interface to a page change provider. Used for dialogs which can  switch between multiple pages.    @since _ClassPathElement_ ',directive
' Minimal interface to a page change provider. ',non-directive
'Used for dialogs which can  switch between multiple pages.   ',directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the currently selected page in the dialog.    @return the selected page in the dialog or <code>null</code> if none is          selected. The type may be domain specific. In           the JFace provided dialogs this will be an instance of           <code>IDialogPage</code>.  ',directive
' Returns the currently selected page in the dialog.   ',non-directive
?,non-directive
'@return the selected page in the dialog or <code>null</code> if none is          selected. ',directive
'The type may be domain specific. ',directive
'In           the JFace provided dialogs this will be an instance of           <code>IDialogPage</code>.  ',directive
' Adds a listener for page changes in this page change provider. Has no  effect if an identical listener is already registered.    @param listener             a page changed listener ',non-directive
' Adds a listener for page changes in this page change provider. ',non-directive
'Has no  effect if an identical listener is already registered.   ',directive
?,non-directive
'@param listener             a page changed listener ',non-directive
' Removes the given page change listener from this page change provider.  Has no effect if an identical listener is not registered.    @param listener             a page changed listener ',non-directive
' Removes the given page change listener from this page change provider.  ',non-directive
'Has no effect if an identical listener is not registered.   ',directive
?,non-directive
'@param listener             a page changed listener ',non-directive
' An interface to a storage mechanism for making dialog settings persistent.  The store manages a collection of _OSPathElement_value pairs. The keys must be strings  and the values can be either, strings or array of strings. Convenience API to  convert primitive types to strings is provided. ',directive
' An interface to a storage mechanism for making dialog settings persistent.  ',non-directive
'The store manages a collection of _OSPathElement_value pairs. ',non-directive
'The keys must be strings  and the values can be either, strings or array of strings. ',directive
'Convenience API to  convert primitive types to strings is provided. ',directive
' Create a new section in the receiver and return it.    @param name             the name of the new section  @return the new section ',non-directive
' Create a new section in the receiver and return it.   ',non-directive
?,non-directive
'@param name             the name of the new section  ',non-directive
'@return the new section ',non-directive
' Add a section in the receiver.    @param section             the section to be added ',non-directive
' Add a section in the receiver.   ',non-directive
?,non-directive
'@param section             the section to be added ',non-directive
' Returns the value of the given key in this dialog settings.    @param key             the key  @return the value, or <code>null</code> if none ',non-directive
' Returns the value of the given key in this dialog settings.   ',non-directive
?,non-directive
'@param key             the key  ',non-directive
'@return the value, or <code>null</code> if none ',directive
' Returns the value, an array of strings, of the given key in this dialog  settings.    @param key             the key  @return the array of string, or <code>null</code> if none ',non-directive
' Returns the value, an array of strings, of the given key in this dialog  settings.   ',non-directive
?,non-directive
'@param key             the key  ',non-directive
'@return the array of string, or <code>null</code> if none ',directive
' Convenience API. Convert the value of the given key in this dialog  settings to a boolean and return it.    @param key             the key  @return the boolean value, or <code>false</code> if none ',non-directive
' Convenience API. ',non-directive
'Convert the value of the given key in this dialog  settings to a boolean and return it.   ',non-directive
?,non-directive
'@param key             the key  ',non-directive
'@return the boolean value, or <code>false</code> if none ',non-directive
' Convenience API. Convert the value of the given key in this dialog  settings to a double and return it.    @param key             the key  @return the value coverted to double, or throws          <code>_ClassElement_</code> if none    @exception _ClassElement_                 if the string value does not contain a parsable number.  @see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',non-directive
' Convenience API. ',non-directive
'Convert the value of the given key in this dialog  settings to a double and return it.   ',non-directive
?,non-directive
'@param key             the key  ',non-directive
'@return the value coverted to double, or throws          <code>_ClassElement_</code> if none    ',directive
'@exception _ClassElement_                 if the string value does not contain a parsable number.  ',directive
'@see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',non-directive
' Convenience API. Convert the value of the given key in this dialog  settings to a float and return it.    @param key             the key  @return the value coverted to float, or throws          <code>_ClassElement_</code> if none    @exception _ClassElement_                 if the string value does not contain a parsable number.  @see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',non-directive
' Convenience API. ',non-directive
'Convert the value of the given key in this dialog  settings to a float and return it.   ',non-directive
?,non-directive
'@param key             the key  ',non-directive
'@return the value coverted to float, or throws          <code>_ClassElement_</code> if none    ',directive
'@exception _ClassElement_                 if the string value does not contain a parsable number.  ',directive
'@see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',non-directive
' Convenience API. Convert the value of the given key in this dialog  settings to a int and return it.    @param key             the key  @return the value coverted to int, or throws          <code>_ClassElement_</code> if none    @exception _ClassElement_                 if the string value does not contain a parsable number.  @see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',non-directive
' Convenience API. ',non-directive
'Convert the value of the given key in this dialog  settings to a int and return it.   ',non-directive
?,non-directive
'@param key             the key  ',non-directive
'@return the value coverted to int, or throws          <code>_ClassElement_</code> if none    ',directive
'@exception _ClassElement_                 if the string value does not contain a parsable number.  ',directive
'@see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',non-directive
' Convenience API. Convert the value of the given key in this dialog  settings to a long and return it.    @param key             the key  @return the value coverted to long, or throws          <code>_ClassElement_</code> if none    @exception _ClassElement_                 if the string value does not contain a parsable number.  @see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',non-directive
' Convenience API. ',non-directive
'Convert the value of the given key in this dialog  settings to a long and return it.   ',non-directive
?,non-directive
'@param key             the key  ',non-directive
'@return the value coverted to long, or throws          <code>_ClassElement_</code> if none    ',directive
'@exception _ClassElement_                 if the string value does not contain a parsable number.  ',directive
'@see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',non-directive
' Returns the IDialogSettings name.    @return the name ',non-directive
' Returns the IDialogSettings name.   ',non-directive
?,non-directive
'@return the name ',non-directive
' Returns the section with the given name in this dialog settings.    @param _ClassElement_             the key  @return IDialogSettings (the section), or <code>null</code> if none ',non-directive
' Returns the section with the given name in this dialog settings.   ',non-directive
?,non-directive
'@param _ClassElement_             the key  ',non-directive
'@return IDialogSettings (the section), or <code>null</code> if none ',directive
' Returns all the sections in this dialog settings.    @return the section, or <code>null</code> if none ',non-directive
' Returns all the sections in this dialog settings.   ',non-directive
?,non-directive
'@return the section, or <code>null</code> if none ',directive
' Load a dialog settings from a stream and fill the receiver with its  content.    @param reader             a Reader specifying the stream where the settings are read             from.  @throws IOException ',non-directive
' Load a dialog settings from a stream and fill the receiver with its  content.   ',non-directive
?,non-directive
'@param reader             a Reader specifying the stream where the settings are read             from.  ',non-directive
'@throws IOException ',non-directive
' Load a dialog settings from a file and fill the receiver with its  content.    @param _ClassElement_             the name of the file the settings are read from.  @throws IOException ',non-directive
' Load a dialog settings from a file and fill the receiver with its  content.   ',non-directive
?,non-directive
'@param _ClassElement_             the name of the file the settings are read from.  ',non-directive
'@throws IOException ',non-directive
' Adds the pair <code>_OSPathElement_value</code> to this dialog settings.    @param key             the key.  @param value             the value to be associated with the <code>key</code> ',non-directive
' Adds the pair <code>_OSPathElement_value</code> to this dialog settings.   ',non-directive
?,non-directive
'@param key             the key.  ',non-directive
'@param value             the value to be associated with the <code>key</code> ',non-directive
' Convenience API. Converts the double <code>value</code> to a string and  adds the pair <code>_OSPathElement_value</code> to this dialog settings.    @param key             the key.  @param value             the value to be associated with the <code>key</code> ',non-directive
' Convenience API. ',non-directive
'Converts the double <code>value</code> to a string and  adds the pair <code>_OSPathElement_value</code> to this dialog settings.   ',non-directive
?,non-directive
'@param key             the key.  ',non-directive
'@param value             the value to be associated with the <code>key</code> ',non-directive
' Convenience API. Converts the float <code>value</code> to a string and  adds the pair <code>_OSPathElement_value</code> to this dialog settings.    @param key             the key.  @param value             the value to be associated with the <code>key</code> ',non-directive
' Convenience API. ',non-directive
'Converts the float <code>value</code> to a string and  adds the pair <code>_OSPathElement_value</code> to this dialog settings.   ',non-directive
?,non-directive
'@param key             the key.  ',non-directive
'@param value             the value to be associated with the <code>key</code> ',non-directive
' Convenience API. Converts the int <code>value</code> to a string and  adds the pair <code>_OSPathElement_value</code> to this dialog settings.    @param key             the key.  @param value             the value to be associated with the <code>key</code> ',non-directive
' Convenience API. ',non-directive
'Converts the int <code>value</code> to a string and  adds the pair <code>_OSPathElement_value</code> to this dialog settings.   ',non-directive
?,non-directive
'@param key             the key.  ',non-directive
'@param value             the value to be associated with the <code>key</code> ',non-directive
' Convenience API. Converts the long <code>value</code> to a string and  adds the pair <code>_OSPathElement_value</code> to this dialog settings.    @param key             the key.  @param value             the value to be associated with the <code>key</code> ',non-directive
' Convenience API. ',non-directive
'Converts the long <code>value</code> to a string and  adds the pair <code>_OSPathElement_value</code> to this dialog settings.   ',non-directive
?,non-directive
'@param key             the key.  ',non-directive
'@param value             the value to be associated with the <code>key</code> ',non-directive
' Adds the pair <code>_OSPathElement_value</code> to this dialog settings.    @param key             the key.  @param value             the value to be associated with the <code>key</code> ',non-directive
' Adds the pair <code>_OSPathElement_value</code> to this dialog settings.   ',non-directive
?,non-directive
'@param key             the key.  ',non-directive
'@param value             the value to be associated with the <code>key</code> ',non-directive
' Convenience API. Converts the boolean <code>value</code> to a string  and adds the pair <code>_OSPathElement_value</code> to this dialog settings.    @param key             the key.  @param value             the value to be associated with the <code>key</code> ',non-directive
' Convenience API. ',non-directive
'Converts the boolean <code>value</code> to a string  and adds the pair <code>_OSPathElement_value</code> to this dialog settings.   ',non-directive
?,non-directive
'@param key             the key.  ',non-directive
'@param value             the value to be associated with the <code>key</code> ',non-directive
' Save a dialog settings to a stream    @param writer             a Writer specifying the stream the settings are written in.  @throws IOException ',non-directive
' Save a dialog settings to a stream    ',non-directive
'@param writer             a Writer specifying the stream the settings are written in.  ',non-directive
'@throws IOException ',non-directive
' Save a dialog settings to a file.    @param _ClassElement_             the name of the file the settings are written in.  @throws IOException ',non-directive
' Save a dialog settings to a file.   ',non-directive
?,non-directive
'@param _ClassElement_             the name of the file the settings are written in.  ',non-directive
'@throws IOException ',non-directive
' Event object describing an <code>IDialogPage</code> in the midst of changing.    @see IPageChangingListener  @since _ClassPathElement_ ',non-directive
' Event object describing an <code>IDialogPage</code> in the midst of changing.   ',non-directive
?,non-directive
'@see IPageChangingListener  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a new event for the given source, selected (current) page and  direction.    @param source             the page changing provider (the source of this event)  @param _ClassElement_             the current page. In the JFace provided dialogs this will be             an <code>IDialogPage</code>.  @param _ClassElement_             the target page. In the JFace provided dialogs this will be an             <code>IDialogPage</code>. ',non-directive
' Creates a new event for the given source, selected (current) page and  direction.   ',non-directive
?,non-directive
'@param source             the page changing provider (the source of this event)  ',non-directive
'@param _ClassElement_             the current page. ',non-directive
'In the JFace provided dialogs this will be             an <code>IDialogPage</code>.  ',directive
'@param _ClassElement_             the target page. ',non-directive
'In the JFace provided dialogs this will be an             <code>IDialogPage</code>. ',directive
' Public field that dictates if the page change will successfully change.    Set this field to <code>false</code> to prevent the page from changing.      Default value is <code>true</code>. ',non-directive
' Public field that dictates if the page change will successfully change.   ',non-directive
' Set this field to <code>false</code> to prevent the page from changing.     ',directive
' Default value is <code>true</code>. ',directive
' Factory for control animators used by JFace to animate the display of an SWT  Control. Through the use of the method  {@link _ClassPathElement_#_ClassElement_(_ClassElement_)}   a new type of animator factory can be plugged into JFace.    @since _ClassPathElement_  @deprecated as of _ClassPathElement_, this class is no longer used. ',non-directive
' Factory for control animators used by JFace to animate the display of an SWT  Control. ',directive
'Through the use of the method  {',directive
'@link _ClassPathElement_#_ClassElement_(_ClassElement_)}   a new type of animator factory can be plugged into JFace.   ',directive
?,non-directive
'@since _ClassPathElement_  ',non-directive
'@deprecated as of _ClassPathElement_, this class is no longer used. ',directive
?,non-directive
?,non-directive
' A listener which is notified when the current page of a multi-page dialog is  changing. Use this listener to perform long-running work that should only be  executed once, when the page is in the process of changing, rather then  during validation of page controls.    @see _ClassElement_  @since _ClassPathElement_ ',directive
' A listener which is notified when the current page of a multi-page dialog is  changing. ',non-directive
'Use this listener to perform long-running work that should only be  executed once, when the page is in the process of changing, rather then  during validation of page controls.   ',directive
?,non-directive
'@see _ClassElement_  ',non-directive
'@since _ClassPathElement_ ',non-directive
' The IDialogBlockedHandler is the handler used by  JFace to provide extra information when a  blocking has occured. There is one static instance  of this class used by _ClassElement_ and _ClassElement_.  @see _ClassPathElement_#_ClassElement_()  @see  _ClassPathElement_#_ClassElement_(IStatus)  @see _ClassElement_  @since _ClassPathElement_ ',non-directive
' The IDialogBlockedHandler is the handler used by  JFace to provide extra information when a  blocking has occured. ',directive
'There is one static instance  of this class used by _ClassElement_ and _ClassElement_.  ',directive
'@see _ClassPathElement_#_ClassElement_()  ',non-directive
'@see  _ClassPathElement_#_ClassElement_(IStatus)  ',non-directive
'@see _ClassElement_  ',non-directive
'@since _ClassPathElement_ ',non-directive
' The blockage has been cleared. Clear the  extra information and resume. ',non-directive
' The blockage has been cleared. ',directive
'Clear the  extra information and resume. ',directive
' A blockage has occured. Show the blockage and   forward any actions to _ClassElement_.   <b>NOTE:</b> This will open any blocked notification immediately  even if there is a modal shell open.    @param _ClassElement_ The shell this is being sent from. If the parent  shell is <code>null</code> the behavior will be the same as  IDialogBlockedHandler#_ClassElement_(IProgressMonitor, IStatus, String)    @param blocking The monitor to forward to. This is most  important for calls to <code>cancel()</code>.  @param _ClassElement_ The status that describes the blockage  @param _ClassElement_ The name of the locked operation.  @see IDialogBlockedHandler#_ClassElement_(IProgressMonitor, IStatus, String) ',directive
' A blockage has occured. ',non-directive
'Show the blockage and   forward any actions to _ClassElement_.   ',non-directive
'<b>NOTE:</b> This will open any blocked notification immediately  even if there is a modal shell open.   ',directive
?,non-directive
'@param _ClassElement_ The shell this is being sent from. ',non-directive
'If the parent  shell is <code>null</code> the behavior will be the same as  IDialogBlockedHandler#_ClassElement_(IProgressMonitor, IStatus, String)    ',directive
'@param blocking The monitor to forward to. ',non-directive
'This is most  important for calls to <code>cancel()</code>.  ',directive
'@param _ClassElement_ The status that describes the blockage  ',non-directive
'@param _ClassElement_ The name of the locked operation.  ',non-directive
'@see IDialogBlockedHandler#_ClassElement_(IProgressMonitor, IStatus, String) ',non-directive
' A blockage has occured. Show the blockage when there is   no longer any modal shells in the UI and forward any actions   to _ClassElement_.     <b>NOTE:</b> As no shell has been specified this method will  not open any blocked notification until all other modal shells  have been closed.    @param blocking The monitor to forward to. This is most  important for calls to <code>cancel()</code>.  @param _ClassElement_ The status that describes the blockage  @param _ClassElement_ The name of the locked operation. ',directive
' A blockage has occured. ',non-directive
'Show the blockage when there is   no longer any modal shells in the UI and forward any actions   to _ClassElement_.    ',non-directive
' <b>NOTE:</b> As no shell has been specified this method will  not open any blocked notification until all other modal shells  have been closed.   ',directive
?,non-directive
'@param blocking The monitor to forward to. ',non-directive
'This is most  important for calls to <code>cancel()</code>.  ',directive
'@param _ClassElement_ The status that describes the blockage  ',non-directive
'@param _ClassElement_ The name of the locked operation. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Gets a button in this dialog\'s button bar.    @param index             the index of the button in the dialog\'s button bar  @return a button in the dialog\'s button bar ',non-directive
' Gets a button in this dialog\'s button bar.   ',non-directive
?,non-directive
'@param index             the index of the button in the dialog\'s button bar  ',non-directive
'@return a button in the dialog\'s button bar ',non-directive
' Handle the shell close. Set the return code to <code>_ClassPathElement_</code>  as there has been no explicit close by the user.    @see _ClassPathElement_#_ClassElement_() ',non-directive
' Handle the shell close. ',non-directive
'Set the return code to <code>_ClassPathElement_</code>  as there has been no explicit close by the user.   ',non-directive
?,non-directive
'@see _ClassPathElement_#_ClassElement_() ',non-directive
' Opens this message dialog, creating it first if it has not yet been created.  <p>  This method waits until the dialog is closed by the end user, and then it  returns the dialog\'s return code. The dialog\'s return code is either the  index of the button the user pressed, or {@link SWT#DEFAULT} if the dialog  has been closed by other means.  </p>   @return the return code   @see _ClassPathElement_#open() ',non-directive
' Opens this message dialog, creating it first if it has not yet been created.  ',non-directive
'<p>  This method waits until the dialog is closed by the end user, and then it  returns the dialog\'s return code. ',directive
'The dialog\'s return code is either the  index of the button the user pressed, or {',directive
'@link SWT#DEFAULT} if the dialog  has been closed by other means.  ',directive
'</p>   ',non-directive
'@return the return code   ',non-directive
'@see _ClassPathElement_#open() ',non-directive
' Convenience method to open a simple confirm (_OSPathElement_Cancel) dialog.    @param parent             the parent shell of the dialog, or <code>null</code> if none  @param title             the dialog\'s title, or <code>null</code> if none  @param message             the message  @return <code>true</code> if the user presses the OK button,          <code>false</code> otherwise ',non-directive
' Convenience method to open a simple confirm (_OSPathElement_Cancel) dialog.   ',non-directive
?,non-directive
'@param parent             the parent shell of the dialog, or <code>null</code> if none  ',directive
'@param title             the dialog\'s title, or <code>null</code> if none  ',directive
'@param message             the message  ',non-directive
'@return <code>true</code> if the user presses the OK button,          <code>false</code> otherwise ',non-directive
' Convenience method to open a standard error dialog.    @param parent             the parent shell of the dialog, or <code>null</code> if none  @param title             the dialog\'s title, or <code>null</code> if none  @param message             the message ',directive
' Convenience method to open a standard error dialog.   ',non-directive
?,non-directive
'@param parent             the parent shell of the dialog, or <code>null</code> if none  ',directive
'@param title             the dialog\'s title, or <code>null</code> if none  ',directive
'@param message             the message ',non-directive
' Convenience method to open a standard information dialog.    @param parent             the parent shell of the dialog, or <code>null</code> if none  @param title             the dialog\'s title, or <code>null</code> if none  @param message             the message ',non-directive
' Convenience method to open a standard information dialog.   ',non-directive
?,non-directive
'@param parent             the parent shell of the dialog, or <code>null</code> if none  ',directive
'@param title             the dialog\'s title, or <code>null</code> if none  ',directive
'@param message             the message ',non-directive
' Convenience method to open a simple _OSPathElement_No question dialog.    @param parent             the parent shell of the dialog, or <code>null</code> if none  @param title             the dialog\'s title, or <code>null</code> if none  @param message             the message  @return <code>true</code> if the user presses the Yes button,          <code>false</code> otherwise ',non-directive
' Convenience method to open a simple _OSPathElement_No question dialog.   ',non-directive
?,non-directive
'@param parent             the parent shell of the dialog, or <code>null</code> if none  ',directive
'@param title             the dialog\'s title, or <code>null</code> if none  ',directive
'@param message             the message  ',non-directive
'@return <code>true</code> if the user presses the Yes button,          <code>false</code> otherwise ',non-directive
' Convenience method to open a standard warning dialog.    @param parent             the parent shell of the dialog, or <code>null</code> if none  @param title             the dialog\'s title, or <code>null</code> if none  @param message             the message ',directive
' Convenience method to open a standard warning dialog.   ',non-directive
?,non-directive
'@param parent             the parent shell of the dialog, or <code>null</code> if none  ',directive
'@param title             the dialog\'s title, or <code>null</code> if none  ',directive
'@param message             the message ',non-directive
?,non-directive
?,non-directive
' Return whether or not we should apply the workaround where we take focus  for the default button or if that should be determined by the dialog. By  default only return true if the custom area is a label or CLabel that  cannot take focus.    @return boolean ',directive
' Return whether or not we should apply the workaround where we take focus  for the default button or if that should be determined by the dialog. ',directive
'By  default only return true if the custom area is a label or CLabel that  cannot take focus.   ',directive
?,non-directive
'@return boolean ',non-directive
?,non-directive
?,non-directive
' An accessor for the labels to use on the buttons.    @return The button labels to used; never <code>null</code>. ',directive
' An accessor for the labels to use on the buttons.   ',non-directive
?,non-directive
'@return The button labels to used; never <code>null</code>. ',directive
' An accessor for the index of the default button in the button array.    @return The default button index. ',non-directive
' An accessor for the index of the default button in the button array.   ',non-directive
?,non-directive
'@return The default button index. ',non-directive
' A mutator for the array of buttons in the button bar.    @param buttons             The buttons in the button bar; must not be <code>null</code>. ',directive
' A mutator for the array of buttons in the button bar.   ',non-directive
?,non-directive
'@param buttons             The buttons in the button bar; must not be <code>null</code>. ',directive
' A mutator for the button labels.    @param _ClassElement_             The button labels to use; must not be <code>null</code>. ',directive
' A mutator for the button labels.   ',non-directive
?,non-directive
'@param _ClassElement_             The button labels to use; must not be <code>null</code>. ',directive
' Constant for no image (value 0).    @see #_ClassElement_(Shell, String, Image, String, int, String[], int) ',non-directive
' Constant for no image (value 0).   ',non-directive
?,non-directive
'@see #_ClassElement_(Shell, String, Image, String, int, String[], int) ',non-directive
' Constant for the error image, or a simple dialog with the error image and a single OK button (value 1).    @see #_ClassElement_(Shell, String, Image, String, int, String[], int)  @see #open(int, Shell, String, String, int) ',directive
' Constant for the error image, or a simple dialog with the error image and a single OK button (value 1).   ',directive
?,non-directive
'@see #_ClassElement_(Shell, String, Image, String, int, String[], int)  ',non-directive
'@see #open(int, Shell, String, String, int) ',non-directive
' Constant for the info image, or a simple dialog with the info image and a single OK button (value 2).    @see #_ClassElement_(Shell, String, Image, String, int, String[], int)  @see #open(int, Shell, String, String, int) ',non-directive
' Constant for the info image, or a simple dialog with the info image and a single OK button (value 2).   ',directive
?,non-directive
'@see #_ClassElement_(Shell, String, Image, String, int, String[], int)  ',non-directive
'@see #open(int, Shell, String, String, int) ',non-directive
' Constant for the question image, or a simple dialog with the question image and _OSPathElement_No buttons (value 3).    @see #_ClassElement_(Shell, String, Image, String, int, String[], int)  @see #open(int, Shell, String, String, int) ',non-directive
' Constant for the question image, or a simple dialog with the question image and _OSPathElement_No buttons (value 3).   ',directive
?,non-directive
'@see #_ClassElement_(Shell, String, Image, String, int, String[], int)  ',non-directive
'@see #open(int, Shell, String, String, int) ',non-directive
' Constant for the warning image, or a simple dialog with the warning image and a single OK button (value 4).    @see #_ClassElement_(Shell, String, Image, String, int, String[], int)  @see #open(int, Shell, String, String, int) ',directive
' Constant for the warning image, or a simple dialog with the warning image and a single OK button (value 4).   ',directive
?,non-directive
'@see #_ClassElement_(Shell, String, Image, String, int, String[], int)  ',non-directive
'@see #open(int, Shell, String, String, int) ',non-directive
' Constant for a simple dialog with the question image and _OSPathElement_Cancel buttons (value 5).    @see #open(int, Shell, String, String, int)  @since _ClassPathElement_ ',non-directive
' Constant for a simple dialog with the question image and _OSPathElement_Cancel buttons (value 5).   ',non-directive
?,non-directive
'@see #open(int, Shell, String, String, int)  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Constant for a simple dialog with the question image and _OSPathElement_Cancel buttons (value 6).    @see #open(int, Shell, String, String, int)  @since _ClassPathElement_ ',non-directive
' Constant for a simple dialog with the question image and _OSPathElement_Cancel buttons (value 6).   ',non-directive
?,non-directive
'@see #open(int, Shell, String, String, int)  ',non-directive
'@since _ClassPathElement_ ',non-directive
' @see _ClassPathElement_#_ClassElement_(int) ',non-directive
?,non-directive
'@see _ClassPathElement_#_ClassElement_(int) ',non-directive
' @see Dialog#_ClassElement_(Composite) ',non-directive
?,non-directive
'@see Dialog#_ClassElement_(Composite) ',non-directive
' @see Dialog#_ClassElement_(Composite) ',non-directive
?,non-directive
'@see Dialog#_ClassElement_(Composite) ',non-directive
' Returns the toggle button.    @return the toggle button ',non-directive
' Returns the toggle button.   ',non-directive
?,non-directive
'@return the toggle button ',non-directive
' An accessor for the current preference store for this dialog.    @return The preference store; this value may be <code>null</code> if no          preference is being used. ',directive
' An accessor for the current preference store for this dialog.   ',non-directive
?,non-directive
'@return The preference store; this value may be <code>null</code> if no          preference is being used. ',directive
' An accessor for the current key of the toggle preference.    @return The preference key; this value may be <code>null</code> if no          preference is being used. ',directive
' An accessor for the current key of the toggle preference.   ',non-directive
?,non-directive
'@return The preference key; this value may be <code>null</code> if no          preference is being used. ',directive
' A mutator for the key of the preference to be modified by the toggle  button.    @param _ClassElement_             The _ClassElement_ to set. If this value is <code>null</code>,             then no preference will be modified. ',non-directive
' A mutator for the key of the preference to be modified by the toggle  button.   ',non-directive
?,non-directive
'@param _ClassElement_             The _ClassElement_ to set. ',non-directive
'If this value is <code>null</code>,             then no preference will be modified. ',directive
' A mutator for the preference store to be modified by the toggle button.    @param _ClassElement_             The _ClassElement_ to set. If this value is <code>null</code>,             then no preference will be modified. ',non-directive
' A mutator for the preference store to be modified by the toggle button.   ',non-directive
?,non-directive
'@param _ClassElement_             The _ClassElement_ to set. ',non-directive
'If this value is <code>null</code>,             then no preference will be modified. ',directive
' A mutator for the button providing the toggle option. If the button  exists, then it will automatically get the text set to the current toggle  message, and its selection state set to the current selection state.    @param button             The button to use; must not be <code>null</code>. ',directive
' A mutator for the button providing the toggle option. ',non-directive
'If the button  exists, then it will automatically get the text set to the current toggle  message, and its selection state set to the current selection state.   ',directive
?,non-directive
'@param button             The button to use; must not be <code>null</code>. ',directive
' A mutator for the text on the toggle button. The button will  automatically get updated with the new text, if it exists.    @param message             The new text of the toggle button; if it is <code>null</code>,             then used the default toggle message. ',non-directive
' A mutator for the text on the toggle button. ',non-directive
'The button will  automatically get updated with the new text, if it exists.   ',directive
?,non-directive
'@param message             The new text of the toggle button; if it is <code>null</code>,             then used the default toggle message. ',directive
' A mutator for the state of the toggle button. This method will update the  button, if it exists.    @param _ClassElement_             The desired state of the toggle button (<code>true</code>             means the toggle should be selected). ',directive
' A mutator for the state of the toggle button. ',non-directive
'This method will update the  button, if it exists.   ',directive
?,non-directive
'@param _ClassElement_             The desired state of the toggle button (<code>true</code>             means the toggle should be selected). ',non-directive
' Creates a message dialog with a toggle. See the superclass constructor  for info on the other parameters.    @param _ClassElement_             the parent shell  @param _ClassElement_             the dialog title, or <code>null</code> if none  @param image             the dialog title image, or <code>null</code> if none  @param message             the dialog message  @param _ClassElement_             one of the following values:             <ul>             <li><code>_ClassPathElement_</code> for a dialog with no             image</li>             <li><code>_ClassPathElement_</code> for a dialog with an             error image</li>             <li><code>_ClassPathElement_</code> for a dialog             with an information image</li>             <li><code>_ClassPathElement_ </code> for a dialog with a             question image</li>             <li><code>_ClassPathElement_</code> for a dialog with a             warning image</li>             </ul>  @param _ClassElement_             an array of labels for the buttons in the button bar  @param _ClassElement_             the index in the button label array of the default button  @param _ClassElement_             the message for the toggle control, or <code>null</code> for             the default message  @param _ClassElement_             the initial state for the toggle    ',directive
' Creates a message dialog with a toggle. ',non-directive
'See the superclass constructor  for info on the other parameters.   ',directive
?,non-directive
'@param _ClassElement_             the parent shell  ',non-directive
'@param _ClassElement_             the dialog title, or <code>null</code> if none  ',directive
'@param image             the dialog title image, or <code>null</code> if none  ',directive
'@param message             the dialog message  ',non-directive
'@param _ClassElement_             one of the following values:             <ul>             ',non-directive
'<li><code>_ClassPathElement_</code> for a dialog with no             image</li>             ',directive
'<li><code>_ClassPathElement_</code> for a dialog with an             error image</li>             ',directive
'<li><code>_ClassPathElement_</code> for a dialog             with an information image</li>             ',directive
'<li><code>_ClassPathElement_ </code> for a dialog with a             question image</li>             ',directive
'<li><code>_ClassPathElement_</code> for a dialog with a             warning image</li>             </ul>  ',directive
'@param _ClassElement_             an array of labels for the buttons in the button bar  ',non-directive
'@param _ClassElement_             the index in the button label array of the default button  ',non-directive
'@param _ClassElement_             the message for the toggle control, or <code>null</code> for             the default message  ',directive
'@param _ClassElement_             the initial state for the toggle    ',non-directive
' The value of the preference when the user has asked that the answer to  the question always be \"okay\" or \"yes\". ',non-directive
' The value of the preference when the user has asked that the answer to  the question always be \"okay\" or \"yes\". ',non-directive
' The value of the preference when the user has asked that the answer to  the question always be \"no\". ',non-directive
' The value of the preference when the user has asked that the answer to  the question always be \"no\". ',non-directive
' The value of the preference when the user wishes to prompted for an  answer every time the question is to be asked. ',non-directive
' The value of the preference when the user wishes to prompted for an  answer every time the question is to be asked. ',non-directive
' A listener which is notified when the current page of the multi-page dialog  is changed.    @see IPageChangeProvider  @see _ClassElement_    @since _ClassPathElement_ ',non-directive
' A listener which is notified when the current page of the multi-page dialog  is changed.   ',non-directive
?,non-directive
'@see IPageChangeProvider  ',non-directive
'@see _ClassElement_    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Notifies that the selected page has changed.    @param event             event object describing the change ',non-directive
' Notifies that the selected page has changed.   ',non-directive
?,non-directive
'@param event             event object describing the change ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns the error message label.    @return the error message label  @deprecated use _ClassElement_(String) instead ',directive
' Returns the error message label.   ',non-directive
?,non-directive
'@return the error message label  ',non-directive
'@deprecated use _ClassElement_(String) instead ',directive
' Returns the ok button.    @return the ok button ',non-directive
' Returns the ok button.   ',non-directive
?,non-directive
'@return the ok button ',non-directive
' Returns the text area.    @return the text area ',non-directive
' Returns the text area.   ',non-directive
?,non-directive
'@return the text area ',non-directive
' Returns the validator.    @return the validator ',non-directive
' Returns the validator.   ',non-directive
?,non-directive
'@return the validator ',non-directive
' Returns the string typed into this input dialog.    @return the input string ',non-directive
' Returns the string typed into this input dialog.   ',non-directive
?,non-directive
'@return the input string ',non-directive
' Validates the input.  <p>  The default implementation of this framework method delegates the request  to the supplied input validator object; if it finds the input invalid,  the error message is displayed in the dialog\'s message line. This hook  method is called whenever the text changes in the input field.  </p> ',directive
' Validates the input.  ',non-directive
'<p>  The default implementation of this framework method delegates the request  to the supplied input validator object; if it finds the input invalid,  the error message is displayed in the dialog\'s message line. ',directive
'This hook  method is called whenever the text changes in the input field.  ',directive
'</p> ',non-directive
' Sets or clears the error message.  If not <code>null</code>, the OK button is disabled.    @param _ClassElement_             the error message, or <code>null</code> to clear  @since _ClassPathElement_ ',directive
' Sets or clears the error message.  ',non-directive
'If not <code>null</code>, the OK button is disabled.   ',directive
?,non-directive
'@param _ClassElement_             the error message, or <code>null</code> to clear  ',directive
'@since _ClassPathElement_ ',non-directive
' The _ClassElement_ is the {@link Layout} used to maintain  {@link _ClassElement_} sizes in a {@link Table}.    <p>  <b>You can only add the {@link Layout} to a container whose <i>only</i> child  is the {@link Table} control you want the {@link Layout} applied to. Don\'t  assign the layout directly the {@link Table}</b>  </p>    @since _ClassPathElement_ ',directive
' The _ClassElement_ is the {',non-directive
'@link Layout} used to maintain  {',non-directive
'@link _ClassElement_} sizes in a {',non-directive
'@link Table}.   ',non-directive
' <p>  <b>You can only add the {',directive
'@link Layout} to a container whose <i>only</i> child  is the {',directive
'@link Table} control you want the {',directive
'@link Layout} applied to. ',directive
'Don\'t  assign the layout directly the {',directive
'@link Table}</b>  </p>    ',directive
'@since _ClassPathElement_ ',non-directive
' {@_ClassElement_}    @since _ClassPathElement_ ',directive
' {@_ClassElement_}    ',non-directive
'@since _ClassPathElement_ ',non-directive
' {@_ClassElement_}    @since _ClassPathElement_ ',directive
' {@_ClassElement_}    ',non-directive
'@since _ClassPathElement_ ',non-directive
' {@_ClassElement_}    @since _ClassPathElement_ ',directive
' {@_ClassElement_}    ',non-directive
'@since _ClassPathElement_ ',non-directive
' @since _ClassPathElement_ ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' _ClassElement_ creates and initializes row layouts. There are two ways to  use _ClassElement_. Normally, it is used as a shorthand for writing  \"new _ClassElement_()\" and initializing a bunch of fields. In this case the main  benefit is a more concise syntax and the ability to create more than one  identical _ClassElement_ from the same factory. Changing a property of the factory  will affect future layouts created by the factory, but has no effect on  layouts that have already been created.    @since _ClassPathElement_ ',non-directive
' _ClassElement_ creates and initializes row layouts. ',non-directive
'There are two ways to  use _ClassElement_. ',non-directive
'Normally, it is used as a shorthand for writing  \"new _ClassElement_()\" and initializing a bunch of fields. ',non-directive
'In this case the main  benefit is a more concise syntax and the ability to create more than one  identical _ClassElement_ from the same factory. ',non-directive
'Changing a property of the factory  will affect future layouts created by the factory, but has no effect on  layouts that have already been created.   ',directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a factory that creates copies of the given layout.    @param layout             layout to copy  @return a new _ClassElement_ instance that creates copies of the given          layout ',non-directive
' Creates a factory that creates copies of the given layout.   ',non-directive
?,non-directive
'@param layout             layout to copy  ',non-directive
'@return a new _ClassElement_ instance that creates copies of the given          layout ',non-directive
' Creates a copy of the receiver.    @return a copy of the receiver ',non-directive
' Creates a copy of the receiver.   ',non-directive
?,non-directive
'@return a copy of the receiver ',non-directive
' Creates a _ClassElement_ that creates _ClassElement_ with the default SWT  values.    <p>  Initial values are:  </p>    <ul>  <li>margins(0,0)</li>  <li>_ClassElement_(3,3,3,3)</li>  <li>wrap(true)</li>  <li>pack(true)</li>  <li>fill(false)</li>  <li>justify(false)</li>  <li>spacing(3)</li>  </ul>    @return a _ClassElement_ that creates _ClassElement_ as though created with          their default constructor  @see #_ClassElement_ ',directive
' Creates a _ClassElement_ that creates _ClassElement_ with the default SWT  values.   ',non-directive
' <p>  Initial values are:  </p>    <ul>  ',non-directive
'<li>margins(0,0)</li>  ',non-directive
'<li>_ClassElement_(3,3,3,3)</li>  ',non-directive
'<li>wrap(true)</li>  ',non-directive
'<li>pack(true)</li>  ',non-directive
'<li>fill(false)</li>  ',non-directive
'<li>justify(false)</li>  ',non-directive
'<li>spacing(3)</li>  </ul>  ',non-directive
?,non-directive
'@return a _ClassElement_ that creates _ClassElement_ as though created with          their default constructor  ',directive
'@see #_ClassElement_ ',non-directive
' Creates a _ClassElement_ that creates _ClassElement_ with no margins, fill  behavior, and default dialog spacing.    <p>  Initial values are:  </p>    <ul>  <li>margins(0,0)</li>  <li>_ClassElement_(0,0,0,0)</li>  <li>wrap(true)</li>  <li>pack(true)</li>  <li>fill(false)</li>  <li>justify(false)</li>  <li>spacing(_ClassPathElement_().x</li>  </ul>    @return a _ClassElement_ that creates _ClassElement_ with no margins  @see #_ClassElement_ ',directive
' Creates a _ClassElement_ that creates _ClassElement_ with no margins, fill  behavior, and default dialog spacing.   ',non-directive
' <p>  Initial values are:  </p>    <ul>  ',non-directive
'<li>margins(0,0)</li>  ',non-directive
'<li>_ClassElement_(0,0,0,0)</li>  ',non-directive
'<li>wrap(true)</li>  ',non-directive
'<li>pack(true)</li>  ',non-directive
'<li>fill(false)</li>  ',non-directive
'<li>justify(false)</li>  ',non-directive
'<li>spacing(_ClassPathElement_().x</li>  </ul>  ',non-directive
?,non-directive
'@return a _ClassElement_ that creates _ClassElement_ with no margins  ',directive
'@see #_ClassElement_ ',non-directive
' Sets the spacing for layouts created with this factory. The spacing is  the distance between items within the layout.    @param spacing             spacing (pixels)  @return this  @see #margins(Point)  @see #margins(int, int) ',directive
' Sets the spacing for layouts created with this factory. ',non-directive
'The spacing is  the distance between items within the layout.   ',non-directive
?,non-directive
'@param spacing             spacing (pixels)  ',non-directive
'@return this  ',non-directive
'@see #margins(Point)  ',non-directive
'@see #margins(int, int) ',non-directive
' Sets the margins for layouts created with this factory. The margins are  the distance between the outer cells and the edge of the layout.    @param margins             margin size (pixels)  @return this  @see #spacing(int) ',directive
' Sets the margins for layouts created with this factory. ',non-directive
'The margins are  the distance between the outer cells and the edge of the layout.   ',non-directive
?,non-directive
'@param margins             margin size (pixels)  ',non-directive
'@return this  ',non-directive
'@see #spacing(int) ',non-directive
' Sets the margins for layouts created with this factory. The margins  specify the number of pixels of horizontal and vertical margin that will  be placed along the _OSPathElement_right and _OSPathElement_bottom edges of the layout. Note  that these margins will be added to the ones specified by  {@link #_ClassElement_(int, int, int, int)}.    @param width             margin width (pixels)  @param height             margin height (pixels)  @return this  @see #spacing(int) ',directive
' Sets the margins for layouts created with this factory. ',non-directive
'The margins  specify the number of pixels of horizontal and vertical margin that will  be placed along the _OSPathElement_right and _OSPathElement_bottom edges of the layout. ',non-directive
'Note  that these margins will be added to the ones specified by  {',directive
'@link #_ClassElement_(int, int, int, int)}.   ',directive
?,non-directive
'@param width             margin width (pixels)  ',non-directive
'@param height             margin height (pixels)  ',non-directive
'@return this  ',non-directive
'@see #spacing(int) ',non-directive
' Sets the margins for layouts created with this factory. The margins  specify the number of pixels of horizontal and vertical margin that will  be placed along the left, right, top, and bottom edges of the layout.  Note that these margins will be added to the ones specified by  {@link #margins(int, int)}.    @param left             left margin size (pixels)  @param right             right margin size (pixels)  @param top             top margin size (pixels)  @param bottom             bottom margin size (pixels)  @return this  @see #spacing(int)    @since _ClassPathElement_ ',directive
' Sets the margins for layouts created with this factory. ',non-directive
'The margins  specify the number of pixels of horizontal and vertical margin that will  be placed along the left, right, top, and bottom edges of the layout.  ',non-directive
'Note that these margins will be added to the ones specified by  {',directive
'@link #margins(int, int)}.   ',directive
?,non-directive
'@param left             left margin size (pixels)  ',non-directive
'@param right             right margin size (pixels)  ',non-directive
'@param top             top margin size (pixels)  ',non-directive
'@param bottom             bottom margin size (pixels)  ',non-directive
'@return this  ',non-directive
'@see #spacing(int)    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Fill specifies whether the controls in a row should be all the same  height for horizontal layouts, or the same width for vertical layouts.    @param fill             the fill status  @return this ',directive
' Fill specifies whether the controls in a row should be all the same  height for horizontal layouts, or the same width for vertical layouts.   ',non-directive
?,non-directive
'@param fill             the fill status  ',non-directive
'@return this ',non-directive
' Justify specifies whether the controls in a row should be fully  justified, with any extra space placed between the controls.    @param justify             the justify status  @return this ',directive
' Justify specifies whether the controls in a row should be fully  justified, with any extra space placed between the controls.   ',non-directive
?,non-directive
'@param justify             the justify status  ',non-directive
'@return this ',non-directive
' Pack specifies whether all controls in the layout take their preferred  size. If pack is false, all controls will have the same size which is the  size required to accommodate the largest preferred height and the largest  preferred width of all the controls in the layout.    @param pack             the pack status  @return this ',directive
' Pack specifies whether all controls in the layout take their preferred  size. ',non-directive
'If pack is false, all controls will have the same size which is the  size required to accommodate the largest preferred height and the largest  preferred width of all the controls in the layout.   ',directive
?,non-directive
'@param pack             the pack status  ',non-directive
'@return this ',non-directive
' Wrap specifies whether a control will be wrapped to the next row if there  is insufficient space on the current row.    @param wrap             the wrap status  @return this ',non-directive
' Wrap specifies whether a control will be wrapped to the next row if there  is insufficient space on the current row.   ',non-directive
?,non-directive
'@param wrap             the wrap status  ',non-directive
'@return this ',non-directive
' type specifies whether the layout places controls in rows or columns.    Possible values are:  <ul>  <li>HORIZONTAL: Position the controls horizontally from left to right</li>  <li>VERTICAL: Position the controls vertically from top to bottom</li>  </ul>    @param type             One of _ClassPathElement_ or _ClassPathElement_  @return this    @throws _ClassElement_              if type is not one of HORIZONTAL or VERTICAL ',non-directive
' type specifies whether the layout places controls in rows or columns.   ',non-directive
' Possible values are:  <ul>  ',non-directive
'<li>HORIZONTAL: Position the controls horizontally from left to right</li>  ',non-directive
'<li>VERTICAL: Position the controls vertically from top to bottom</li>  </ul>  ',non-directive
?,non-directive
'@param type             One of _ClassPathElement_ or _ClassPathElement_  ',non-directive
'@return this    ',non-directive
'@throws _ClassElement_              if type is not one of HORIZONTAL or VERTICAL ',directive
' Creates a new _ClassElement_, and initializes it with values from the factory.    @return a new initialized _ClassElement_.  @see #_ClassElement_ ',non-directive
' Creates a new _ClassElement_, and initializes it with values from the factory.   ',non-directive
?,non-directive
'@return a new initialized _ClassElement_.  ',non-directive
'@see #_ClassElement_ ',non-directive
' Creates a new _ClassElement_ and attaches it to the given composite. Does not  create the _ClassElement_ of any of the controls in the composite.    @param c             composite whose layout will be set  @see #create  @see _ClassElement_ ',non-directive
' Creates a new _ClassElement_ and attaches it to the given composite. ',non-directive
'Does not  create the _ClassElement_ of any of the controls in the composite.   ',directive
?,non-directive
'@param c             composite whose layout will be set  ',non-directive
'@see #create  ',non-directive
'@see _ClassElement_ ',non-directive
' Copies the given _ClassElement_ instance    @param layout             layout to copy  @return a new _ClassElement_ ',non-directive
' Copies the given _ClassElement_ instance    ',non-directive
'@param layout             layout to copy  ',non-directive
'@return a new _ClassElement_ ',non-directive
' The _ClassElement_ is a {@link Layout} used to set the size of a table  in a consistent way even during a resize unlike a {@link _ClassElement_} which  only sets initial sizes.    <p>  <b>You can only add the layout to a container whose only child is the  _OSPathElement_tree control you want the layouts applied to.</b>  </p>    @since _ClassPathElement_ ',directive
' The _ClassElement_ is a {',directive
'@link Layout} used to set the size of a table  in a consistent way even during a resize unlike a {',directive
'@link _ClassElement_} which  only sets initial sizes.   ',directive
' <p>  <b>You can only add the layout to a container whose only child is the  _OSPathElement_tree control you want the layouts applied to.</b>  </p>    ',directive
'@since _ClassPathElement_ ',non-directive
' Adds a new column of data to this table layout.    @param column             the column    @param data             the column layout data ',non-directive
' Adds a new column of data to this table layout.   ',non-directive
?,non-directive
'@param column             the column    ',non-directive
'@param data             the column layout data ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Get the number of columns for the receiver.    @param _ClassElement_             the control    @return the number of columns  @since _ClassPathElement_ ',non-directive
' Get the number of columns for the receiver.   ',non-directive
?,non-directive
'@param _ClassElement_             the control    ',non-directive
'@return the number of columns  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Set the widths of the columns.    @param _ClassElement_             the control    @param widths             the widths of the column  @since _ClassPathElement_ ',non-directive
' Set the widths of the columns.   ',non-directive
?,non-directive
'@param _ClassElement_             the control    ',non-directive
'@param widths             the widths of the column  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Get the layout data for a column    @param _ClassElement_             the control  @param _ClassElement_             the column index  @return the layout data, might <b>not</b> null  @since _ClassPathElement_ ',non-directive
' Get the layout data for a column    ',non-directive
'@param _ClassElement_             the control  ',non-directive
'@param _ClassElement_             the column index  ',non-directive
'@return the layout data, might <b>not</b> null  ',directive
'@since _ClassPathElement_ ',non-directive
' Update the layout data for a column    @param column             the column  @since _ClassPathElement_ ',non-directive
' Update the layout data for a column    ',non-directive
'@param column             the column  ',non-directive
'@since _ClassPathElement_ ',non-directive
' The number of extra pixels taken as horizontal trim by the table column.  To ensure there are N pixels available for the content of the column,  assign N+COLUMN_TRIM for the column width.    @return the trim used by the columns  @since _ClassPathElement_ ',non-directive
' The number of extra pixels taken as horizontal trim by the table column.  ',non-directive
'To ensure there are N pixels available for the content of the column,  assign N+COLUMN_TRIM for the column width.   ',directive
?,non-directive
'@return the trim used by the columns  ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' Key used to restore the layout data in the columns data-slot  @since _ClassPathElement_ ',non-directive
' Key used to restore the layout data in the columns data-slot  ',non-directive
'@since _ClassPathElement_ ',non-directive
' This class provides a convienient shorthand for creating and initializing  _ClassElement_. This offers several benefits over creating _ClassElement_ normal way:    <ul>  <li>The same factory can be used many times to create several _ClassElement_ instances</li>  <li>The setters on _ClassElement_ all return \"this\", allowing them to be chained</li>   <li>_ClassElement_ uses vector setters (it accepts Points), making it easy to      set X and Y values together</li>  </ul>    <p>  _ClassElement_ instances are created using one of the static methods on this class.   </p>    <p>  Example usage:  </p>  <code><pre>    ////////////////////////////////////////////////////////////  // Example 1: Typical grid data for a non-wrapping label        // _ClassElement_ version      _ClassPathElement_()._ClassElement_(_ClassElement_);        // Equivalent SWT version      _ClassElement_ _ClassElement_ = new _ClassElement_(_ClassPathElement_ | _ClassPathElement_);      _ClassPathElement_(_ClassElement_);    ///////////////////////////////////////////////////////////  // Example 2: Typical grid data for a wrapping label        // _ClassElement_ version      _ClassPathElement_()           .align(_ClassPathElement_, _ClassPathElement_)          .hint(150, _ClassPathElement_)          .grab(true, false)           ._ClassElement_(_ClassElement_);             // Equivalent SWT version      _ClassElement_ _ClassElement_ = new _ClassElement_(_ClassPathElement_ | _ClassPathElement_);      _ClassPathElement_ = 1;      _ClassPathElement_ = 150;      _ClassPathElement_(_ClassElement_);    //////////////////////////////////////////////////////////////  // Example 3: Typical grid data for a scrollable control (a list box, tree, table, etc.)        // _ClassElement_ version      _ClassPathElement_().grab(true, true).hint(150, 150)._ClassElement_(_ClassElement_);        // Equivalent SWT version      _ClassElement_ _ClassElement_ = new _ClassElement_(_ClassPathElement_);      _ClassPathElement_ = 150;      _ClassPathElement_ = 150;      _ClassPathElement_ = 1;      _ClassPathElement_ = 1;      _ClassPathElement_(_ClassElement_);    /////////////////////////////////////////////////////////////  // Example 4: Typical grid data for a button       // _ClassElement_ version      Point _ClassElement_ = _ClassPathElement_(_ClassPathElement_, _ClassPathElement_, false);      Point hint = _ClassPathElement_(_ClassPathElement_(), _ClassElement_);      _ClassPathElement_().align(_ClassPathElement_, _ClassPathElement_).hint(hint)._ClassElement_(button);       // Equivalent SWT version      Point _ClassElement_ = _ClassPathElement_(_ClassPathElement_, _ClassPathElement_, false);      Point hint = _ClassPathElement_(_ClassPathElement_(), _ClassElement_);      _ClassElement_ _ClassElement_ = new _ClassElement_(_ClassPathElement_ | _ClassPathElement_);      _ClassPathElement_ = _ClassPathElement_;      _ClassPathElement_ = _ClassPathElement_;      _ClassPathElement_(_ClassElement_);        /////////////////////////////////////////////////////////////  // Example 5: Generated _ClassElement_       // Generates _ClassElement_ a wrapping label that spans 2 columns      _ClassPathElement_(_ClassElement_, 2, 1);            // Generates _ClassElement_ for a listbox. and adjusts the preferred size to 300x400 pixels      _ClassPathElement_(_ClassElement_).hint(300, 400)._ClassElement_(_ClassElement_);            // Generates _ClassElement_ equivalent to example 4      _ClassPathElement_(button, 1, 1);             </pre></code>    @since _ClassPathElement_ ',non-directive
' This class provides a convienient shorthand for creating and initializing  _ClassElement_. ',non-directive
'This offers several benefits over creating _ClassElement_ normal way:    <ul>  ',directive
'<li>The same factory can be used many times to create several _ClassElement_ instances</li>  ',non-directive
'<li>The setters on _ClassElement_ all return \"this\", allowing them to be chained</li>   ',non-directive
'<li>_ClassElement_ uses vector setters (it accepts Points), making it easy to      set X and Y values together</li>  </ul>  ',non-directive
'  <p>  _ClassElement_ instances are created using one of the static methods on this class.   ',directive
'</p>    <p>  Example usage:  </p>  <code><pre>    ////////////////////////////////////////////////////////////  // Example 1: Typical grid data for a non-wrapping label        // _ClassElement_ version      _ClassPathElement_()._ClassElement_(_ClassElement_);        // Equivalent SWT version      _ClassElement_ _ClassElement_ = new _ClassElement_(_ClassPathElement_ | _ClassPathElement_);      _ClassPathElement_(_ClassElement_);    ///////////////////////////////////////////////////////////  // Example 2: Typical grid data for a wrapping label        // _ClassElement_ version      _ClassPathElement_()           .align(_ClassPathElement_, _ClassPathElement_)          .hint(150, _ClassPathElement_)          .grab(true, false)           ._ClassElement_(_ClassElement_);             // Equivalent SWT version      _ClassElement_ _ClassElement_ = new _ClassElement_(_ClassPathElement_ | _ClassPathElement_);      _ClassPathElement_ = 1;      _ClassPathElement_ = 150;      _ClassPathElement_(_ClassElement_);    //////////////////////////////////////////////////////////////  // Example 3: Typical grid data for a scrollable control (a list box, tree, table, etc.)        // _ClassElement_ version      _ClassPathElement_().grab(true, true).hint(150, 150)._ClassElement_(_ClassElement_);        // Equivalent SWT version      _ClassElement_ _ClassElement_ = new _ClassElement_(_ClassPathElement_);      _ClassPathElement_ = 150;      _ClassPathElement_ = 150;      _ClassPathElement_ = 1;      _ClassPathElement_ = 1;      _ClassPathElement_(_ClassElement_);    /////////////////////////////////////////////////////////////  // Example 4: Typical grid data for a button       // _ClassElement_ version      Point _ClassElement_ = _ClassPathElement_(_ClassPathElement_, _ClassPathElement_, false);      Point hint = _ClassPathElement_(_ClassPathElement_(), _ClassElement_);      _ClassPathElement_().align(_ClassPathElement_, _ClassPathElement_).hint(hint)._ClassElement_(button);       // Equivalent SWT version      Point _ClassElement_ = _ClassPathElement_(_ClassPathElement_, _ClassPathElement_, false);      Point hint = _ClassPathElement_(_ClassPathElement_(), _ClassElement_);      _ClassElement_ _ClassElement_ = new _ClassElement_(_ClassPathElement_ | _ClassPathElement_);      _ClassPathElement_ = _ClassPathElement_;      _ClassPathElement_ = _ClassPathElement_;      _ClassPathElement_(_ClassElement_);        /////////////////////////////////////////////////////////////  // Example 5: Generated _ClassElement_       // Generates _ClassElement_ a wrapping label that spans 2 columns      _ClassPathElement_(_ClassElement_, 2, 1);            // Generates _ClassElement_ for a listbox. ',directive
'and adjusts the preferred size to 300x400 pixels      _ClassPathElement_(_ClassElement_).hint(300, 400)._ClassElement_(_ClassElement_);            // Generates _ClassElement_ equivalent to example 4      _ClassPathElement_(button, 1, 1);             </pre></code>    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a new _ClassElement_ initialized with the SWT defaults.  This factory will generate _ClassElement_ that is equivalent to   \"new _ClassElement_()\".    <p>  Initial values are:  </p>    <ul>  <li>align(_ClassPathElement_, _ClassPathElement_)</li>  <li>exclude(false)</li>  <li>grab(false, false)</li>  <li>hint(_ClassPathElement_, _ClassPathElement_)</li>  <li>indent(0,0)</li>  <li>_ClassElement_(0,0)</li>  <li>span(1,1)</li>  </ul>    @return a new _ClassElement_ instance  @see #_ClassElement_() ',non-directive
' Creates a new _ClassElement_ initialized with the SWT defaults.  ',non-directive
'This factory will generate _ClassElement_ that is equivalent to   \"new _ClassElement_()\".   ',directive
' <p>  Initial values are:  </p>    <ul>  ',non-directive
'<li>align(_ClassPathElement_, _ClassPathElement_)</li>  ',non-directive
'<li>exclude(false)</li>  ',non-directive
'<li>grab(false, false)</li>  ',non-directive
'<li>hint(_ClassPathElement_, _ClassPathElement_)</li>  ',non-directive
'<li>indent(0,0)</li>  ',non-directive
'<li>_ClassElement_(0,0)</li>  ',non-directive
'<li>span(1,1)</li>  </ul>  ',non-directive
?,non-directive
'@return a new _ClassElement_ instance  ',non-directive
'@see #_ClassElement_() ',non-directive
' Creates a new _ClassElement_ that creates copies of the given _ClassElement_  by default.    @param data _ClassElement_ to copy  @return a new _ClassElement_ that creates copies of the argument by default ',non-directive
' Creates a new _ClassElement_ that creates copies of the given _ClassElement_  by default.   ',non-directive
?,non-directive
'@param data _ClassElement_ to copy  ',non-directive
'@return a new _ClassElement_ that creates copies of the argument by default ',non-directive
' Creates a _ClassElement_ initialized with defaults that will cause  the control to fill its cell. The minimum size is set to the smallest possible  minimum size supported by SWT. Currently, the smallest supported minimum size  is (1,1) so this is the default. If _ClassElement_ ever adds support for grid data  with no minimum size, this will be changed to 0,0 in the future.     <p>  Initial values are:  </p>    <ul>  <li>align(_ClassPathElement_, _ClassPathElement_)</li>  <li>exclude(false)</li>  <li>grab(false, false)</li>  <li>hint(_ClassPathElement_, _ClassPathElement_)</li>  <li>indent(0,0)</li>  <li>_ClassElement_(1,1)</li>  <li>span(1,1)</li>  </ul>     @return a _ClassElement_ that makes controls fill their grid by default    @see #_ClassElement_() ',non-directive
' Creates a _ClassElement_ initialized with defaults that will cause  the control to fill its cell. ',non-directive
'The minimum size is set to the smallest possible  minimum size supported by SWT. ',directive
'Currently, the smallest supported minimum size  is (1,1) so this is the default. ',directive
'If _ClassElement_ ever adds support for grid data  with no minimum size, this will be changed to 0,0 in the future.    ',directive
' <p>  Initial values are:  </p>    <ul>  ',non-directive
'<li>align(_ClassPathElement_, _ClassPathElement_)</li>  ',non-directive
'<li>exclude(false)</li>  ',non-directive
'<li>grab(false, false)</li>  ',non-directive
'<li>hint(_ClassPathElement_, _ClassPathElement_)</li>  ',non-directive
'<li>indent(0,0)</li>  ',non-directive
'<li>_ClassElement_(1,1)</li>  ',non-directive
'<li>span(1,1)</li>  </ul>   ',non-directive
?,non-directive
'@return a _ClassElement_ that makes controls fill their grid by default    ',non-directive
'@see #_ClassElement_() ',non-directive
' Returns a _ClassElement_ initialized with heuristicly generated defaults for the given control.  To be precise, this method picks the default values that _ClassPathElement_  would have assigned to the control. Does not attach _ClassElement_ to the control. Callers must  additionally call _ClassElement_(_ClassElement_) if they wish to use the generated values.    <p>  This method is intended for situations where _ClassElement_ is generating layout data  for a particular control that is not quite right for the desired layout.  This allows callers to start with the generated values and tweak one or two settings  before applying the _ClassElement_ to the control.  </p>     @see _ClassElement_#_ClassElement_(_ClassPathElement_)  @param _ClassElement_   @return a _ClassElement_ initialized with defaults that _ClassElement_ would have   @since _ClassPathElement_ ',directive
' Returns a _ClassElement_ initialized with heuristicly generated defaults for the given control.  ',non-directive
'To be precise, this method picks the default values that _ClassPathElement_  would have assigned to the control. ',directive
'Does not attach _ClassElement_ to the control. ',directive
'Callers must  additionally call _ClassElement_(_ClassElement_) if they wish to use the generated values.   ',directive
' <p>  This method is intended for situations where _ClassElement_ is generating layout data  for a particular control that is not quite right for the desired layout.  ',directive
'This allows callers to start with the generated values and tweak one or two settings  before applying the _ClassElement_ to the control.  ',non-directive
'</p>     ',non-directive
'@see _ClassElement_#_ClassElement_(_ClassPathElement_)  ',non-directive
'@param _ClassElement_   ',non-directive
'@return a _ClassElement_ initialized with defaults that _ClassElement_ would have   ',non-directive
'@since _ClassPathElement_ ',non-directive
' Generates layout data to the given control, given the number of cells  spanned by the control. Attaches a _ClassElement_ to the control. This method   allows generated layout data to be used with controls that span multiple cells.   <p>  The generated layout data is the same as what would be generated by   _ClassPathElement_, except that the span is configurable  </p>      @see _ClassElement_#_ClassElement_(_ClassPathElement_)  @param _ClassElement_  @param _ClassElement_ number of columns spanned by the control  @param _ClassElement_ number of rows spanned by the control  @since _ClassPathElement_ ',non-directive
' Generates layout data to the given control, given the number of cells  spanned by the control. ',non-directive
'Attaches a _ClassElement_ to the control. ',non-directive
'This method   allows generated layout data to be used with controls that span multiple cells.   ',directive
'<p>  The generated layout data is the same as what would be generated by   _ClassPathElement_, except that the span is configurable  </p>      ',directive
'@see _ClassElement_#_ClassElement_(_ClassPathElement_)  ',non-directive
'@param _ClassElement_  ',non-directive
'@param _ClassElement_ number of columns spanned by the control  ',non-directive
'@param _ClassElement_ number of rows spanned by the control  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Generates layout data to the given control, given the number of cells  spanned by the control. Attaches _ClassElement_ to the control. This method   allows generated layout data to be used with controls that span multiple cells.   <p>  The generated layout data is the same as what would be generated by   _ClassPathElement_, except that the span is configurable  </p>      @see _ClassElement_#_ClassElement_(_ClassPathElement_)  @param _ClassElement_  @param span The x coordinate indicates the number of  columns spanned, and the y coordinate indicates the number of rows.  @since _ClassPathElement_ ',non-directive
' Generates layout data to the given control, given the number of cells  spanned by the control. ',non-directive
'Attaches _ClassElement_ to the control. ',non-directive
'This method   allows generated layout data to be used with controls that span multiple cells.   ',directive
'<p>  The generated layout data is the same as what would be generated by   _ClassPathElement_, except that the span is configurable  </p>      ',directive
'@see _ClassElement_#_ClassElement_(_ClassPathElement_)  ',non-directive
'@param _ClassElement_  ',non-directive
'@param span The x coordinate indicates the number of  columns spanned, and the y coordinate indicates the number of rows.  ',directive
'@since _ClassPathElement_ ',non-directive
' Sets the _ClassElement_ span. The span controls how many cells  are filled by the control.     @param _ClassElement_ number of columns spanned by the control  @param _ClassElement_ number of rows spanned by the control  @return this ',non-directive
' Sets the _ClassElement_ span. ',non-directive
'The span controls how many cells  are filled by the control.    ',directive
?,non-directive
'@param _ClassElement_ number of columns spanned by the control  ',non-directive
'@param _ClassElement_ number of rows spanned by the control  ',non-directive
'@return this ',non-directive
' Sets the _ClassElement_ span. The span controls how many cells  are filled by the control.     @param span the new span. The x coordinate indicates the number of  columns spanned, and the y coordinate indicates the number of rows.  @return this ',non-directive
' Sets the _ClassElement_ span. ',non-directive
'The span controls how many cells  are filled by the control.    ',directive
?,non-directive
'@param span the new span. ',non-directive
'The x coordinate indicates the number of  columns spanned, and the y coordinate indicates the number of rows.  ',directive
'@return this ',non-directive
' Sets the width and height hints. The width and height hints override  the control\'s preferred size. If either hint is set to _ClassPathElement_,  the control\'s preferred size is used.     @param _ClassElement_ horizontal hint (pixels), or _ClassPathElement_ to use the control\'s preferred size  @param _ClassElement_ vertical hint (pixels), or _ClassPathElement_ to use the control\'s preferred size  @return this ',directive
' Sets the width and height hints. ',non-directive
'The width and height hints override  the control\'s preferred size. ',directive
'If either hint is set to _ClassPathElement_,  the control\'s preferred size is used.    ',directive
?,non-directive
'@param _ClassElement_ horizontal hint (pixels), or _ClassPathElement_ to use the control\'s preferred size  ',non-directive
'@param _ClassElement_ vertical hint (pixels), or _ClassPathElement_ to use the control\'s preferred size  ',non-directive
'@return this ',non-directive
' Sets the width and height hints. The width and height hints override  the control\'s preferred size. If either hint is set to _ClassPathElement_,  the control\'s preferred size is used.    @param hint size (pixels) to be used instead of the control\'s preferred size. If  the x or y values are set to _ClassPathElement_, the control\'s _ClassElement_() method will  be used to obtain that dimension of the preferred size.  @return this ',directive
' Sets the width and height hints. ',non-directive
'The width and height hints override  the control\'s preferred size. ',directive
'If either hint is set to _ClassPathElement_,  the control\'s preferred size is used.   ',directive
?,non-directive
'@param hint size (pixels) to be used instead of the control\'s preferred size. ',non-directive
'If  the x or y values are set to _ClassPathElement_, the control\'s _ClassElement_() method will  be used to obtain that dimension of the preferred size.  ',directive
'@return this ',non-directive
' Sets the alignment of the control within its cell.    @param _ClassElement_ horizontal alignment. One of _ClassPathElement_, _ClassPathElement_, _ClassPathElement_, or _ClassPathElement_.  @param _ClassElement_ vertical alignment. One of _ClassPathElement_, _ClassPathElement_, _ClassPathElement_, or _ClassPathElement_.  @return this ',non-directive
' Sets the alignment of the control within its cell.   ',non-directive
?,non-directive
'@param _ClassElement_ horizontal alignment. ',non-directive
'One of _ClassPathElement_, _ClassPathElement_, _ClassPathElement_, or _ClassPathElement_.  ',directive
'@param _ClassElement_ vertical alignment. ',non-directive
'One of _ClassPathElement_, _ClassPathElement_, _ClassPathElement_, or _ClassPathElement_.  ',directive
'@return this ',non-directive
' Sets the indent of the control within the cell. Moves the position of the control  by the given number of pixels. Positive values move toward the lower-right, negative  values move toward the upper-left.    @param _ClassElement_ distance to move to the right (negative values move left)  @param _ClassElement_ distance to move down (negative values move up)  @return this ',non-directive
' Sets the indent of the control within the cell. ',non-directive
'Moves the position of the control  by the given number of pixels. ',non-directive
'Positive values move toward the lower-right, negative  values move toward the upper-left.   ',directive
?,non-directive
'@param _ClassElement_ distance to move to the right (negative values move left)  ',non-directive
'@param _ClassElement_ distance to move down (negative values move up)  ',non-directive
'@return this ',non-directive
' Sets the indent of the control within the cell. Moves the position of the control  by the given number of pixels. Positive values move toward the lower-right, negative  values move toward the upper-left.    @param indent offset to move the control  @return this ',non-directive
' Sets the indent of the control within the cell. ',non-directive
'Moves the position of the control  by the given number of pixels. ',non-directive
'Positive values move toward the lower-right, negative  values move toward the upper-left.   ',directive
?,non-directive
'@param indent offset to move the control  ',non-directive
'@return this ',non-directive
' Determines whether extra horizontal or vertical space should be allocated to  this control\'s column when the layout resizes. If any control in the column  is set to grab horizontal then the whole column will grab horizontal space.  If any control in the row is set to grab vertical then the whole row will grab  vertical space.    @param horizontal true if the control\'s column should grow horizontally  @param vertical true if the control\'s row should grow vertically  @return this ',directive
' Determines whether extra horizontal or vertical space should be allocated to  this control\'s column when the layout resizes. ',non-directive
'If any control in the column  is set to grab horizontal then the whole column will grab horizontal space.  ',directive
'If any control in the row is set to grab vertical then the whole row will grab  vertical space.   ',directive
?,non-directive
'@param horizontal true if the control\'s column should grow horizontally  ',non-directive
'@param vertical true if the control\'s row should grow vertically  ',non-directive
'@return this ',non-directive
' Sets the minimum size for the control. The control will not be permitted  to shrink below this size. Note: _ClassElement_ treats a minimum size of 0  as an undocumented special value, so the smallest possible minimum size   is a size of 1. A minimum size of _ClassPathElement_ indicates that the result  of _ClassElement_(int, int, boolean) should be used as the control\'s minimum  size.      @param minX minimum a value of 1 or more is a horizontal size of the control (pixels).          _ClassPathElement_ indicates that the control\'s preferred size should be used. A size         of 0 has special semantics defined by _ClassElement_.   @param minY minimum a value of 1 or more is a vertical size of the control (pixels). _ClassPathElement_         indicates that the control\'s preferred size should be used. A size         of 0 has special semantics defined by _ClassElement_.  @return this ',directive
' Sets the minimum size for the control. ',non-directive
'The control will not be permitted  to shrink below this size. ',non-directive
'Note: _ClassElement_ treats a minimum size of 0  as an undocumented special value, so the smallest possible minimum size   is a size of 1. ',directive
'A minimum size of _ClassPathElement_ indicates that the result  of _ClassElement_(int, int, boolean) should be used as the control\'s minimum  size.   ',directive
?,non-directive
'@param minX minimum a value of 1 or more is a horizontal size of the control (pixels).          ',non-directive
'_ClassPathElement_ indicates that the control\'s preferred size should be used. ',directive
'A size         of 0 has special semantics defined by _ClassElement_.   ',directive
'@param minY minimum a value of 1 or more is a vertical size of the control (pixels). ',non-directive
'_ClassPathElement_         indicates that the control\'s preferred size should be used. ',directive
'A size         of 0 has special semantics defined by _ClassElement_.  ',directive
'@return this ',non-directive
' Sets the minimum size for the control. The control will not be permitted  to shrink below this size. Note: _ClassElement_ treats a minimum size of 0  as an undocumented special value, so the smallest possible minimum size   is a size of 1. A minimum size of _ClassPathElement_ indicates that the result  of _ClassElement_(int, int, boolean) should be used as the control\'s minimum  size.    @param min minimum size of the control  @return this ',directive
' Sets the minimum size for the control. ',non-directive
'The control will not be permitted  to shrink below this size. ',non-directive
'Note: _ClassElement_ treats a minimum size of 0  as an undocumented special value, so the smallest possible minimum size   is a size of 1. ',directive
'A minimum size of _ClassPathElement_ indicates that the result  of _ClassElement_(int, int, boolean) should be used as the control\'s minimum  size.   ',directive
?,non-directive
'@param min minimum size of the control  ',non-directive
'@return this ',non-directive
' Instructs the _ClassElement_ to ignore this control when performing layouts.     @param _ClassElement_ true iff the control should be excluded from layouts  @return this ',directive
' Instructs the _ClassElement_ to ignore this control when performing layouts.    ',non-directive
?,non-directive
'@param _ClassElement_ true iff the control should be excluded from layouts  ',non-directive
'@return this ',non-directive
' Creates a new _ClassElement_ instance. All attributes of the _ClassElement_ instance  will be initialized by the factory.    @return a new _ClassElement_ instance ',non-directive
' Creates a new _ClassElement_ instance. ',non-directive
'All attributes of the _ClassElement_ instance  will be initialized by the factory.   ',non-directive
?,non-directive
'@return a new _ClassElement_ instance ',non-directive
' Creates a copy of the receiver.    @return a copy of the receiver ',non-directive
' Creates a copy of the receiver.   ',non-directive
?,non-directive
'@return a copy of the receiver ',non-directive
' Returns a copy of the given _ClassElement_     @param data _ClassElement_ to copy  @return a copy of the argument ',non-directive
' Returns a copy of the given _ClassElement_     ',non-directive
'@param data _ClassElement_ to copy  ',non-directive
'@return a copy of the argument ',non-directive
' Sets the layout data on the given control. Creates a new _ClassElement_ instance and  assigns it to the control by calling _ClassPathElement_.     @param control control whose layout data will be initialized ',directive
' Sets the layout data on the given control. ',non-directive
'Creates a new _ClassElement_ instance and  assigns it to the control by calling _ClassPathElement_.    ',non-directive
?,non-directive
'@param control control whose layout data will be initialized ',non-directive
' _ClassElement_ performs various conversions from device-independent units  (such as DLUs or characters) to pixels. It can be associated with a control or  a font. In the case of a control, the font used by the control at the time  the _ClassElement_ is created is used for the pixel calculations. In the case  of a specific font, the supplied font is used for the calculations.    The control _OSPathElement_or font must not be disposed at the time the _ClassElement_  is created.    @since _ClassPathElement_ ',directive
' _ClassElement_ performs various conversions from device-independent units  (such as DLUs or characters) to pixels. ',non-directive
'It can be associated with a control or  a font. ',non-directive
'In the case of a control, the font used by the control at the time  the _ClassElement_ is created is used for the pixel calculations. ',non-directive
'In the case  of a specific font, the supplied font is used for the calculations.   ',non-directive
' The control _OSPathElement_or font must not be disposed at the time the _ClassElement_  is created.   ',directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the number of pixels corresponding to the height of the given  number of characters.    @param chars             the number of characters  @return the number of pixels ',non-directive
' Returns the number of pixels corresponding to the height of the given  number of characters.   ',non-directive
?,non-directive
'@param chars             the number of characters  ',non-directive
'@return the number of pixels ',non-directive
' Returns the number of pixels corresponding to the given number of  horizontal dialog units.    @param dlus             the number of horizontal dialog units  @return the number of pixels ',non-directive
' Returns the number of pixels corresponding to the given number of  horizontal dialog units.   ',non-directive
?,non-directive
'@param dlus             the number of horizontal dialog units  ',non-directive
'@return the number of pixels ',non-directive
' Returns the number of pixels corresponding to the given number of  vertical dialog units.    @param dlus             the number of vertical dialog units  @return the number of pixels ',non-directive
' Returns the number of pixels corresponding to the given number of  vertical dialog units.   ',non-directive
?,non-directive
'@param dlus             the number of vertical dialog units  ',non-directive
'@return the number of pixels ',non-directive
' Returns the number of pixels corresponding to the width of the given  number of characters.    @param chars             the number of characters  @return the number of pixels ',non-directive
' Returns the number of pixels corresponding to the width of the given  number of characters.   ',non-directive
?,non-directive
'@param chars             the number of characters  ',non-directive
'@return the number of pixels ',non-directive
' Create a _ClassElement_ which will convert device-independent units to  pixels using the specified font.    @param font             the font that should be used for pixel conversions. ',directive
' Create a _ClassElement_ which will convert device-independent units to  pixels using the specified font.   ',non-directive
?,non-directive
'@param font             the font that should be used for pixel conversions. ',non-directive
' The _ClassElement_ is the {@link Layout} used to maintain {@link _ClassElement_} sizes in a   {@link Tree}.    <p>  <b>You can only add the {@link Layout} to a container whose <i>only</i>  child is the {@link Tree} control you want the {@link Layout} applied to.  Don\'t assign the layout directly the {@link Tree}</b>  </p>    @since _ClassPathElement_ ',directive
' The _ClassElement_ is the {',non-directive
'@link Layout} used to maintain {',non-directive
'@link _ClassElement_} sizes in a   {',non-directive
'@link Tree}.   ',non-directive
' <p>  <b>You can only add the {',directive
'@link Layout} to a container whose <i>only</i>  child is the {',directive
'@link Tree} control you want the {',directive
'@link Layout} applied to.  ',directive
'Don\'t assign the layout directly the {',directive
'@link Tree}</b>  </p>    ',directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' {@_ClassElement_}    @since _ClassPathElement_ ',directive
' {@_ClassElement_}    ',non-directive
'@since _ClassPathElement_ ',non-directive
' {@_ClassElement_}    @since _ClassPathElement_ ',directive
' {@_ClassElement_}    ',non-directive
'@since _ClassPathElement_ ',non-directive
' {@_ClassElement_}    @since _ClassPathElement_ ',directive
' {@_ClassElement_}    ',non-directive
'@since _ClassPathElement_ ',non-directive
' {@_ClassElement_}    @since _ClassPathElement_ ',directive
' {@_ClassElement_}    ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' _ClassElement_ creates and initializes grid layouts. There are two ways to use _ClassElement_.  Normally, it is used as a shorthand for writing \"new _ClassElement_()\" and initializing a bunch   of fields. In this case the main benefit is a more concise syntax and the ability to create more  than one identical _ClassElement_ from the same factory. Changing a property of the factory will affect  future layouts created by the factory, but has no effect on layouts that have already been created.    <p>  _ClassElement_ can also generate grid data for all the controls in a layout. This is done with  the _ClassElement_ method. To use this feature:  </p>    <ol>  <li>Create the composite</li>  <li>Create all the controls in the composite</li>  <li>Call _ClassElement_</li>  </ol>    <p>  The order here is important. _ClassElement_ must be called after all the child controls have  been created. _ClassElement_ will not change any layout data that has already been attached  to a child control and it will not recurse into nested composites.   </p>   @since _ClassPathElement_ ',directive
' _ClassElement_ creates and initializes grid layouts. ',non-directive
'There are two ways to use _ClassElement_.  ',non-directive
'Normally, it is used as a shorthand for writing \"new _ClassElement_()\" and initializing a bunch   of fields. ',non-directive
'In this case the main benefit is a more concise syntax and the ability to create more  than one identical _ClassElement_ from the same factory. ',non-directive
'Changing a property of the factory will affect  future layouts created by the factory, but has no effect on layouts that have already been created.   ',directive
' <p>  _ClassElement_ can also generate grid data for all the controls in a layout. ',non-directive
'This is done with  the _ClassElement_ method. ',non-directive
'To use this feature:  </p>    <ol>  ',non-directive
'<li>Create the composite</li>  ',directive
'<li>Create all the controls in the composite</li>  ',directive
'<li>Call _ClassElement_</li>  </ol>  ',directive
'  <p>  The order here is important. ',directive
'_ClassElement_ must be called after all the child controls have  been created. ',directive
'_ClassElement_ will not change any layout data that has already been attached  to a child control and it will not recurse into nested composites.   ',directive
'</p>   ',non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a factory that creates copies of the given layout.    @param l layout to copy  @return a new _ClassElement_ instance that creates copies of the given layout ',non-directive
' Creates a factory that creates copies of the given layout.   ',non-directive
?,non-directive
'@param l layout to copy  ',non-directive
'@return a new _ClassElement_ instance that creates copies of the given layout ',non-directive
' Creates a copy of the reciever.    @return a copy of the reciever ',non-directive
' Creates a copy of the reciever.   ',non-directive
?,non-directive
'@return a copy of the reciever ',non-directive
' Creates a _ClassElement_ that creates _ClassElement_ with the default SWT  values.    <p>  Initial values are:  </p>    <ul>  <li>_ClassElement_(1)</li>  <li>margins(5,5)</li>  <li>_ClassElement_(0,0,0,0)</li>  <li>spacing(5,5)</li>  <li>_ClassElement_(false)</li>  </ul>    @return a _ClassElement_ that creates _ClassElement_ as though created with  their default constructor  @see #_ClassElement_ ',directive
' Creates a _ClassElement_ that creates _ClassElement_ with the default SWT  values.   ',non-directive
' <p>  Initial values are:  </p>    <ul>  ',non-directive
'<li>_ClassElement_(1)</li>  ',non-directive
'<li>margins(5,5)</li>  ',non-directive
'<li>_ClassElement_(0,0,0,0)</li>  ',non-directive
'<li>spacing(5,5)</li>  ',non-directive
'<li>_ClassElement_(false)</li>  </ul>  ',non-directive
?,non-directive
'@return a _ClassElement_ that creates _ClassElement_ as though created with  their default constructor  ',non-directive
'@see #_ClassElement_ ',non-directive
' Creates a _ClassElement_ that creates _ClassElement_ with no margins and   default dialog spacing.    <p>  Initial values are:  </p>    <ul>  <li>_ClassElement_(1)</li>  <li>margins(0,0)</li>  <li>_ClassElement_(0,0,0,0)</li>  <li>spacing(_ClassPathElement_())</li>  <li>_ClassElement_(false)</li>  </ul>    @return a _ClassElement_ that creates _ClassElement_ as though created with  their default constructor  @see #_ClassElement_ ',directive
' Creates a _ClassElement_ that creates _ClassElement_ with no margins and   default dialog spacing.   ',non-directive
' <p>  Initial values are:  </p>    <ul>  ',non-directive
'<li>_ClassElement_(1)</li>  ',non-directive
'<li>margins(0,0)</li>  ',non-directive
'<li>_ClassElement_(0,0,0,0)</li>  ',non-directive
'<li>spacing(_ClassPathElement_())</li>  ',non-directive
'<li>_ClassElement_(false)</li>  </ul>  ',non-directive
?,non-directive
'@return a _ClassElement_ that creates _ClassElement_ as though created with  their default constructor  ',non-directive
'@see #_ClassElement_ ',non-directive
' Sets whether the columns should be forced to be equal width    @param equal true iff the columns should be forced to be equal width  @return this ',directive
' Sets whether the columns should be forced to be equal width    ',non-directive
'@param equal true iff the columns should be forced to be equal width  ',non-directive
'@return this ',non-directive
' Sets the spacing for layouts created with this factory. The spacing  is the distance between cells within the layout.     @param _ClassElement_ horizontal spacing (pixels)  @param _ClassElement_ vertical spacing (pixels)  @return this  @see #margins(Point)  @see #margins(int, int) ',directive
' Sets the spacing for layouts created with this factory. ',non-directive
'The spacing  is the distance between cells within the layout.    ',non-directive
?,non-directive
'@param _ClassElement_ horizontal spacing (pixels)  ',non-directive
'@param _ClassElement_ vertical spacing (pixels)  ',non-directive
'@return this  ',non-directive
'@see #margins(Point)  ',non-directive
'@see #margins(int, int) ',non-directive
' Sets the spacing for layouts created with this factory. The spacing  is the distance between cells within the layout.     @param spacing space between controls in the layout (pixels)  @return this  @see #margins(Point)  @see #margins(int, int) ',directive
' Sets the spacing for layouts created with this factory. ',non-directive
'The spacing  is the distance between cells within the layout.    ',non-directive
?,non-directive
'@param spacing space between controls in the layout (pixels)  ',non-directive
'@return this  ',non-directive
'@see #margins(Point)  ',non-directive
'@see #margins(int, int) ',non-directive
' Sets the margins for layouts created with this factory. The margins  are the distance between the outer cells and the edge of the layout.    @param margins margin size (pixels)  @return this  @see #spacing(Point)  @see #spacing(int, int) ',directive
' Sets the margins for layouts created with this factory. ',non-directive
'The margins  are the distance between the outer cells and the edge of the layout.   ',non-directive
?,non-directive
'@param margins margin size (pixels)  ',non-directive
'@return this  ',non-directive
'@see #spacing(Point)  ',non-directive
'@see #spacing(int, int) ',non-directive
' Sets the margins for layouts created with this factory. The margins  specify the number of pixels of horizontal and vertical margin that will  be placed along the _OSPathElement_right and _OSPathElement_bottom edges of the layout. Note  that thes margins will be added to the ones specified by  {@link #_ClassElement_(int, int, int, int)}.    @param width             margin width (pixels)  @param height             margin height (pixels)  @return this  @see #spacing(Point)  * @see #spacing(int, int) ',directive
' Sets the margins for layouts created with this factory. ',non-directive
'The margins  specify the number of pixels of horizontal and vertical margin that will  be placed along the _OSPathElement_right and _OSPathElement_bottom edges of the layout. ',non-directive
'Note  that thes margins will be added to the ones specified by  {',directive
'@link #_ClassElement_(int, int, int, int)}.   ',directive
?,non-directive
'@param width             margin width (pixels)  ',non-directive
'@param height             margin height (pixels)  ',non-directive
'@return this  ',non-directive
'@see #spacing(Point)  * ',non-directive
'@see #spacing(int, int) ',non-directive
' Sets the margins for layouts created with this factory. The margins  specify the number of pixels of horizontal and vertical margin that will  be placed along the left, right, top, and bottom edges of the layout.  Note that thes margins will be added to the ones specified by  {@link #margins(int, int)}.    <code><pre>      // Construct a _ClassElement_ whose left, right, top, and bottom       // margin sizes are 10, 5, 0, and 15 respectively             Rectangle margins = _ClassPathElement_(10,5,0,15);      _ClassPathElement_()._ClassElement_(margins)._ClassElement_(composite1);  </pre></code>    @param _ClassElement_ rectangle which, when added to the client area of the         layout, returns the outer area of the layout. The x and y values of         the rectangle correspond to the position of the bounds of the          layout with respect to the client area. They should be negative.          The width and height correspond to the relative size of the bounds         of the layout with respect to the client area, and should be positive.   @return this  @see #spacing(Point)  @see #spacing(int, int)    @since _ClassPathElement_ ',directive
' Sets the margins for layouts created with this factory. ',non-directive
'The margins  specify the number of pixels of horizontal and vertical margin that will  be placed along the left, right, top, and bottom edges of the layout.  ',non-directive
'Note that thes margins will be added to the ones specified by  {',directive
'@link #margins(int, int)}.   ',directive
' <code><pre>      // Construct a _ClassElement_ whose left, right, top, and bottom       // margin sizes are 10, 5, 0, and 15 respectively             Rectangle margins = _ClassPathElement_(10,5,0,15);      _ClassPathElement_()._ClassElement_(margins)._ClassElement_(composite1);  </pre></code>    ',directive
'@param _ClassElement_ rectangle which, when added to the client area of the         layout, returns the outer area of the layout. ',non-directive
'The x and y values of         the rectangle correspond to the position of the bounds of the          layout with respect to the client area. ',directive
'They should be negative.          ',directive
'The width and height correspond to the relative size of the bounds         of the layout with respect to the client area, and should be positive.   ',directive
'@return this  ',non-directive
'@see #spacing(Point)  ',non-directive
'@see #spacing(int, int)    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Sets the number of columns in the layout    @param _ClassElement_ number of columns in the layout  @return this ',non-directive
' Sets the number of columns in the layout    ',non-directive
'@param _ClassElement_ number of columns in the layout  ',non-directive
'@return this ',non-directive
' Creates a new _ClassElement_, and initializes it with values from the factory.    @return a new initialized _ClassElement_.  @see #_ClassElement_ ',non-directive
' Creates a new _ClassElement_, and initializes it with values from the factory.   ',non-directive
?,non-directive
'@return a new initialized _ClassElement_.  ',non-directive
'@see #_ClassElement_ ',non-directive
' Creates a new _ClassElement_ and attaches it to the given composite.  Does not create the _ClassElement_ of any of the controls in the composite.    @param c composite whose layout will be set  @see #_ClassElement_  @see #create  @see _ClassElement_ ',non-directive
' Creates a new _ClassElement_ and attaches it to the given composite.  ',non-directive
'Does not create the _ClassElement_ of any of the controls in the composite.   ',directive
?,non-directive
'@param c composite whose layout will be set  ',non-directive
'@see #_ClassElement_  ',non-directive
'@see #create  ',non-directive
'@see _ClassElement_ ',non-directive
' Copies the given _ClassElement_ instance    @param l layout to copy  @return a new _ClassElement_ ',non-directive
' Copies the given _ClassElement_ instance    ',non-directive
'@param l layout to copy  ',non-directive
'@return a new _ClassElement_ ',non-directive
' Contains various layout constants    @since _ClassPathElement_ ',non-directive
' Contains various layout constants    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the default dialog margins, in pixels    @return the default dialog margins, in pixels ',non-directive
' Returns the default dialog margins, in pixels    ',non-directive
'@return the default dialog margins, in pixels ',non-directive
' Returns the default dialog spacing, in pixels    @return the default dialog spacing, in pixels ',non-directive
' Returns the default dialog spacing, in pixels    ',non-directive
'@return the default dialog spacing, in pixels ',non-directive
' Returns the default minimum button size, in pixels    @return the default minimum button size, in pixels ',non-directive
' Returns the default minimum button size, in pixels    ',non-directive
'@return the default minimum button size, in pixels ',non-directive
?,non-directive
?,non-directive
' This class provides a convenient shorthand for creating and initialising  _ClassElement_. This offers several benefits over creating _ClassElement_ the normal way:    <ul>  <li>The same factory can be used many times to create several _ClassElement_  instances</li>  <li>The setters on _ClassElement_ all return \"this\", allowing them to be  chained</li>  </ul>    @since _ClassPathElement_ ',non-directive
' This class provides a convenient shorthand for creating and initialising  _ClassElement_. ',non-directive
'This offers several benefits over creating _ClassElement_ the normal way:    <ul>  ',non-directive
'<li>The same factory can be used many times to create several _ClassElement_  instances</li>  ',directive
'<li>The setters on _ClassElement_ all return \"this\", allowing them to be  chained</li>  </ul>  ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a new _ClassElement_ initialized with the SWT defaults.    <p>  Initial values are:  </p>    <ul>  <li>exclude(false)</li>  <li>hint(_ClassPathElement_, _ClassPathElement_)</li>  </ul>    @return a new _ClassElement_ instance ',non-directive
' Creates a new _ClassElement_ initialized with the SWT defaults.   ',non-directive
' <p>  Initial values are:  </p>    <ul>  ',non-directive
'<li>exclude(false)</li>  ',non-directive
'<li>hint(_ClassPathElement_, _ClassPathElement_)</li>  </ul>  ',non-directive
?,non-directive
'@return a new _ClassElement_ instance ',non-directive
' Creates a new _ClassElement_ that creates copies of the given _ClassElement_ by  default.    @param data             _ClassElement_ to copy  @return a new _ClassElement_ that creates copies of the argument by          default ',non-directive
' Creates a new _ClassElement_ that creates copies of the given _ClassElement_ by  default.   ',non-directive
?,non-directive
'@param data             _ClassElement_ to copy  ',non-directive
'@return a new _ClassElement_ that creates copies of the argument by          default ',non-directive
' Returns a copy of the given _ClassElement_    @param data             _ClassElement_ to copy  @return a copy of the argument ',non-directive
' Returns a copy of the given _ClassElement_    ',non-directive
'@param data             _ClassElement_ to copy  ',non-directive
'@return a copy of the argument ',non-directive
' Instructs the _ClassElement_ to ignore this control when performing layouts.    @param _ClassElement_             true iff the control should be excluded from layouts  @return this ',directive
' Instructs the _ClassElement_ to ignore this control when performing layouts.   ',non-directive
?,non-directive
'@param _ClassElement_             true iff the control should be excluded from layouts  ',non-directive
'@return this ',non-directive
' Creates a new _ClassElement_ instance. All attributes of the _ClassElement_ instance  will be initialised by the factory.    @return a new _ClassElement_ instance ',non-directive
' Creates a new _ClassElement_ instance. ',non-directive
'All attributes of the _ClassElement_ instance  will be initialised by the factory.   ',non-directive
?,non-directive
'@return a new _ClassElement_ instance ',non-directive
' Creates a copy of the receiver.    @return a copy of the receiver ',non-directive
' Creates a copy of the receiver.   ',non-directive
?,non-directive
'@return a copy of the receiver ',non-directive
' Sets the layout data on the given control. Creates a new _ClassElement_ instance  and assigns it to the control by calling _ClassPathElement_.    @param control             control whose layout data will be initialised ',directive
' Sets the layout data on the given control. ',non-directive
'Creates a new _ClassElement_ instance  and assigns it to the control by calling _ClassPathElement_.   ',directive
?,non-directive
'@param control             control whose layout data will be initialised ',non-directive
' Sets the width and height hints. The width and height hints override the  control\'s preferred size. If either hint is set to _ClassPathElement_, the  control\'s preferred size is used.    @param _ClassElement_             horizontal hint (pixels), or _ClassPathElement_ to use the control\'s             preferred size  @param _ClassElement_             vertical hint (pixels), or _ClassPathElement_ to use the control\'s             preferred size  @return this ',directive
' Sets the width and height hints. ',non-directive
'The width and height hints override the  control\'s preferred size. ',directive
'If either hint is set to _ClassPathElement_, the  control\'s preferred size is used.   ',directive
?,non-directive
'@param _ClassElement_             horizontal hint (pixels), or _ClassPathElement_ to use the control\'s             preferred size  ',non-directive
'@param _ClassElement_             vertical hint (pixels), or _ClassPathElement_ to use the control\'s             preferred size  ',non-directive
'@return this ',non-directive
' Sets the width and height hints. The width and height hints override the  control\'s preferred size. If either hint is set to _ClassPathElement_, the  control\'s preferred size is used.    @param hint             size (pixels) to be used instead of the control\'s preferred             size. If the x or y values are set to _ClassPathElement_, the             control\'s _ClassElement_() method will be used to obtain that             dimension of the preferred size.  @return this ',directive
' Sets the width and height hints. ',non-directive
'The width and height hints override the  control\'s preferred size. ',directive
'If either hint is set to _ClassPathElement_, the  control\'s preferred size is used.   ',directive
?,non-directive
'@param hint             size (pixels) to be used instead of the control\'s preferred             size. ',non-directive
'If the x or y values are set to _ClassPathElement_, the             control\'s _ClassElement_() method will be used to obtain that             dimension of the preferred size.  ',directive
'@return this ',non-directive
' JFaceColors is the class that stores references  to all of the colors used by JFace. ',non-directive
' JFaceColors is the class that stores references  to all of the colors used by JFace. ',non-directive
' @param display the display the color is from  @return the Color used for banner backgrounds  @see SWT#COLOR_LIST_BACKGROUND  @see Display#_ClassElement_(int) ',non-directive
?,non-directive
'@param display the display the color is from  ',non-directive
'@return the Color used for banner backgrounds  ',non-directive
'@see SWT#COLOR_LIST_BACKGROUND  ',non-directive
'@see Display#_ClassElement_(int) ',non-directive
' @param display the display the color is from  @return the Color used for banner foregrounds  @see SWT#COLOR_LIST_FOREGROUND  @see Display#_ClassElement_(int) ',non-directive
?,non-directive
'@param display the display the color is from  ',non-directive
'@return the Color used for banner foregrounds  ',non-directive
'@see SWT#COLOR_LIST_FOREGROUND  ',non-directive
'@see Display#_ClassElement_(int) ',non-directive
' @param display the display the color is from  @return the background Color for widgets that display errors.  @see SWT#COLOR_WIDGET_BACKGROUND  @see Display#_ClassElement_(int) ',directive
?,non-directive
'@param display the display the color is from  ',non-directive
'@return the background Color for widgets that display errors.  ',non-directive
'@see SWT#COLOR_WIDGET_BACKGROUND  ',non-directive
'@see Display#_ClassElement_(int) ',non-directive
' @param display the display the color is from  @return the border Color for widgets that display errors.  @see SWT#COLOR_WIDGET_DARK_SHADOW  @see Display#_ClassElement_(int) ',directive
?,non-directive
'@param display the display the color is from  ',non-directive
'@return the border Color for widgets that display errors.  ',non-directive
'@see SWT#COLOR_WIDGET_DARK_SHADOW  ',non-directive
'@see Display#_ClassElement_(int) ',non-directive
' @param display the display the color is from  @return the default color to use for displaying errors.  @see _ClassElement_#get(String)  @see JFacePreferences#ERROR_COLOR ',directive
?,non-directive
'@param display the display the color is from  ',non-directive
'@return the default color to use for displaying errors.  ',non-directive
'@see _ClassElement_#get(String)  ',non-directive
'@see JFacePreferences#ERROR_COLOR ',non-directive
' @param display the display the color is from  @return the default color to use for displaying hyperlinks.  @see _ClassElement_#get(String)  @see JFacePreferences#HYPERLINK_COLOR ',non-directive
?,non-directive
'@param display the display the color is from  ',non-directive
'@return the default color to use for displaying hyperlinks.  ',non-directive
'@see _ClassElement_#get(String)  ',non-directive
'@see JFacePreferences#HYPERLINK_COLOR ',non-directive
' @param display the display the color is from  @return the default color to use for displaying active hyperlinks.  @see _ClassElement_#get(String)  @see JFacePreferences#ACTIVE_HYPERLINK_COLOR ',non-directive
?,non-directive
'@param display the display the color is from  ',non-directive
'@return the default color to use for displaying active hyperlinks.  ',non-directive
'@see _ClassElement_#get(String)  ',non-directive
'@see JFacePreferences#ACTIVE_HYPERLINK_COLOR ',non-directive
' Clear out the cached color for name. This is generally  done when the color preferences changed and any cached colors  may be disposed. Users of the colors in this class should add a IPropertyChangeListener  to detect when any of these colors change.  @param _ClassElement_ name of the color    @deprecated JFaceColors no longer maintains a cache of colors.  This job   is now handled by the _ClassElement_. ',directive
' Clear out the cached color for name. ',non-directive
'This is generally  done when the color preferences changed and any cached colors  may be disposed. ',directive
'Users of the colors in this class should add a IPropertyChangeListener  to detect when any of these colors change.  ',directive
'@param _ClassElement_ name of the color    ',non-directive
'@deprecated JFaceColors no longer maintains a cache of colors.  ',directive
'This job   is now handled by the _ClassElement_. ',directive
' Dispose of all allocated colors. Called on workbench  shutdown.    @deprecated JFaceColors no longer maintains a cache of colors.  This job   is now handled by the _ClassElement_. ',directive
' Dispose of all allocated colors. ',non-directive
'Called on workbench  shutdown.   ',directive
?,non-directive
'@deprecated JFaceColors no longer maintains a cache of colors.  ',directive
'This job   is now handled by the _ClassElement_. ',directive
' Set the foreground and background colors of the  control to the specified values. If the values are  null than ignore them.   @param control the control the foreground _OSPathElement_or background color should be set    @param foreground Color the foreground color (maybe <code>null</code>)  @param background Color the background color (maybe <code>null</code>) ',directive
' Set the foreground and background colors of the  control to the specified values. ',non-directive
'If the values are  null than ignore them.   ',directive
'@param control the control the foreground _OSPathElement_or background color should be set    ',non-directive
'@param foreground Color the foreground color (maybe <code>null</code>)  ',directive
'@param background Color the background color (maybe <code>null</code>) ',directive
?,non-directive
?,non-directive
' Creates and returns a new image descriptor from a file.  Convenience method for  <code>new _ClassElement_(location,filename)</code>.   @param location the class whose resource directory contain the file  @param filename the file name  @return a new image descriptor ',non-directive
' Creates and returns a new image descriptor from a file.  ',non-directive
'Convenience method for  <code>new _ClassElement_(location,filename)</code>.   ',non-directive
'@param location the class whose resource directory contain the file  ',non-directive
'@param filename the file name  ',non-directive
'@return a new image descriptor ',non-directive
' Creates and returns a new image descriptor given _ClassElement_  describing the image.    @since _ClassPathElement_    @param data contents of the image  @return newly created image descriptor ',non-directive
' Creates and returns a new image descriptor given _ClassElement_  describing the image.   ',non-directive
?,non-directive
'@since _ClassPathElement_    ',non-directive
'@param data contents of the image  ',non-directive
'@return newly created image descriptor ',non-directive
' Creates and returns a new image descriptor for the given image. Note   that disposing the original Image will cause the descriptor to become invalid.    @since _ClassPathElement_    @param img image to create  @return a newly created image descriptor ',directive
' Creates and returns a new image descriptor for the given image. ',non-directive
'Note   that disposing the original Image will cause the descriptor to become invalid.   ',directive
?,non-directive
'@since _ClassPathElement_    ',non-directive
'@param img image to create  ',non-directive
'@return a newly created image descriptor ',non-directive
' Creates and returns a new image descriptor from a URL.   @param url The URL of the image file.  @return a new image descriptor ',non-directive
' Creates and returns a new image descriptor from a URL.   ',non-directive
'@param url The URL of the image file.  ',non-directive
'@return a new image descriptor ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates and returns a new SWT <code>_ClassElement_</code> object  for this image descriptor.  Note that each call returns a new SWT image data object.  <p>  This framework method is declared public so that it is  possible to request an image descriptor\'s image data without  creating an SWT image object.  </p>  <p>  Returns <code>null</code> if the image data could not be created.  </p>   @return a new image data or <code>null</code> ',directive
' Creates and returns a new SWT <code>_ClassElement_</code> object  for this image descriptor.  ',non-directive
'Note that each call returns a new SWT image data object.  ',directive
'<p>  This framework method is declared public so that it is  possible to request an image descriptor\'s image data without  creating an SWT image object.  ',directive
'</p>  <p>  Returns <code>null</code> if the image data could not be created.  ',directive
'</p>   ',non-directive
'@return a new image data or <code>null</code> ',directive
' Returns the shared image descriptor for a missing image.   @return the missing image descriptor ',non-directive
' Returns the shared image descriptor for a missing image.   ',non-directive
'@return the missing image descriptor ',non-directive
' Constructs an image descriptor. ',non-directive
' Constructs an image descriptor. ',non-directive
'  A small red square used to warn that an image cannot be created.  <p> ',directive
'  A small red square used to warn that an image cannot be created.  ',non-directive
'<p> ',non-directive
' Returns the <code>color</code> associated with the given symbolic color   name, or <code>null</code> if no such definition exists.    @param _ClassElement_ symbolic color name  @return the <code>Color</code> or <code>null</code> ',non-directive
' Returns the <code>color</code> associated with the given symbolic color   name, or <code>null</code> if no such definition exists.   ',directive
?,non-directive
'@param _ClassElement_ symbolic color name  ',non-directive
'@return the <code>Color</code> or <code>null</code> ',directive
?,non-directive
?,non-directive
' Returns the color data associated with the given symbolic color name.   @param _ClassElement_ symbolic color name.  @return the <code>RGB</code> data, or <code>null</code> if the symbolic name  is not valid. ',non-directive
' Returns the color data associated with the given symbolic color name.   ',non-directive
'@param _ClassElement_ symbolic color name.  ',non-directive
'@return the <code>RGB</code> data, or <code>null</code> if the symbolic name  is not valid. ',directive
' Returns the color descriptor associated with the given symbolic color  name. As of _ClassPathElement_ if this color is not defined then an unspecified color  is returned. Users that wish to ensure a reasonable default value should  use {@link #_ClassElement_(String, _ClassElement_)} instead.    @since _ClassPathElement_    @param _ClassElement_  @return the color descriptor associated with the given symbolic color          name or an unspecified sentinel. ',directive
' Returns the color descriptor associated with the given symbolic color  name. ',non-directive
'As of _ClassPathElement_ if this color is not defined then an unspecified color  is returned. ',directive
'Users that wish to ensure a reasonable default value should  use {',directive
'@link #_ClassElement_(String, _ClassElement_)} instead.   ',directive
?,non-directive
'@since _ClassPathElement_    ',non-directive
'@param _ClassElement_  ',non-directive
'@return the color descriptor associated with the given symbolic color          name or an unspecified sentinel. ',directive
' Returns the color descriptor associated with the given symbolic color  name. If this name does not exist within the registry the supplied  default value will be used.    @param _ClassElement_  @param _ClassElement_  @return the color descriptor associated with the given symbolic color          name or the default  @since _ClassPathElement_ ',non-directive
' Returns the color descriptor associated with the given symbolic color  name. ',non-directive
'If this name does not exist within the registry the supplied  default value will be used.   ',directive
?,non-directive
'@param _ClassElement_  ',non-directive
'@param _ClassElement_  ',non-directive
'@return the color descriptor associated with the given symbolic color          name or the default  ',directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Adds (or replaces) a color to this color registry under the given   symbolic name.  <p>  A property change event is reported whenever the mapping from a symbolic  name to a color changes. The source of the event is this registry; the  property name is the symbolic color name.  </p>    @param _ClassElement_ the symbolic color name  @param _ClassElement_ an <code>RGB</code> object ',non-directive
' Adds (or replaces) a color to this color registry under the given   symbolic name.  ',non-directive
'<p>  A property change event is reported whenever the mapping from a symbolic  name to a color changes. ',directive
'The source of the event is this registry; the  property name is the symbolic color name.  ',non-directive
'</p>    ',non-directive
'@param _ClassElement_ the symbolic color name  ',non-directive
'@param _ClassElement_ an <code>RGB</code> object ',non-directive
' Create a new instance of the receiver that is hooked to the current   display.    @see _ClassPathElement_#_ClassElement_() ',non-directive
' Create a new instance of the receiver that is hooked to the current   display.   ',non-directive
?,non-directive
'@see _ClassPathElement_#_ClassElement_() ',non-directive
' Create a new instance of the receiver.    @param display the <code>Display</code> to hook into. ',non-directive
' Create a new instance of the receiver.   ',non-directive
?,non-directive
'@param display the <code>Display</code> to hook into. ',non-directive
' Create a new instance of the receiver.    @param display the <code>Display</code> to hook into  @param cleanOnDisplayDisposal             whether all fonts allocated by this <code>_ClassElement_</code>             should be disposed when the display is disposed  @since _ClassPathElement_ ',directive
' Create a new instance of the receiver.   ',non-directive
?,non-directive
'@param display the <code>Display</code> to hook into  ',non-directive
'@param cleanOnDisplayDisposal             whether all fonts allocated by this <code>_ClassElement_</code>             should be disposed when the display is disposed  ',non-directive
'@since _ClassPathElement_ ',non-directive
' This registries <code>Display</code>. All colors will be allocated using   it. ',non-directive
' This registries <code>Display</code>. ',non-directive
'All colors will be allocated using   it. ',non-directive
' Runnable that cleans up the manager on disposal of the display. ',non-directive
' Runnable that cleans up the manager on disposal of the display. ',non-directive
' Lightweight descriptor for an SWT color. Each _ClassElement_ will create a particular SWT   Color on demand. This object will be compared so _ClassElement_(...) and equals(...) must   return meaningful values.    @since _ClassPathElement_ ',directive
' Lightweight descriptor for an SWT color. ',non-directive
'Each _ClassElement_ will create a particular SWT   Color on demand. ',non-directive
'This object will be compared so _ClassElement_(...) and equals(...) must   return meaningful values.   ',directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a _ClassElement_ from an existing Color, given the Device associated  with the original Color. This is the usual way to convert a Color into  a _ClassElement_. Note that the returned _ClassElement_ depends on the  original Color, and disposing the Color will invalidate the _ClassElement_.    @deprecated use {@link _ClassElement_#_ClassElement_(Color)}    @since _ClassPathElement_   @param _ClassElement_ Color to convert into a _ClassElement_.  @param _ClassElement_ this must be the same Device that was passed into the  original Color\'s constructor.  @return a newly created _ClassElement_ that describes the given Color. ',directive
' Creates a _ClassElement_ from an existing Color, given the Device associated  with the original Color. ',non-directive
'This is the usual way to convert a Color into  a _ClassElement_. ',non-directive
'Note that the returned _ClassElement_ depends on the  original Color, and disposing the Color will invalidate the _ClassElement_.   ',directive
?,non-directive
'@deprecated use {',directive
'@link _ClassElement_#_ClassElement_(Color)}    ',directive
'@since _ClassPathElement_   ',non-directive
'@param _ClassElement_ Color to convert into a _ClassElement_.  ',non-directive
'@param _ClassElement_ this must be the same Device that was passed into the  original Color\'s constructor.  ',directive
'@return a newly created _ClassElement_ that describes the given Color. ',non-directive
' Creates a _ClassElement_ from an existing color.     The returned _ClassElement_ depends on the original Color. Disposing  the original colour while the color descriptor is still in use may cause   SWT to throw a graphic disposed exception.    @since _ClassPathElement_   @param _ClassElement_ Color to generate a _ClassElement_ from  @return a newly created _ClassElement_ ',directive
' Creates a _ClassElement_ from an existing color.    ',non-directive
' The returned _ClassElement_ depends on the original Color. ',non-directive
'Disposing  the original colour while the color descriptor is still in use may cause   SWT to throw a graphic disposed exception.   ',directive
?,non-directive
'@since _ClassPathElement_   ',non-directive
'@param _ClassElement_ Color to generate a _ClassElement_ from  ',non-directive
'@return a newly created _ClassElement_ ',non-directive
' Returns a color descriptor for the given RGB values  @since _ClassPathElement_    @param _ClassElement_ RGB values to create  @return a new _ClassElement_ ',non-directive
' Returns a color descriptor for the given RGB values  ',non-directive
'@since _ClassPathElement_    ',non-directive
'@param _ClassElement_ RGB values to create  ',non-directive
'@return a new _ClassElement_ ',non-directive
' Returns the Color described by this descriptor.    @param device SWT device on which to allocate the Color  @return a newly allocated SWT Color object (never null)  @throws _ClassElement_ if unable to allocate the Color ',directive
' Returns the Color described by this descriptor.   ',non-directive
?,non-directive
'@param device SWT device on which to allocate the Color  ',non-directive
'@return a newly allocated SWT Color object (never null)  ',directive
'@throws _ClassElement_ if unable to allocate the Color ',directive
' Undoes whatever was done by _ClassElement_.     @since _ClassPathElement_    @param _ClassElement_ a Color that was previously allocated by an equal _ClassElement_ ',non-directive
' Undoes whatever was done by _ClassElement_.    ',non-directive
?,non-directive
'@since _ClassPathElement_    ',non-directive
'@param _ClassElement_ a Color that was previously allocated by an equal _ClassElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns the image associated with the given key in this registry,   or <code>null</code> if none.    @param key the key  @return the image, or <code>null</code> if none ',non-directive
' Returns the image associated with the given key in this registry,   or <code>null</code> if none.   ',directive
?,non-directive
'@param key the key  ',non-directive
'@return the image, or <code>null</code> if none ',directive
' Returns the descriptor associated with the given key in this registry,   or <code>null</code> if none.   @param key the key  @return the descriptor, or <code>null</code> if none  @since _ClassPathElement_ ',non-directive
' Returns the descriptor associated with the given key in this registry,   or <code>null</code> if none.   ',directive
'@param key the key  ',non-directive
'@return the descriptor, or <code>null</code> if none  ',directive
'@since _ClassPathElement_ ',non-directive
' Adds (or replaces) an image descriptor to this registry. The first time  this new entry is retrieved, the image descriptor\'s image will be computed   (via </code>_ClassPathElement_</code>) and remembered.   This method replaces an existing image descriptor associated with the   given key, but fails if there is a real image associated with it.   @param key the key  @param descriptor the _ClassElement_  @exception _ClassElement_ if the key already exists ',non-directive
' Adds (or replaces) an image descriptor to this registry. ',non-directive
'The first time  this new entry is retrieved, the image descriptor\'s image will be computed   (via </code>_ClassPathElement_</code>) and remembered.   ',directive
'This method replaces an existing image descriptor associated with the   given key, but fails if there is a real image associated with it.   ',directive
'@param key the key  ',non-directive
'@param descriptor the _ClassElement_  ',non-directive
'@exception _ClassElement_ if the key already exists ',directive
' Removes an image from this registry.    If an SWT image was allocated, it is disposed.  This method has no effect if there is no image or descriptor for the given key.  @param key the key ',non-directive
' Removes an image from this registry.    ',non-directive
'If an SWT image was allocated, it is disposed.  ',directive
'This method has no effect if there is no image or descriptor for the given key.  ',directive
'@param key the key ',non-directive
' Disposes this image registry, disposing any images  that were allocated for it, and clearing its entries.    @since _ClassPathElement_ ',non-directive
' Disposes this image registry, disposing any images  that were allocated for it, and clearing its entries.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Creates an empty image registry using the given resource manager to allocate images.    @param manager the resource manager used to allocate images    @since _ClassPathElement_ ',non-directive
' Creates an empty image registry using the given resource manager to allocate images.   ',non-directive
?,non-directive
'@param manager the resource manager used to allocate images    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Creates an empty image registry.    @param display this <code>Display</code> must not be          <code>null</code> and must not be disposed in order         to use this registry ',directive
' Creates an empty image registry.   ',non-directive
?,non-directive
'@param display this <code>Display</code> must not be          <code>null</code> and must not be disposed in order         to use this registry ',directive
' A local registry that shares its resources with some global registry.  _ClassElement_ is typically used to safeguard against leaks. Clients  can use a nested registry to allocate and deallocate resources in the  global registry. Calling dispose() on the nested registry will deallocate  everything allocated for the nested registry without affecting the rest  of the global registry.  <p>  A nested registry can be used to manage the resources for, say, a dialog  box.  </p>  @since _ClassPathElement_ ',directive
' A local registry that shares its resources with some global registry.  ',non-directive
'_ClassElement_ is typically used to safeguard against leaks. ',directive
'Clients  can use a nested registry to allocate and deallocate resources in the  global registry. ',non-directive
'Calling dispose() on the nested registry will deallocate  everything allocated for the nested registry without affecting the rest  of the global registry.  ',directive
'<p>  A nested registry can be used to manage the resources for, say, a dialog  box.  ',non-directive
'</p>  ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a local registry that delegates to the given global registry  for all resource allocation and deallocation.     @param _ClassElement_ global registry  ',non-directive
' Creates a local registry that delegates to the given global registry  for all resource allocation and deallocation.    ',non-directive
?,non-directive
'@param _ClassElement_ global registry  ',non-directive
' Creates a local registry that wraps the given global registry. Anything  allocated by this registry will be automatically cleaned up with the given  control is disposed. Note that registries created in this way should not  be used to allocate any resource that must outlive the given control.    @param _ClassElement_ global registry that handles resource allocation  @param owner control whose disposal will trigger cleanup of everything   in the registry. ',directive
' Creates a local registry that wraps the given global registry. ',non-directive
'Anything  allocated by this registry will be automatically cleaned up with the given  control is disposed. ',non-directive
'Note that registries created in this way should not  be used to allocate any resource that must outlive the given control.   ',directive
?,non-directive
'@param _ClassElement_ global registry that handles resource allocation  ',non-directive
'@param owner control whose disposal will trigger cleanup of everything   in the registry. ',non-directive
' Manages SWT resources for a particular device.     <p>  IMPORTANT: in most cases clients should use a <code>_ClassElement_</code> instead of a  <code>_ClassElement_</code>. To create a resource manager on a particular display,   use <code>new _ClassElement_(_ClassPathElement_(_ClassElement_))</code>.  <code>_ClassElement_</code> should only be used directly when managing  resources for a device other than a Display (such as a printer).    </p>    @see _ClassElement_    @since _ClassPathElement_ ',directive
' Manages SWT resources for a particular device.    ',non-directive
' <p>  IMPORTANT: in most cases clients should use a <code>_ClassElement_</code> instead of a  <code>_ClassElement_</code>. ',directive
'To create a resource manager on a particular display,   use <code>new _ClassElement_(_ClassPathElement_(_ClassElement_))</code>.  ',directive
'<code>_ClassElement_</code> should only be used directly when managing  resources for a device other than a Display (such as a printer).    ',directive
'</p>    ',non-directive
'@see _ClassElement_    ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a new registry for the given device.    @param device device to manage ',non-directive
' Creates a new registry for the given device.   ',non-directive
?,non-directive
'@param device device to manage ',non-directive
' Thrown when allocation of an SWT device resource fails    @since _ClassPathElement_ ',non-directive
' Thrown when allocation of an SWT device resource fails    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the cause of this throwable or <code>null</code> if the  cause is nonexistent or unknown.     @return the cause or <code>null</code>  @since _ClassPathElement_ ',non-directive
' Returns the cause of this throwable or <code>null</code> if the  cause is nonexistent or unknown.    ',directive
?,non-directive
'@return the cause or <code>null</code>  ',directive
'@since _ClassPathElement_ ',non-directive
' Creates a _ClassElement_ indicating an error attempting to  create a resource and an embedded low-level exception describing the cause     @param _ClassElement_  @param cause cause of the exception (or null if none) ',directive
' Creates a _ClassElement_ indicating an error attempting to  create a resource and an embedded low-level exception describing the cause     ',non-directive
'@param _ClassElement_  ',non-directive
'@param cause cause of the exception (or null if none) ',directive
' Creates a _ClassElement_ indicating an error attempting to  create a resource     @param _ClassElement_ ',directive
' Creates a _ClassElement_ indicating an error attempting to  create a resource     ',non-directive
'@param _ClassElement_ ',non-directive
' Instances of this class can allocate and dispose SWT resources. Each  instance describes a particular resource (such as a Color, Font, or Image)  and can create and destroy that resource on demand. _ClassElement_  are managed by a _ClassElement_.    @see _ClassPathElement_    @since _ClassPathElement_ ',non-directive
' Instances of this class can allocate and dispose SWT resources. ',non-directive
'Each  instance describes a particular resource (such as a Color, Font, or Image)  and can create and destroy that resource on demand. ',non-directive
'_ClassElement_  are managed by a _ClassElement_.   ',non-directive
?,non-directive
'@see _ClassPathElement_    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Creates the resource described by this descriptor    @since _ClassPathElement_    @param device the Device on which to allocate the resource  @return the newly allocated resource (not null)  @throws _ClassElement_ if unable to allocate the resource ',non-directive
' Creates the resource described by this descriptor    ',non-directive
'@since _ClassPathElement_    ',non-directive
'@param device the Device on which to allocate the resource  ',non-directive
'@return the newly allocated resource (not null)  ',directive
'@throws _ClassElement_ if unable to allocate the resource ',directive
' Undoes everything that was done by a previous call to create(...), given  the object that was returned by create(...).    @since _ClassPathElement_    @param _ClassElement_ an object that was returned by an equal   descriptor in a previous call to _ClassElement_(...). ',directive
' Undoes everything that was done by a previous call to create(...), given  the object that was returned by create(...).   ',non-directive
?,non-directive
'@since _ClassPathElement_    ',non-directive
'@param _ClassElement_ an object that was returned by an equal   descriptor in a previous call to _ClassElement_(...). ',non-directive
?,non-directive
?,non-directive
' Lightweight descriptor for a font. Creates the described font on demand.  Subclasses can implement different ways of describing a font. These objects  will be compared, so _ClassElement_(...) and equals(...) must return something   meaningful.    @since _ClassPathElement_ ',directive
' Lightweight descriptor for a font. ',non-directive
'Creates the described font on demand.  ',non-directive
'Subclasses can implement different ways of describing a font. ',directive
'These objects  will be compared, so _ClassElement_(...) and equals(...) must return something   meaningful.   ',directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a _ClassElement_ that describes an existing font. The resulting  descriptor depends on the original Font, and disposing the original Font  while the descriptor is still in use may cause SWT to throw a graphic  disposed exception.    @since _ClassPathElement_   @param font font to create  @return a newly created _ClassElement_ that describes the given font ',directive
' Creates a _ClassElement_ that describes an existing font. ',non-directive
'The resulting  descriptor depends on the original Font, and disposing the original Font  while the descriptor is still in use may cause SWT to throw a graphic  disposed exception.   ',directive
?,non-directive
'@since _ClassPathElement_   ',non-directive
'@param font font to create  ',non-directive
'@return a newly created _ClassElement_ that describes the given font ',non-directive
' Creates a new _ClassElement_ given the an array of _ClassElement_ that describes   the font.    @since _ClassPathElement_   @param data an array of _ClassElement_ that describes the font (will be passed into  the Font\'s constructor)  @return a _ClassElement_ that describes the given font ',non-directive
' Creates a new _ClassElement_ given the an array of _ClassElement_ that describes   the font.   ',non-directive
?,non-directive
'@since _ClassPathElement_   ',non-directive
'@param data an array of _ClassElement_ that describes the font (will be passed into  the Font\'s constructor)  ',non-directive
'@return a _ClassElement_ that describes the given font ',non-directive
' Creates a new _ClassElement_ given the associated _ClassElement_    @param data _ClassElement_ describing the font to create  @return a newly created _ClassElement_ ',non-directive
' Creates a new _ClassElement_ given the associated _ClassElement_    ',non-directive
'@param data _ClassElement_ describing the font to create  ',non-directive
'@return a newly created _ClassElement_ ',non-directive
' Creates a new _ClassElement_ given an OS-specific font name, height, and style.    @see Font#Font(_ClassPathElement_, _ClassPathElement_, int, int)   @param name os-specific font name  @param height height (pixels)  @param style a bitwise combination of NORMAL, BOLD, ITALIC   @return a new _ClassElement_ ',non-directive
' Creates a new _ClassElement_ given an OS-specific font name, height, and style.   ',non-directive
?,non-directive
'@see Font#Font(_ClassPathElement_, _ClassPathElement_, int, int)   ',non-directive
'@param name os-specific font name  ',non-directive
'@param height height (pixels)  ',non-directive
'@param style a bitwise combination of NORMAL, BOLD, ITALIC   ',non-directive
'@return a new _ClassElement_ ',non-directive
' Returns the set of _ClassElement_ associated with this font. Modifying the elements  in the returned array has no effect on the original _ClassElement_.    @return the set of _ClassElement_ associated with this font  @since _ClassPathElement_ ',non-directive
' Returns the set of _ClassElement_ associated with this font. ',non-directive
'Modifying the elements  in the returned array has no effect on the original _ClassElement_.   ',non-directive
?,non-directive
'@return the set of _ClassElement_ associated with this font  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns an array of _ClassElement_ containing copies of the _ClassElement_  from the original.     @param original array to copy  @return a deep copy of the original array  @since _ClassPathElement_ ',non-directive
' Returns an array of _ClassElement_ containing copies of the _ClassElement_  from the original.    ',non-directive
?,non-directive
'@param original array to copy  ',non-directive
'@return a deep copy of the original array  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns a copy of the original _ClassElement_    @param next _ClassElement_ to copy  @return a copy of the given _ClassElement_  @since _ClassPathElement_ ',non-directive
' Returns a copy of the original _ClassElement_    ',non-directive
'@param next _ClassElement_ to copy  ',non-directive
'@return a copy of the given _ClassElement_  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns a _ClassElement_ that is equivalent to the reciever, but uses  the given style bits.     <p>Does not modify the reciever.</p>    @param style a bitwise combination of _ClassPathElement_, _ClassPathElement_ and _ClassPathElement_  @return a new _ClassElement_ with the given style    @since _ClassPathElement_ ',non-directive
' Returns a _ClassElement_ that is equivalent to the reciever, but uses  the given style bits.    ',non-directive
' <p>Does not modify the reciever.</p>    ',directive
'@param style a bitwise combination of _ClassPathElement_, _ClassPathElement_ and _ClassPathElement_  ',non-directive
'@return a new _ClassElement_ with the given style    ',non-directive
'@since _ClassPathElement_ ',non-directive
' <p>Returns a _ClassElement_ that is equivalent to the reciever, but  has the given style bits, in addition to any styles the reciever already has.</p>    <p>Does not modify the reciever.</p>    @param style a bitwise combination of _ClassPathElement_, _ClassPathElement_ and _ClassPathElement_  @return a new _ClassElement_ with the given additional style bits  @since _ClassPathElement_ ',directive
' <p>Returns a _ClassElement_ that is equivalent to the reciever, but  has the given style bits, in addition to any styles the reciever already has.</p>    <p>Does not modify the reciever.</p>    ',directive
'@param style a bitwise combination of _ClassPathElement_, _ClassPathElement_ and _ClassPathElement_  ',non-directive
'@return a new _ClassElement_ with the given additional style bits  ',non-directive
'@since _ClassPathElement_ ',non-directive
' <p>Returns a new _ClassElement_ that is equivalent to the reciever, but  has the given height.</p>    <p>Does not modify the reciever.</p>    @param height a height, in points  @return a new _ClassElement_ with the height, in points  @since _ClassPathElement_ ',non-directive
' <p>Returns a new _ClassElement_ that is equivalent to the reciever, but  has the given height.</p>    <p>Does not modify the reciever.</p>    ',directive
'@param height a height, in points  ',non-directive
'@return a new _ClassElement_ with the height, in points  ',non-directive
'@since _ClassPathElement_ ',non-directive
' <p>Returns a _ClassElement_ that is equivalent to the reciever, but whose height  is larger by the given number of points.</p>    <p>Does not modify the reciever.</p>    @param _ClassElement_ a change in height, in points. Negative values will return smaller  fonts.   @return a _ClassElement_ whose height differs from the reciever by the given number  of points.   @since _ClassPathElement_ ',non-directive
' <p>Returns a _ClassElement_ that is equivalent to the reciever, but whose height  is larger by the given number of points.</p>    <p>Does not modify the reciever.</p>    ',directive
'@param _ClassElement_ a change in height, in points. ',non-directive
'Negative values will return smaller  fonts.   ',directive
'@return a _ClassElement_ whose height differs from the reciever by the given number  of points.   ',non-directive
'@since _ClassPathElement_ ',non-directive
' Deallocates anything that was allocated by _ClassElement_, given a font  that was allocated by an equal _ClassElement_.    @since _ClassPathElement_    @param _ClassElement_ previously allocated font ',non-directive
' Deallocates anything that was allocated by _ClassElement_, given a font  that was allocated by an equal _ClassElement_.   ',non-directive
?,non-directive
'@since _ClassPathElement_    ',non-directive
'@param _ClassElement_ previously allocated font ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' An exception indicating that a string value could not be  converted into the requested data type.   @see _ClassElement_ ',non-directive
' An exception indicating that a string value could not be  converted into the requested data type.   ',non-directive
'@see _ClassElement_ ',non-directive
' Creates a new exception. ',non-directive
' Creates a new exception. ',non-directive
' Creates a new exception.   @param message the message ',non-directive
' Creates a new exception.   ',non-directive
'@param message the message ',non-directive
' This class manages SWT resources. It manages reference-counted instances of resources  such as Fonts, Images, and Colors, and allows them to be accessed using descriptors.  Everything allocated through the registry should also be disposed through the registry.  Since the resources are shared and reference counted, they should never be disposed  directly.  <p>  _ClassElement_ handles correct allocation and disposal of resources. It differs from   the various JFace *Registry classes, which also map symbolic IDs onto resources. In   general, you should use a *Registry class to map IDs onto descriptors, and use a   _ClassElement_ to convert the descriptors into real _OSPathElement_etc.  </p>    @since _ClassPathElement_ ',directive
' This class manages SWT resources. ',non-directive
'It manages reference-counted instances of resources  such as Fonts, Images, and Colors, and allows them to be accessed using descriptors.  ',non-directive
'Everything allocated through the registry should also be disposed through the registry.  ',directive
'Since the resources are shared and reference counted, they should never be disposed  directly.  ',directive
'<p>  _ClassElement_ handles correct allocation and disposal of resources. ',non-directive
'It differs from   the various JFace *Registry classes, which also map symbolic IDs onto resources. ',directive
'In   general, you should use a *Registry class to map IDs onto descriptors, and use a   _ClassElement_ to convert the descriptors into real _OSPathElement_etc.  ',directive
'</p>    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the Device for which this _ClassElement_ will create resources     @since _ClassPathElement_   @return the Device associated with this _ClassElement_ ',non-directive
' Returns the Device for which this _ClassElement_ will create resources     ',non-directive
'@since _ClassPathElement_   ',non-directive
'@return the Device associated with this _ClassElement_ ',non-directive
' Deallocates a resource previously allocated by {@link #create(_ClassElement_)}.   Descriptors are compared by equality, not identity. If the same resource was   created multiple times, this may decrement a reference count rather than   disposing the actual resource.      @since _ClassPathElement_    @param descriptor identifier for the resource ',directive
' Deallocates a resource previously allocated by {',non-directive
'@link #create(_ClassElement_)}.   ',non-directive
'Descriptors are compared by equality, not identity. ',directive
'If the same resource was   created multiple times, this may decrement a reference count rather than   disposing the actual resource.     ',directive
?,non-directive
'@since _ClassPathElement_    ',non-directive
'@param descriptor identifier for the resource ',non-directive
' <p>Returns a previously-allocated resource or allocates a new one if none  exists yet. The resource will remain allocated for at least the lifetime  of this resource manager. If necessary, the resource will be deallocated   automatically when the resource manager is disposed.</p>    <p>The resources returned from this method are reference counted and may be shared   internally with other resource managers. They should never be disposed outside of the   _ClassElement_ framework, or it will cause exceptions in other code that shares  them. For example, never call {@link _ClassPathElement_#dispose()}   on anything returned from this method.</p>    <p>  Callers may safely downcast the result to the resource type associated with   the descriptor. For example, when given an _ClassElement_, the return  value of this method may be downcast to Image.  </p>    <p>  This method should only be used for resources that should remain  allocated for the lifetime of the resource manager. To allocate shorter-lived  resources, manage them with <code>create</code>, and <code>destroy</code>  rather than this method.  </p>    <p>  This method should never be called on the global resource manager,  since all resources will remain allocated for the lifetime of the app and  will be effectively leaked.  </p>    @param descriptor identifier for the requested resource  @return the requested resource. Never null.  @throws _ClassElement_ if the resource does not exist yet and cannot  be created for any reason.    @since _ClassPathElement_ ',directive
' <p>Returns a previously-allocated resource or allocates a new one if none  exists yet. ',non-directive
'The resource will remain allocated for at least the lifetime  of this resource manager. ',directive
'If necessary, the resource will be deallocated   automatically when the resource manager is disposed.</p>    <p>The resources returned from this method are reference counted and may be shared   internally with other resource managers. ',directive
'They should never be disposed outside of the   _ClassElement_ framework, or it will cause exceptions in other code that shares  them. ',directive
'For example, never call {',directive
'@link _ClassPathElement_#dispose()}   on anything returned from this method.</p>    <p>  Callers may safely downcast the result to the resource type associated with   the descriptor. ',directive
'For example, when given an _ClassElement_, the return  value of this method may be downcast to Image.  ',non-directive
'</p>    <p>  This method should only be used for resources that should remain  allocated for the lifetime of the resource manager. ',directive
'To allocate shorter-lived  resources, manage them with <code>create</code>, and <code>destroy</code>  rather than this method.  ',directive
'</p>    <p>  This method should never be called on the global resource manager,  since all resources will remain allocated for the lifetime of the app and  will be effectively leaked.  ',directive
'</p>    ',non-directive
'@param descriptor identifier for the requested resource  ',non-directive
'@return the requested resource. ',non-directive
'Never null.  ',directive
'@throws _ClassElement_ if the resource does not exist yet and cannot  be created for any reason.   ',directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the default image that will be returned in the event that the intended  image is missing.    @since _ClassPathElement_   @return a default image that will be returned in the event that the intended  image is missing. ',non-directive
' Returns the default image that will be returned in the event that the intended  image is missing.   ',non-directive
?,non-directive
'@since _ClassPathElement_   ',non-directive
'@return a default image that will be returned in the event that the intended  image is missing. ',non-directive
' Undoes everything that was done by {@link #_ClassElement_(_ClassElement_)}.    @since _ClassPathElement_    @param descriptor identifier for the image to dispose ',non-directive
' Undoes everything that was done by {',non-directive
'@link #_ClassElement_(_ClassElement_)}.   ',non-directive
?,non-directive
'@since _ClassPathElement_    ',non-directive
'@param descriptor identifier for the image to dispose ',non-directive
' Undoes everything that was done by a call to {@link #_ClassElement_(RGB)}.    @since _ClassPathElement_    @param descriptor RGB value of the color to dispose ',directive
' Undoes everything that was done by a call to {',non-directive
'@link #_ClassElement_(RGB)}.   ',non-directive
?,non-directive
'@since _ClassPathElement_    ',non-directive
'@param descriptor RGB value of the color to dispose ',non-directive
' Undoes everything that was done by a previous call to {@link #_ClassElement_(_ClassElement_)}.    @since _ClassPathElement_    @param descriptor description of the font to destroy ',directive
' Undoes everything that was done by a previous call to {',non-directive
'@link #_ClassElement_(_ClassElement_)}.   ',non-directive
?,non-directive
'@since _ClassPathElement_    ',non-directive
'@param descriptor description of the font to destroy ',non-directive
' Disposes any remaining resources allocated by this manager.  ',non-directive
' Disposes any remaining resources allocated by this manager.  ',non-directive
' Returns a previously allocated resource associated with the given descriptor, or  null if none exists yet.     @since _ClassPathElement_   @param descriptor descriptor to find  @return a previously allocated resource for the given descriptor or null if none. ',non-directive
' Returns a previously allocated resource associated with the given descriptor, or  null if none exists yet.    ',directive
?,non-directive
'@since _ClassPathElement_   ',non-directive
'@param descriptor descriptor to find  ',non-directive
'@return a previously allocated resource for the given descriptor or null if none. ',directive
' Causes the <code>run()</code> method of the runnable to  be invoked just before the receiver is disposed. The runnable  can be subsequently canceled by a call to <code>_ClassElement_</code>.    @param r runnable to execute. ',directive
' Causes the <code>run()</code> method of the runnable to  be invoked just before the receiver is disposed. ',directive
'The runnable  can be subsequently canceled by a call to <code>_ClassElement_</code>.   ',directive
?,non-directive
'@param r runnable to execute. ',non-directive
' Cancels a runnable that was previously scheduled with <code>_ClassElement_</code>.  Has no effect if the given runnable was not previously registered with  _ClassElement_.    @param r runnable to cancel ',non-directive
' Cancels a runnable that was previously scheduled with <code>_ClassElement_</code>.  ',non-directive
'Has no effect if the given runnable was not previously registered with  _ClassElement_.   ',directive
?,non-directive
'@param r runnable to cancel ',non-directive
?,non-directive
?,non-directive
' Abstract base class for various JFace registries.    @since _ClassPathElement_ ',non-directive
' Abstract base class for various JFace registries.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Adds a property change listener to this registry.    @param listener a property change listener ',non-directive
' Adds a property change listener to this registry.   ',non-directive
?,non-directive
'@param listener a property change listener ',non-directive
' Disposes all currently allocated resources. ',non-directive
' Disposes all currently allocated resources. ',non-directive
'  @return the set of keys this manager knows about.  This collection   should be immutable. ',directive
?,non-directive
'@return the set of keys this manager knows about.  ',non-directive
'This collection   should be immutable. ',directive
' Return whether or not the receiver has a value for the supplied key.    @param key the key  @return <code>true</code> if there is a value for this key ',non-directive
' Return whether or not the receiver has a value for the supplied key.   ',non-directive
?,non-directive
'@param key the key  ',non-directive
'@return <code>true</code> if there is a value for this key ',non-directive
' Fires a <code>_ClassElement_</code>.    @param name the name of the symbolic value that is changing.  @param _ClassElement_ the old value.  @param _ClassElement_ the new value. ',non-directive
' Fires a <code>_ClassElement_</code>.   ',non-directive
?,non-directive
'@param name the name of the symbolic value that is changing.  ',non-directive
'@param _ClassElement_ the old value.  ',non-directive
'@param _ClassElement_ the new value. ',non-directive
' Removes the given listener from this registry. Has no affect if the  listener is not registered.    @param listener a property change listener ',non-directive
' Removes the given listener from this registry. ',non-directive
'Has no affect if the  listener is not registered.   ',directive
?,non-directive
'@param listener a property change listener ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Return the transparent pixel for the receiver.  <strong>NOTE</strong> This value is not currently in use in the   default implementation.  @return int  @since _ClassPathElement_ ',directive
' Return the transparent pixel for the receiver.  ',non-directive
'<strong>NOTE</strong> This value is not currently in use in the   default implementation.  ',directive
'@return int  ',non-directive
'@since _ClassPathElement_ ',non-directive
' @param _ClassElement_ The _ClassElement_ to set.  @since _ClassPathElement_ ',non-directive
?,non-directive
'@param _ClassElement_ The _ClassElement_ to set.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Constructs an uninitialized composite image. ',non-directive
' Constructs an uninitialized composite image. ',non-directive
' Breaks out space-separated words into an array of words.  For example: <code>\"no comment\"</code> into an array   <code>a[0]=\"no\"</code> and <code>a[1]= \"comment\"</code>.   @param value the string to be converted  @return the list of words  @throws _ClassElement_ thrown if request string could not seperated ',non-directive
' Breaks out space-separated words into an array of words.  ',non-directive
'For example: <code>\"no comment\"</code> into an array   <code>a[0]=\"no\"</code> and <code>a[1]= \"comment\"</code>.   ',non-directive
'@param value the string to be converted  ',non-directive
'@return the list of words  ',non-directive
'@throws _ClassElement_ thrown if request string could not seperated ',non-directive
'     /**  Breaks out space-separated words into an array of words.  For example: <code>\"no comment\"</code> into an array   <code>a[0]=\"no\"</code> and <code>a[1]= \"comment\"</code>.  Returns the given default value if the value cannot be parsed.   @param value the string to be converted  @param dflt the default value  @return the list of words, or the default value ',non-directive
'     /**  Breaks out space-separated words into an array of words.  ',non-directive
'For example: <code>\"no comment\"</code> into an array   <code>a[0]=\"no\"</code> and <code>a[1]= \"comment\"</code>.  ',non-directive
'Returns the given default value if the value cannot be parsed.   ',non-directive
'@param value the string to be converted  ',non-directive
'@param dflt the default value  ',non-directive
'@return the list of words, or the default value ',non-directive
' Converts the given value into a boolean.  This method fails if the value does not represent a boolean.  <p>  Valid representations of <code>true</code> include the strings  \"<code>t</code>\", \"<code>true</code>\", or equivalent in mixed  or upper case.  Similarly, valid representations of <code>false</code> include the strings  \"<code>f</code>\", \"<code>false</code>\", or equivalent in mixed  or upper case.   </p>   @param value the value to be converted  @return the value as a boolean  @exception _ClassElement_ if the given value does not represent  a boolean ',non-directive
' Converts the given value into a boolean.  ',non-directive
'This method fails if the value does not represent a boolean.  ',non-directive
'<p>  Valid representations of <code>true</code> include the strings  \"<code>t</code>\", \"<code>true</code>\", or equivalent in mixed  or upper case.  ',non-directive
'Similarly, valid representations of <code>false</code> include the strings  \"<code>f</code>\", \"<code>false</code>\", or equivalent in mixed  or upper case.   ',non-directive
'</p>   ',non-directive
'@param value the value to be converted  ',non-directive
'@return the value as a boolean  ',non-directive
'@exception _ClassElement_ if the given value does not represent  a boolean ',non-directive
' Converts the given value into a boolean.  Returns the given default value if the   value does not represent a boolean.   @param value the value to be converted  @param dflt the default value  @return the value as a boolean, or the default value ',non-directive
' Converts the given value into a boolean.  ',non-directive
'Returns the given default value if the   value does not represent a boolean.   ',non-directive
'@param value the value to be converted  ',non-directive
'@param dflt the default value  ',non-directive
'@return the value as a boolean, or the default value ',non-directive
' Converts the given value into a double.  This method fails if the value does not represent a double.   @param value the value to be converted  @return the value as a double  @exception _ClassElement_ if the given value does not represent  a double ',non-directive
' Converts the given value into a double.  ',non-directive
'This method fails if the value does not represent a double.   ',non-directive
'@param value the value to be converted  ',non-directive
'@return the value as a double  ',non-directive
'@exception _ClassElement_ if the given value does not represent  a double ',non-directive
' Converts the given value into a double.  Returns the given default value if the   value does not represent a double.   @param value the value to be converted  @param dflt the default value  @return the value as a double, or the default value ',non-directive
' Converts the given value into a double.  ',non-directive
'Returns the given default value if the   value does not represent a double.   ',non-directive
'@param value the value to be converted  ',non-directive
'@param dflt the default value  ',non-directive
'@return the value as a double, or the default value ',non-directive
' Converts the given value into a float.  This method fails if the value does not represent a float.   @param value the value to be converted  @return the value as a float  @exception _ClassElement_ if the given value does not represent  a float ',non-directive
' Converts the given value into a float.  ',non-directive
'This method fails if the value does not represent a float.   ',non-directive
'@param value the value to be converted  ',non-directive
'@return the value as a float  ',non-directive
'@exception _ClassElement_ if the given value does not represent  a float ',non-directive
' Converts the given value into a float.  Returns the given default value if the   value does not represent a float.   @param value the value to be converted  @param dflt the default value  @return the value as a float, or the default value ',non-directive
' Converts the given value into a float.  ',non-directive
'Returns the given default value if the   value does not represent a float.   ',non-directive
'@param value the value to be converted  ',non-directive
'@param dflt the default value  ',non-directive
'@return the value as a float, or the default value ',non-directive
' Converts the given value into an SWT font data object.  This method fails if the value does not represent font data.  <p>  A valid font data representation is a string of the form  <code><it>fontname</it>-<it>style</it>-<it>height</it></code> where  <code><it>fontname</it></code> is the name of a font,  <code><it>style</it></code> is a font style (one of  <code>\"regular\"</code>, <code>\"bold\"</code>,  <code>\"italic\"</code>, or <code>\"bold italic\"</code>)  and <code><it>height</it></code> is an integer representing the  font height. Example: <code>Times New Roman-bold-36</code>.  </p>   @param value the value to be converted  @return the value as font data  @exception _ClassElement_ if the given value does not represent  font data ',non-directive
' Converts the given value into an SWT font data object.  ',non-directive
'This method fails if the value does not represent font data.  ',non-directive
'<p>  A valid font data representation is a string of the form  <code><it>fontname</it>-<it>style</it>-<it>height</it></code> where  <code><it>fontname</it></code> is the name of a font,  <code><it>style</it></code> is a font style (one of  <code>\"regular\"</code>, <code>\"bold\"</code>,  <code>\"italic\"</code>, or <code>\"bold italic\"</code>)  and <code><it>height</it></code> is an integer representing the  font height. ',directive
'Example: <code>Times New Roman-bold-36</code>.  ',directive
'</p>   ',non-directive
'@param value the value to be converted  ',non-directive
'@return the value as font data  ',non-directive
'@exception _ClassElement_ if the given value does not represent  font data ',non-directive
' Convert the given value into an array of SWT font data objects.    @param value the font list string   @return the value as a font list  @since _ClassPathElement_ ',non-directive
' Convert the given value into an array of SWT font data objects.   ',non-directive
?,non-directive
'@param value the font list string   ',non-directive
'@return the value as a font list  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Converts the given value into an SWT font data object.  Returns the given default value if the   value does not represent a font data object.   @param value the value to be converted  @param dflt the default value  @return the value as a font data object, or the default value ',non-directive
' Converts the given value into an SWT font data object.  ',non-directive
'Returns the given default value if the   value does not represent a font data object.   ',non-directive
'@param value the value to be converted  ',non-directive
'@param dflt the default value  ',non-directive
'@return the value as a font data object, or the default value ',non-directive
' Converts the given value into an int.  This method fails if the value does not represent an int.   @param value the value to be converted  @return the value as an int  @exception _ClassElement_ if the given value does not represent  an int ',non-directive
' Converts the given value into an int.  ',non-directive
'This method fails if the value does not represent an int.   ',non-directive
'@param value the value to be converted  ',non-directive
'@return the value as an int  ',non-directive
'@exception _ClassElement_ if the given value does not represent  an int ',non-directive
' Converts the given value into an int.  Returns the given default value if the   value does not represent an int.   @param value the value to be converted  @param dflt the default value  @return the value as an int, or the default value ',non-directive
' Converts the given value into an int.  ',non-directive
'Returns the given default value if the   value does not represent an int.   ',non-directive
'@param value the value to be converted  ',non-directive
'@param dflt the default value  ',non-directive
'@return the value as an int, or the default value ',non-directive
' Converts the given value into a long.  This method fails if the value does not represent a long.   @param value the value to be converted  @return the value as a long  @exception _ClassElement_ if the given value does not represent  a long ',non-directive
' Converts the given value into a long.  ',non-directive
'This method fails if the value does not represent a long.   ',non-directive
'@param value the value to be converted  ',non-directive
'@return the value as a long  ',non-directive
'@exception _ClassElement_ if the given value does not represent  a long ',non-directive
' Converts the given value into a long.  Returns the given default value if the   value does not represent a long.   @param value the value to be converted  @param dflt the default value  @return the value as a long, or the default value ',non-directive
' Converts the given value into a long.  ',non-directive
'Returns the given default value if the   value does not represent a long.   ',non-directive
'@param value the value to be converted  ',non-directive
'@param dflt the default value  ',non-directive
'@return the value as a long, or the default value ',non-directive
' Converts the given value into an SWT point.  This method fails if the value does not represent a point.  <p>  A valid point representation is a string of the form  <code><it>x</it>,<it>y</it></code> where  <code><it>x</it></code> and <code><it>y</it></code>  are valid ints.  </p>   @param value the value to be converted  @return the value as a point  @exception _ClassElement_ if the given value does not represent  a point ',non-directive
' Converts the given value into an SWT point.  ',non-directive
'This method fails if the value does not represent a point.  ',non-directive
'<p>  A valid point representation is a string of the form  <code><it>x</it>,<it>y</it></code> where  <code><it>x</it></code> and <code><it>y</it></code>  are valid ints.  ',directive
'</p>   ',non-directive
'@param value the value to be converted  ',non-directive
'@return the value as a point  ',non-directive
'@exception _ClassElement_ if the given value does not represent  a point ',non-directive
' Converts the given value into an SWT point.  Returns the given default value if the   value does not represent a point.   @param value the value to be converted  @param dflt the default value  @return the value as a point, or the default value ',non-directive
' Converts the given value into an SWT point.  ',non-directive
'Returns the given default value if the   value does not represent a point.   ',non-directive
'@param value the value to be converted  ',non-directive
'@param dflt the default value  ',non-directive
'@return the value as a point, or the default value ',non-directive
' Converts the given value into an SWT rectangle.  This method fails if the value does not represent a rectangle.  <p>  A valid rectangle representation is a string of the form  <code><it>x</it>,<it>y</it>,<it>width</it>,<it>height</it></code>  where <code><it>x</it></code>, <code><it>y</it></code>,  <code><it>width</it></code>, and <code><it>height</it></code>  are valid ints.  </p>   @param value the value to be converted  @return the value as a rectangle  @exception _ClassElement_ if the given value does not represent  a rectangle ',non-directive
' Converts the given value into an SWT rectangle.  ',non-directive
'This method fails if the value does not represent a rectangle.  ',non-directive
'<p>  A valid rectangle representation is a string of the form  <code><it>x</it>,<it>y</it>,<it>width</it>,<it>height</it></code>  where <code><it>x</it></code>, <code><it>y</it></code>,  <code><it>width</it></code>, and <code><it>height</it></code>  are valid ints.  ',directive
'</p>   ',non-directive
'@param value the value to be converted  ',non-directive
'@return the value as a rectangle  ',non-directive
'@exception _ClassElement_ if the given value does not represent  a rectangle ',non-directive
' Converts the given value into an SWT rectangle.  Returns the given default value if the   value does not represent a rectangle.   @param value the value to be converted  @param dflt the default value  @return the value as a rectangle, or the default value ',non-directive
' Converts the given value into an SWT rectangle.  ',non-directive
'Returns the given default value if the   value does not represent a rectangle.   ',non-directive
'@param value the value to be converted  ',non-directive
'@param dflt the default value  ',non-directive
'@return the value as a rectangle, or the default value ',non-directive
' Converts the given value into an SWT RGB color value.  This method fails if the value does not represent an RGB  color value.  <p>  A valid RGB color value representation is a string of the form  <code><it>red</it>,<it>green</it></code>,<it>blue</it></code> where  <code><it>red</it></code>, <it>green</it></code>, and   <code><it>blue</it></code> are valid ints.  </p>   @param value the value to be converted  @return the value as an RGB color value  @exception _ClassElement_ if the given value does not represent  an RGB color value ',non-directive
' Converts the given value into an SWT RGB color value.  ',non-directive
'This method fails if the value does not represent an RGB  color value.  ',non-directive
'<p>  A valid RGB color value representation is a string of the form  <code><it>red</it>,<it>green</it></code>,<it>blue</it></code> where  <code><it>red</it></code>, <it>green</it></code>, and   <code><it>blue</it></code> are valid ints.  ',directive
'</p>   ',non-directive
'@param value the value to be converted  ',non-directive
'@return the value as an RGB color value  ',non-directive
'@exception _ClassElement_ if the given value does not represent  an RGB color value ',non-directive
' Converts the given value into an SWT RGB color value.  Returns the given default value if the   value does not represent an RGB color value.   @param value the value to be converted  @param dflt the default value  @return the value as a RGB color value, or the default value ',non-directive
' Converts the given value into an SWT RGB color value.  ',non-directive
'Returns the given default value if the   value does not represent an RGB color value.   ',non-directive
'@param value the value to be converted  ',non-directive
'@param dflt the default value  ',non-directive
'@return the value as a RGB color value, or the default value ',non-directive
' Converts the given double value to a string.  Equivalent to <code>_ClassPathElement_(value)</code>.   @param value the double value  @return the string representing the given double ',non-directive
' Converts the given double value to a string.  ',non-directive
'Equivalent to <code>_ClassPathElement_(value)</code>.   ',directive
'@param value the double value  ',non-directive
'@return the string representing the given double ',non-directive
' Converts the given float value to a string.  Equivalent to <code>_ClassPathElement_(value)</code>.   @param value the float value  @return the string representing the given float ',non-directive
' Converts the given float value to a string.  ',non-directive
'Equivalent to <code>_ClassPathElement_(value)</code>.   ',directive
'@param value the float value  ',non-directive
'@return the string representing the given float ',non-directive
' Converts the given int value to a string.  Equivalent to <code>_ClassPathElement_(value)</code>.   @param value the int value  @return the string representing the given int ',non-directive
' Converts the given int value to a string.  ',non-directive
'Equivalent to <code>_ClassPathElement_(value)</code>.   ',directive
'@param value the int value  ',non-directive
'@return the string representing the given int ',non-directive
' Converts the given long value to a string.  Equivalent to <code>_ClassPathElement_(value)</code>.   @param value the long value  @return the string representing the given long ',non-directive
' Converts the given long value to a string.  ',non-directive
'Equivalent to <code>_ClassPathElement_(value)</code>.   ',directive
'@param value the long value  ',non-directive
'@return the string representing the given long ',non-directive
' Converts the given boolean object to a string.  Equivalent to <code>_ClassPathElement_(_ClassPathElement_())</code>.   @param value the boolean object  @return the string representing the given boolean value ',non-directive
' Converts the given boolean object to a string.  ',non-directive
'Equivalent to <code>_ClassPathElement_(_ClassPathElement_())</code>.   ',directive
'@param value the boolean object  ',non-directive
'@return the string representing the given boolean value ',non-directive
' Converts the given double object to a string.  Equivalent to <code>_ClassPathElement_(_ClassPathElement_())</code>.   @param value the double object  @return the string representing the given double value ',non-directive
' Converts the given double object to a string.  ',non-directive
'Equivalent to <code>_ClassPathElement_(_ClassPathElement_())</code>.   ',directive
'@param value the double object  ',non-directive
'@return the string representing the given double value ',non-directive
' Converts the given float object to a string.  Equivalent to <code>_ClassPathElement_(_ClassPathElement_())</code>.   @param value the float object  @return the string representing the given float value ',non-directive
' Converts the given float object to a string.  ',non-directive
'Equivalent to <code>_ClassPathElement_(_ClassPathElement_())</code>.   ',directive
'@param value the float object  ',non-directive
'@return the string representing the given float value ',non-directive
' Converts the given integer object to a string.  Equivalent to <code>_ClassPathElement_(_ClassPathElement_())</code>.   @param value the integer object  @return the string representing the given integer value ',non-directive
' Converts the given integer object to a string.  ',non-directive
'Equivalent to <code>_ClassPathElement_(_ClassPathElement_())</code>.   ',directive
'@param value the integer object  ',non-directive
'@return the string representing the given integer value ',non-directive
' Converts the given long object to a string.  Equivalent to <code>_ClassPathElement_(_ClassPathElement_())</code>.   @param value the long object  @return the string representing the given long value ',non-directive
' Converts the given long object to a string.  ',non-directive
'Equivalent to <code>_ClassPathElement_(_ClassPathElement_())</code>.   ',directive
'@param value the long object  ',non-directive
'@return the string representing the given long value ',non-directive
' Converts a font data array  to a string. The string representation is  that of _ClassElement_(_ClassElement_) seperated by \';\'    @param value The font data.  @return The string representation of the font data arra.  @since _ClassPathElement_ ',non-directive
' Converts a font data array  to a string. ',non-directive
'The string representation is  that of _ClassElement_(_ClassElement_) seperated by \';\'    ',directive
'@param value The font data.  ',non-directive
'@return The string representation of the font data arra.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Converts a font data object to a string. The string representation is  \"font name-style-height\" (for example \"Times New Roman-bold-36\").  @param value The font data.  @return The string representation of the font data object. ',non-directive
' Converts a font data object to a string. ',non-directive
'The string representation is  \"font name-style-height\" (for example \"Times New Roman-bold-36\").  ',directive
'@param value The font data.  ',non-directive
'@return The string representation of the font data object. ',non-directive
' Converts the given SWT point object to a string.  <p>  The string representation of a point has the form  <code><it>x</it>,<it>y</it></code> where  <code><it>x</it></code> and <code><it>y</it></code>  are string representations of integers.  </p>   @param value the point object  @return the string representing the given point ',non-directive
' Converts the given SWT point object to a string.  ',non-directive
'<p>  The string representation of a point has the form  <code><it>x</it>,<it>y</it></code> where  <code><it>x</it></code> and <code><it>y</it></code>  are string representations of integers.  ',directive
'</p>   ',non-directive
'@param value the point object  ',non-directive
'@return the string representing the given point ',non-directive
' Converts the given SWT rectangle object to a string.  <p>  The string representation of a rectangle has the form  <code><it>x</it>,<it>y</it>,<it>width</it>,<it>height</it></code>  where <code><it>x</it></code>, <code><it>y</it></code>,  <code><it>width</it></code>, and <code><it>height</it></code>  are string representations of integers.  </p>   @param value the rectangle object  @return the string representing the given rectangle ',non-directive
' Converts the given SWT rectangle object to a string.  ',non-directive
'<p>  The string representation of a rectangle has the form  <code><it>x</it>,<it>y</it>,<it>width</it>,<it>height</it></code>  where <code><it>x</it></code>, <code><it>y</it></code>,  <code><it>width</it></code>, and <code><it>height</it></code>  are string representations of integers.  ',directive
'</p>   ',non-directive
'@param value the rectangle object  ',non-directive
'@return the string representing the given rectangle ',non-directive
' Converts the given SWT RGB color value object to a string.  <p>  The string representation of an RGB color value has the form  <code><it>red</it>,<it>green</it></code>,<it>blue</it></code> where  <code><it>red</it></code>, <it>green</it></code>, and   <code><it>blue</it></code> are string representations of integers.  </p>   @param value the RGB color value object  @return the string representing the given RGB color value ',non-directive
' Converts the given SWT RGB color value object to a string.  ',non-directive
'<p>  The string representation of an RGB color value has the form  <code><it>red</it>,<it>green</it></code>,<it>blue</it></code> where  <code><it>red</it></code>, <it>green</it></code>, and   <code><it>blue</it></code> are string representations of integers.  ',directive
'</p>   ',non-directive
'@param value the RGB color value object  ',non-directive
'@return the string representing the given RGB color value ',non-directive
' Returns the given string with all whitespace characters removed.  <p>  All characters that have codes less than or equal to <code>\'&#92;u0020\'</code>   (the space character) are considered to be a white space.  </p>   @param s the source string  @return the string with all whitespace characters removed ',non-directive
' Returns the given string with all whitespace characters removed.  ',non-directive
'<p>  All characters that have codes less than or equal to <code>\'&#92;u0020\'</code>   (the space character) are considered to be a white space.  ',directive
'</p>   ',non-directive
'@param s the source string  ',non-directive
'@return the string with all whitespace characters removed ',non-directive
' Converts a font data object to a string representation for display.    The string representation is  \"font name-style-height\" (for example \"Times New Roman-bold-36\").  @param value The font data.  @return The string representation of the font data object.  @deprecated use _ClassElement_(_ClassElement_) ',non-directive
' Converts a font data object to a string representation for display.    ',non-directive
'The string representation is  \"font name-style-height\" (for example \"Times New Roman-bold-36\").  ',directive
'@param value The font data.  ',non-directive
'@return The string representation of the font data object.  ',non-directive
'@deprecated use _ClassElement_(_ClassElement_) ',non-directive
' Returns the formatted message for the given key in JFace\'s resource  bundle.    @param key             the resource name  @param args             the message arguments  @return the string ',non-directive
' Returns the formatted message for the given key in JFace\'s resource  bundle.   ',non-directive
?,non-directive
'@param key             the resource name  ',non-directive
'@param args             the message arguments  ',non-directive
'@return the string ',non-directive
' Returns the JFace\'s banner font. Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassPathElement_)  </pre>    @return the font ',non-directive
' Returns the JFace\'s banner font. ',non-directive
'Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassPathElement_)  </pre>    ',directive
'@return the font ',non-directive
' Returns the resource bundle for JFace itself. The resouble bundle is  obtained from  <code>_ClassPathElement_(\"_ClassPathElement_\")</code>.  <p>  Note that several static convenience methods are also provided on this  class for directly accessing resources in this bundle.  </p>    @return the resource bundle ',directive
' Returns the resource bundle for JFace itself. ',non-directive
'The resouble bundle is  obtained from  <code>_ClassPathElement_(\"_ClassPathElement_\")</code>.  ',directive
'<p>  Note that several static convenience methods are also provided on this  class for directly accessing resources in this bundle.  ',directive
'</p>    ',non-directive
'@return the resource bundle ',non-directive
' Returns the color registry for JFace itself.  <p>    @return the <code>_ClassElement_</code>.  @since _ClassPathElement_ ',non-directive
' Returns the color registry for JFace itself.  ',non-directive
'<p>    ',non-directive
'@return the <code>_ClassElement_</code>.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the global resource manager for the given display    @since _ClassPathElement_    @param _ClassElement_             display to query  @return the global resource manager for the given display ',non-directive
' Returns the global resource manager for the given display    ',non-directive
'@since _ClassPathElement_    ',non-directive
'@param _ClassElement_             display to query  ',non-directive
'@return the global resource manager for the given display ',non-directive
' Returns JFace\'s standard font. Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassPathElement_)  </pre>    @return the font ',non-directive
' Returns JFace\'s standard font. ',non-directive
'Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassPathElement_)  </pre>    ',directive
'@return the font ',non-directive
' Returns the descriptor for JFace\'s standard font. Convenience method  equivalent to    <pre>  _ClassPathElement_()._ClassElement_(_ClassPathElement_)  </pre>    @return the font  @since _ClassPathElement_ ',non-directive
' Returns the descriptor for JFace\'s standard font. ',non-directive
'Convenience method  equivalent to    <pre>  _ClassPathElement_()._ClassElement_(_ClassPathElement_)  </pre>    ',directive
'@return the font  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the JFace\'s dialog font. Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassPathElement_)  </pre>    @return the font ',non-directive
' Returns the JFace\'s dialog font. ',non-directive
'Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassPathElement_)  </pre>    ',directive
'@return the font ',non-directive
' Returns the descriptor for JFace\'s dialog font. Convenience method  equivalent to    <pre>  _ClassPathElement_()._ClassElement_(_ClassPathElement_)  </pre>    @return the font  @since _ClassPathElement_ ',non-directive
' Returns the descriptor for JFace\'s dialog font. ',non-directive
'Convenience method  equivalent to    <pre>  _ClassPathElement_()._ClassElement_(_ClassPathElement_)  </pre>    ',directive
'@return the font  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the font in JFace\'s font registry with the given symbolic font  name. Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassElement_)  </pre>    If an error occurs, return the default font.    @param _ClassElement_             the symbolic font name  @return the font ',directive
' Returns the font in JFace\'s font registry with the given symbolic font  name. ',non-directive
'Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassElement_)  </pre>    If an error occurs, return the default font.   ',directive
?,non-directive
'@param _ClassElement_             the symbolic font name  ',non-directive
'@return the font ',non-directive
' Returns the font registry for JFace itself. If the value has not been  established by an earlier call to <code>_ClassElement_</code>, is it  initialized to  <code>new _ClassElement_(\"_ClassPathElement_\")</code>.  <p>  Note that several static convenience methods are also provided on this  class for directly accessing JFace\'s standard fonts.  </p>    @return the JFace font registry ',directive
' Returns the font registry for JFace itself. ',non-directive
'If the value has not been  established by an earlier call to <code>_ClassElement_</code>, is it  initialized to  <code>new _ClassElement_(\"_ClassPathElement_\")</code>.  ',directive
'<p>  Note that several static convenience methods are also provided on this  class for directly accessing JFace\'s standard fonts.  ',directive
'</p>    ',non-directive
'@return the JFace font registry ',non-directive
' Returns the JFace\'s header font. Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassPathElement_)  </pre>    @return the font ',non-directive
' Returns the JFace\'s header font. ',non-directive
'Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassPathElement_)  </pre>    ',directive
'@return the font ',non-directive
' Returns the image in JFace\'s image registry with the given key, or  <code>null</code> if none. Convenience method equivalent to    <pre>  _ClassPathElement_().get(key)  </pre>    @param key             the key  @return the image, or <code>null</code> if none ',non-directive
' Returns the image in JFace\'s image registry with the given key, or  <code>null</code> if none. ',directive
'Convenience method equivalent to    <pre>  _ClassPathElement_().get(key)  </pre>    ',directive
'@param key             the key  ',non-directive
'@return the image, or <code>null</code> if none ',directive
' Returns the resource object with the given key in JFace\'s resource  bundle. If there isn\'t any value under the given key, the key is  returned.    @param key             the resource name  @return the string ',non-directive
' Returns the resource object with the given key in JFace\'s resource  bundle. ',non-directive
'If there isn\'t any value under the given key, the key is  returned.   ',non-directive
?,non-directive
'@param key             the resource name  ',non-directive
'@return the string ',non-directive
' Returns a list of string values corresponding to the given list of keys.  The lookup is done with <code>_ClassElement_</code>. The values are in the  same order as the keys.    @param keys             a list of keys  @return a list of corresponding string values ',non-directive
' Returns a list of string values corresponding to the given list of keys.  ',non-directive
'The lookup is done with <code>_ClassElement_</code>. ',directive
'The values are in the  same order as the keys.   ',directive
?,non-directive
'@param keys             a list of keys  ',non-directive
'@return a list of corresponding string values ',non-directive
' Returns JFace\'s text font. Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassPathElement_)  </pre>    @return the font ',non-directive
' Returns JFace\'s text font. ',non-directive
'Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassPathElement_)  </pre>    ',directive
'@return the font ',non-directive
' Returns the descriptor for JFace\'s text font. Convenience method  equivalent to    <pre>  _ClassPathElement_()._ClassElement_(_ClassPathElement_)  </pre>    @return the font descriptor (never null)  @since _ClassPathElement_ ',directive
' Returns the descriptor for JFace\'s text font. ',non-directive
'Convenience method  equivalent to    <pre>  _ClassPathElement_()._ClassElement_(_ClassPathElement_)  </pre>    ',directive
'@return the font descriptor (never null)  ',directive
'@since _ClassPathElement_ ',non-directive
' Returns JFace\'s viewer font. Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassPathElement_)  </pre>    @return the font  @deprecated This font is not in use ',non-directive
' Returns JFace\'s viewer font. ',non-directive
'Convenience method equivalent to    <pre>  _ClassPathElement_().get(_ClassPathElement_)  </pre>    ',directive
'@return the font  ',non-directive
'@deprecated This font is not in use ',directive
' The symbolic font name for the banner font (value  <code>\"_ClassPathElement_\"</code>). ',non-directive
' The symbolic font name for the banner font (value  <code>\"_ClassPathElement_\"</code>). ',non-directive
' The symbolic font name for the standard font (value  <code>\"_ClassPathElement_\"</code>). ',non-directive
' The symbolic font name for the standard font (value  <code>\"_ClassPathElement_\"</code>). ',non-directive
' The symbolic font name for the dialog font (value  <code>\"_ClassPathElement_\"</code>). ',non-directive
' The symbolic font name for the dialog font (value  <code>\"_ClassPathElement_\"</code>). ',non-directive
' The symbolic font name for the header font (value  <code>\"_ClassPathElement_\"</code>). ',non-directive
' The symbolic font name for the header font (value  <code>\"_ClassPathElement_\"</code>). ',non-directive
' The symbolic font name for the text font (value  <code>\"_ClassPathElement_\"</code>). ',non-directive
' The symbolic font name for the text font (value  <code>\"_ClassPathElement_\"</code>). ',non-directive
' The symbolic font name for the viewer font (value  <code>\"_ClassPathElement_\"</code>).    @deprecated This font is not in use ',non-directive
' The symbolic font name for the viewer font (value  <code>\"_ClassPathElement_\"</code>).   ',non-directive
?,non-directive
'@deprecated This font is not in use ',directive
' The symbolic font name for the window font (value  <code>\"_ClassPathElement_\"</code>).    @deprecated This font is not in use ',non-directive
' The symbolic font name for the window font (value  <code>\"_ClassPathElement_\"</code>).   ',non-directive
?,non-directive
'@deprecated This font is not in use ',directive
' Find the first valid _ClassElement_ in the provided list. If none are valid  return the first one regardless. If the list is empty return null. Return  <code>null</code> if one cannot be found.    @param fonts the font list  @param display the display used   @return the font data of the like describe above    @deprecated use _ClassElement_ in order to support Motif multiple entry              fonts. ',non-directive
' Find the first valid _ClassElement_ in the provided list. ',non-directive
'If none are valid  return the first one regardless. ',directive
'If the list is empty return null. ',directive
'Return  <code>null</code> if one cannot be found.   ',directive
?,non-directive
'@param fonts the font list  ',non-directive
'@param display the display used   ',non-directive
'@return the font data of the like describe above    ',non-directive
'@deprecated use _ClassElement_ in order to support Motif multiple entry              fonts. ',directive
' Find the first valid _ClassElement_ in the provided list.   If none are valid return the first one regardless.  If the list is empty return <code>null</code>.    @param fonts list of fonts  @param display the display  @return font data like described above  @deprecated use _ClassElement_ in order to preserve   multiple entry fonts on Motif ',non-directive
' Find the first valid _ClassElement_ in the provided list.   ',non-directive
'If none are valid return the first one regardless.  ',directive
'If the list is empty return <code>null</code>.   ',directive
?,non-directive
'@param fonts list of fonts  ',non-directive
'@param display the display  ',non-directive
'@return font data like described above  ',non-directive
'@deprecated use _ClassElement_ in order to preserve   multiple entry fonts on Motif ',directive
' Removes from the list all fonts that do not exist in this system.    If none are valid, return the first irregardless.  If the list is   empty return <code>null</code>.    @param fonts the fonts to check  @param display the display to check against  @return the list of fonts that have been found on this system  @since _ClassPathElement_ ',non-directive
' Removes from the list all fonts that do not exist in this system.    ',non-directive
'If none are valid, return the first irregardless.  ',directive
'If the list is   empty return <code>null</code>.   ',directive
?,non-directive
'@param fonts the fonts to check  ',non-directive
'@param display the display to check against  ',non-directive
'@return the list of fonts that have been found on this system  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the font descriptor for the font with the given symbolic  font name. Returns the default font if there is no special value  associated with that name    @param _ClassElement_ symbolic font name  @return the font descriptor (never null)    @since _ClassPathElement_ ',directive
' Returns the font descriptor for the font with the given symbolic  font name. ',non-directive
'Returns the default font if there is no special value  associated with that name    ',directive
'@param _ClassElement_ symbolic font name  ',non-directive
'@return the font descriptor (never null)    ',directive
'@since _ClassPathElement_ ',non-directive
' Returns the font data associated with the given symbolic font name.  Returns the default font data if there is no special value associated  with that name.   @param _ClassElement_ symbolic font name  @return the font ',non-directive
' Returns the font data associated with the given symbolic font name.  ',non-directive
'Returns the default font data if there is no special value associated  with that name.   ',directive
'@param _ClassElement_ symbolic font name  ',non-directive
'@return the font ',non-directive
' Returns the font associated with the given symbolic font name.  Returns the default font if there is no special value associated  with that name.  <p>  This method should only be called from the UI thread. If you are not on the UI  thread then wrap the call with a  <code>_ClassPathElement_()._ClassElement_()._ClassElement_()</code> in order to  guarantee the correct result. Failure to do this may result in an {@link  SWTException} being thrown.  </p>  @param _ClassElement_ symbolic font name  @return the font ',directive
' Returns the font associated with the given symbolic font name.  ',non-directive
'Returns the default font if there is no special value associated  with that name.  ',directive
'<p>  This method should only be called from the UI thread. ',directive
'If you are not on the UI  thread then wrap the call with a  <code>_ClassPathElement_()._ClassElement_()._ClassElement_()</code> in order to  guarantee the correct result. ',directive
'Failure to do this may result in an {',directive
'@link  SWTException} being thrown.  ',directive
'</p>  ',non-directive
'@param _ClassElement_ symbolic font name  ',non-directive
'@return the font ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Adds (or replaces) a font to this font registry under the given  symbolic name.  <p>  A property change event is reported whenever the mapping from  a symbolic name to a font changes. The source of the event is  this registry; the property name is the symbolic font name.  </p>   @param _ClassElement_ the symbolic font name  @param _ClassElement_ an Array of _ClassElement_ ',non-directive
' Adds (or replaces) a font to this font registry under the given  symbolic name.  ',non-directive
'<p>  A property change event is reported whenever the mapping from  a symbolic name to a font changes. ',directive
'The source of the event is  this registry; the property name is the symbolic font name.  ',directive
'</p>   ',non-directive
'@param _ClassElement_ the symbolic font name  ',non-directive
'@param _ClassElement_ an Array of _ClassElement_ ',non-directive
' Returns the font descriptor for the JFace default font.    @return the font descriptor for the JFace default font  @since _ClassPathElement_ ',non-directive
' Returns the font descriptor for the JFace default font.   ',non-directive
?,non-directive
'@return the font descriptor for the JFace default font  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Load the _ClassElement_ using the _ClassElement_ from the PlatformUI  plug-in  <p>  This method should only be called from the UI thread. If you are not on the UI  thread then wrap the call with a  <code>_ClassPathElement_()._ClassElement_()._ClassElement_()</code> in order to  guarantee the correct result. Failure to do this may result in an {@link  SWTException} being thrown.  </p>  @param location the location to read the resource bundle from  @throws _ClassElement_ Thrown if a resource is missing ',directive
' Load the _ClassElement_ using the _ClassElement_ from the PlatformUI  plug-in  <p>  This method should only be called from the UI thread. ',directive
'If you are not on the UI  thread then wrap the call with a  <code>_ClassPathElement_()._ClassElement_()._ClassElement_()</code> in order to  guarantee the correct result. ',directive
'Failure to do this may result in an {',directive
'@link  SWTException} being thrown.  ',directive
'</p>  ',non-directive
'@param location the location to read the resource bundle from  ',non-directive
'@throws _ClassElement_ Thrown if a resource is missing ',directive
' Creates an empty font registry.   @param display the Display ',non-directive
' Creates an empty font registry.   ',non-directive
'@param display the Display ',non-directive
' Creates an empty font registry.    @param display             the <code>Display</code>  @param cleanOnDisplayDisposal             whether all fonts allocated by this <code>_ClassElement_</code>             should be disposed when the display is disposed  @since _ClassPathElement_ ',directive
' Creates an empty font registry.   ',non-directive
?,non-directive
'@param display             the <code>Display</code>  ',non-directive
'@param cleanOnDisplayDisposal             whether all fonts allocated by this <code>_ClassElement_</code>             should be disposed when the display is disposed  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Runnable that cleans up the manager on disposal of the display. ',non-directive
' Runnable that cleans up the manager on disposal of the display. ',non-directive
' Interface for UI components which can execute a long-running operation  in the form of an <code>IRunnableWithProgress</code>.  The context is responsible for displaying a progress indicator and Cancel  button to the end user while the operation is in progress; the context  supplies a progress monitor to be used from code running inside the operation.  Note that an <code>IRunnableContext</code> is not a runnable itself.  <p>  For examples of UI components which implement this interface,  see <code>_ClassElement_</code>, <code>_ClassElement_</code>,  and <code>_ClassElement_</code>.  </p>   @see IRunnableWithProgress  @see _ClassPathElement_  @see _ClassPathElement_  @see _ClassPathElement_ ',directive
' Interface for UI components which can execute a long-running operation  in the form of an <code>IRunnableWithProgress</code>.  ',non-directive
'The context is responsible for displaying a progress indicator and Cancel  button to the end user while the operation is in progress; the context  supplies a progress monitor to be used from code running inside the operation.  ',directive
'Note that an <code>IRunnableContext</code> is not a runnable itself.  ',directive
'<p>  For examples of UI components which implement this interface,  see <code>_ClassElement_</code>, <code>_ClassElement_</code>,  and <code>_ClassElement_</code>.  ',directive
'</p>   ',non-directive
'@see IRunnableWithProgress  ',non-directive
'@see _ClassPathElement_  ',non-directive
'@see _ClassPathElement_  ',non-directive
'@see _ClassPathElement_ ',non-directive
' The <code>IRunnableWithProgress</code> interface should be implemented by any  class whose instances are intended to be executed as a long-running operation.  Long-running operations are typically presented at the UI via a modal dialog  showing a progress indicator and a Cancel button.  The class must define a <code>run</code> method that takes a progress monitor.  The <code>run</code> method is usually not invoked directly, but rather by  passing the <code>IRunnableWithProgress</code> to the <code>run</code> method of  an <code>IRunnableContext</code>, which provides the UI for the progress monitor  and Cancel button.   @see IRunnableContext ',directive
' The <code>IRunnableWithProgress</code> interface should be implemented by any  class whose instances are intended to be executed as a long-running operation.  ',directive
'Long-running operations are typically presented at the UI via a modal dialog  showing a progress indicator and a Cancel button.  ',directive
'The class must define a <code>run</code> method that takes a progress monitor.  ',directive
'The <code>run</code> method is usually not invoked directly, but rather by  passing the <code>IRunnableWithProgress</code> to the <code>run</code> method of  an <code>IRunnableContext</code>, which provides the UI for the progress monitor  and Cancel button.   ',directive
'@see IRunnableContext ',non-directive
' Runs this operation.  Progress should be reported to the given progress monitor.  This method is usually invoked by an <code>IRunnableContext</code>\'s <code>run</code> method,  which supplies the progress monitor.  A request to cancel the operation should be honored and acknowledged   by throwing <code>_ClassElement_</code>.   @param monitor the progress monitor to use to display progress and receive    requests for cancelation  @exception _ClassElement_ if the run method must propagate a checked exception,   it should wrap it inside an <code>_ClassElement_</code>; runtime exceptions are automatically   wrapped in an <code>_ClassElement_</code> by the calling context  @exception _ClassElement_ if the operation detects a request to cancel,    using <code>_ClassPathElement_()</code>, it should exit by throwing    <code>_ClassElement_</code>   @see IRunnableContext#run ',directive
' Runs this operation.  ',non-directive
'Progress should be reported to the given progress monitor.  ',directive
'This method is usually invoked by an <code>IRunnableContext</code>\'s <code>run</code> method,  which supplies the progress monitor.  ',directive
'A request to cancel the operation should be honored and acknowledged   by throwing <code>_ClassElement_</code>.   ',directive
'@param monitor the progress monitor to use to display progress and receive    requests for cancelation  ',non-directive
'@exception _ClassElement_ if the run method must propagate a checked exception,   it should wrap it inside an <code>_ClassElement_</code>; runtime exceptions are automatically   wrapped in an <code>_ClassElement_</code> by the calling context  ',directive
'@exception _ClassElement_ if the operation detects a request to cancel,    using <code>_ClassPathElement_()</code>, it should exit by throwing    <code>_ClassElement_</code>   ',directive
'@see IRunnableContext#run ',non-directive
' A thread listener is an object that is interested in receiving notifications  of thread changes.  For example, a thread listener can be used to notify a   runnable of the thread that will execute it, allowing the runnable to transfer  thread-local state from the calling thread before control passes to the new thread.    @since _ClassPathElement_ ',directive
' A thread listener is an object that is interested in receiving notifications  of thread changes.  ',non-directive
'For example, a thread listener can be used to notify a   runnable of the thread that will execute it, allowing the runnable to transfer  thread-local state from the calling thread before control passes to the new thread.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Notification that a thread change is occurring.    @param thread The new thread ',directive
' Notification that a thread change is occurring.   ',non-directive
?,non-directive
'@param thread The new thread ',non-directive
' Returns whether the first progress monitor is the same as, or a wrapper  around, the second progress monitor.    @param monitor1             the first progress monitor  @param monitor2             the second progress monitor  @return <code>true</code> if the first is the same as, or a wrapper          around, the second  @see _ClassElement_ ',non-directive
' Returns whether the first progress monitor is the same as, or a wrapper  around, the second progress monitor.   ',non-directive
?,non-directive
'@param monitor1             the first progress monitor  ',non-directive
'@param monitor2             the second progress monitor  ',non-directive
'@return <code>true</code> if the first is the same as, or a wrapper          around, the second  ',non-directive
'@see _ClassElement_ ',non-directive
' Checks with the given progress monitor and throws  <code>_ClassElement_</code> if it has been canceled.  <p>  Code in a long-running operation should call this method regularly so  that a request to cancel will be honored.  </p>  <p>  Convenience for:    <pre>  if (_ClassPathElement_())   throw new _ClassElement_();  </pre>    </p>    @param monitor             the progress monitor  @exception _ClassElement_                 if cancelling the operation has been requested  @see IProgressMonitor#_ClassElement_() ',directive
' Checks with the given progress monitor and throws  <code>_ClassElement_</code> if it has been canceled.  ',non-directive
'<p>  Code in a long-running operation should call this method regularly so  that a request to cancel will be honored.  ',directive
'</p>  <p>  Convenience for:    <pre>  if (_ClassPathElement_())   throw new _ClassElement_();  </pre>    </p>    ',directive
'@param monitor             the progress monitor  ',non-directive
'@exception _ClassElement_                 if cancelling the operation has been requested  ',directive
'@see IProgressMonitor#_ClassElement_() ',non-directive
' Returns the modal nesting level.  <p>  The modal nesting level increases by one each time the  <code>_ClassPathElement_</code> method is called within the dynamic scope  of another call to <code>_ClassPathElement_</code>.  </p>    @return the modal nesting level, or <code>0</code> if this method is          called outside the dynamic scope of any invocation of          <code>_ClassPathElement_</code> ',directive
' Returns the modal nesting level.  ',non-directive
'<p>  The modal nesting level increases by one each time the  <code>_ClassPathElement_</code> method is called within the dynamic scope  of another call to <code>_ClassPathElement_</code>.  ',directive
'</p>    ',non-directive
'@return the modal nesting level, or <code>0</code> if this method is          called outside the dynamic scope of any invocation of          <code>_ClassPathElement_</code> ',directive
' Returns whether the given thread is running a modal context.    @param thread             The thread to be checked  @return <code>true</code> if the given thread is running a modal          context, <code>false</code> if not ',directive
' Returns whether the given thread is running a modal context.   ',non-directive
?,non-directive
'@param thread             The thread to be checked  ',non-directive
'@return <code>true</code> if the given thread is running a modal          context, <code>false</code> if not ',non-directive
' Sets whether _ClassElement_ is running in debug mode.    @param _ClassElement_             <code>true</code> for debug mode, and <code>false</code>             for normal mode (the default) ',directive
' Sets whether _ClassElement_ is running in debug mode.   ',non-directive
?,non-directive
'@param _ClassElement_             <code>true</code> for debug mode, and <code>false</code>             for normal mode (the default) ',non-directive
' Sets whether _ClassElement_ may process events (by calling  <code>_ClassPathElement_()</code>) while running operations. By  default, _ClassElement_ will process events while running operations. Use  this method to disallow event processing temporarily.    @param _ClassElement_             <code>true</code> (the default) if events may be processed             while running an operation, <code>false</code> if             _ClassPathElement_() should not be called from             _ClassElement_.  @since _ClassPathElement_ ',directive
' Sets whether _ClassElement_ may process events (by calling  <code>_ClassPathElement_()</code>) while running operations. ',non-directive
'By  default, _ClassElement_ will process events while running operations. ',directive
'Use  this method to disallow event processing temporarily.   ',directive
?,non-directive
'@param _ClassElement_             <code>true</code> (the default) if events may be processed             while running an operation, <code>false</code> if             _ClassPathElement_() should not be called from             _ClassElement_.  ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' Extension interface for {@link _ClassPathElement_}  which provides the context for the  {@linkplain _ClassPathElement_ subject control content assistant}.   @since _ClassPathElement_  @deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',non-directive
' Extension interface for {',non-directive
'@link _ClassPathElement_}  which provides the context for the  {',non-directive
'@linkplain _ClassPathElement_ subject control content assistant}.   ',non-directive
'@since _ClassPathElement_  ',non-directive
'@deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',directive
' Returns a list of completion proposals based on the specified location  within the document that corresponds to the current cursor position  within the text viewer.   @param _ClassElement_ the content assist subject control whose            document is used to compute the proposals  @param _ClassElement_ an offset within the document for which            completions should be computed  @return an array of completion proposals or <code>null</code> if no          proposals are possible ',directive
' Returns a list of completion proposals based on the specified location  within the document that corresponds to the current cursor position  within the text viewer.   ',non-directive
'@param _ClassElement_ the content assist subject control whose            document is used to compute the proposals  ',non-directive
'@param _ClassElement_ an offset within the document for which            completions should be computed  ',non-directive
'@return an array of completion proposals or <code>null</code> if no          proposals are possible ',non-directive
' Returns information about possible contexts based on the specified  location within the document that corresponds to the current cursor  position within the content assist subject control.   @param _ClassElement_ the content assist subject control whose            document is used to compute the possible contexts  @param _ClassElement_ an offset within the document for which context            information should be computed  @return an array of context information objects or <code>null</code>          if no context could be found ',directive
' Returns information about possible contexts based on the specified  location within the document that corresponds to the current cursor  position within the content assist subject control.   ',non-directive
'@param _ClassElement_ the content assist subject control whose            document is used to compute the possible contexts  ',non-directive
'@param _ClassElement_ an offset within the document for which context            information should be computed  ',non-directive
'@return an array of context information objects or <code>null</code>          if no context could be found ',directive
' Extends {@link _ClassPathElement_} to  allow to install a content assistant on the given  {@linkplain _ClassPathElement_ content assist subject control}.   @since _ClassPathElement_  @deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',directive
' Extends {',directive
'@link _ClassPathElement_} to  allow to install a content assistant on the given  {',non-directive
'@linkplain _ClassPathElement_ content assist subject control}.   ',non-directive
'@since _ClassPathElement_  ',non-directive
'@deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',directive
' Installs content assist support on the given subject.   @param _ClassElement_ the one who requests content assist ',non-directive
' Installs content assist support on the given subject.   ',non-directive
'@param _ClassElement_ the one who requests content assist ',non-directive
' Adapts a {@link _ClassPathElement_} to a {@link _ClassPathElement_}.   <p>  Known issues:   <ul>   <li>_OSPathElement_/_ClassPathElement_?id=50121   = &gt; Combo doesn\'t get _OSPathElement_Down keys on GTK</li>    <li>_OSPathElement_/_ClassPathElement_?id=50123   = &gt; Combo broken on MacOS X</li>   </ul>  </p>   @since _ClassPathElement_  @deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',non-directive
' Adapts a {',non-directive
'@link _ClassPathElement_} to a {',non-directive
'@link _ClassPathElement_}.   ',non-directive
'<p>  Known issues:   <ul>   ',directive
'<li>_OSPathElement_/_ClassPathElement_?id=50121   = &gt; Combo doesn\'t get _OSPathElement_Down keys on GTK</li>    ',non-directive
'<li>_OSPathElement_/_ClassPathElement_?id=50123   = &gt; Combo broken on MacOS X</li>   </ul>  ',non-directive
'</p>   ',non-directive
'@since _ClassPathElement_  ',non-directive
'@deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a content assist subject control adapter for the given combo.   @param combo the combo to adapt ',non-directive
' Creates a content assist subject control adapter for the given combo.   ',non-directive
'@param combo the combo to adapt ',non-directive
' Adapts a {@link _ClassPathElement_} to an {@link _ClassPathElement_}.   @see _ClassPathElement_  @see _ClassPathElement_  @since _ClassPathElement_  @deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',non-directive
' Adapts a {',non-directive
'@link _ClassPathElement_} to an {',non-directive
'@link _ClassPathElement_}.   ',non-directive
'@see _ClassPathElement_  ',non-directive
'@see _ClassPathElement_  ',non-directive
'@since _ClassPathElement_  ',non-directive
'@deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a content assist subject control adapter for the given text widget.   @param text the text widget to adapt ',non-directive
' Creates a content assist subject control adapter for the given text widget.   ',non-directive
'@param text the text widget to adapt ',non-directive
' A default implementation of the {@link _ClassElement_} interface.  This implementation determines whether the information is valid by asking the content  assist processor for all  context information objects for the current position. If the  currently displayed information is in the result set, the context information is  considered valid.   @since _ClassPathElement_  @deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',non-directive
' A default implementation of the {',non-directive
'@link _ClassElement_} interface.  ',non-directive
'This implementation determines whether the information is valid by asking the content  assist processor for all  context information objects for the current position. ',non-directive
'If the  currently displayed information is in the result set, the context information is  considered valid.   ',directive
'@since _ClassPathElement_  ',non-directive
'@deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a new context information validator which is ready to be installed on  a particular context information.   @param processor the processor to be used for validation ',non-directive
' Creates a new context information validator which is ready to be installed on  a particular context information.   ',non-directive
'@param processor the processor to be used for validation ',non-directive
' Extends {@link _ClassPathElement_} to  allow to install a content assistant on the given  {@linkplain _ClassPathElement_ content assist subject control}.   @since _ClassPathElement_  @deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',directive
' Extends {',non-directive
'@link _ClassPathElement_} to  allow to install a content assistant on the given  {',non-directive
'@linkplain _ClassPathElement_ content assist subject control}.   ',non-directive
'@since _ClassPathElement_  ',non-directive
'@deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',directive
' Installs this validator for the given context information.   @param info the context information which this validator should check  @param _ClassElement_ the content assist subject control  @param offset the document offset for which the information            has been computed ',directive
' Installs this validator for the given context information.   ',non-directive
'@param info the context information which this validator should check  ',non-directive
'@param _ClassElement_ the content assist subject control  ',non-directive
'@param offset the document offset for which the information            has been computed ',non-directive
' An <code>_ClassElement_</code> delegates assistance requests from a  {@linkplain _ClassPathElement_ content assistant}  to a <code>Control</code>.   A visual feedback can be configured via {@link #_ClassElement_(ILabelProvider)}.   @since _ClassPathElement_  @deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',non-directive
' An <code>_ClassElement_</code> delegates assistance requests from a  {',non-directive
'@linkplain _ClassPathElement_ content assistant}  to a <code>Control</code>.   ',non-directive
'A visual feedback can be configured via {',directive
'@link #_ClassElement_(ILabelProvider)}.   ',directive
'@since _ClassPathElement_  ',non-directive
'@deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Sets the visual feedback provider for content assist.  The given {@link ILabelProvider} methods are called with  {@link #_ClassElement_()} as argument.   <ul>    <li><code>_ClassElement_(Object)</code> provides the visual cue image.      The image can maximally be 5 pixels wide and 8 pixels high.      If <code>_ClassElement_(Object)</code> returns <code>null</code>, a default image is used.    </li>    <li><code>_ClassElement_(Object)</code> provides the hover info text.      It is shown when hovering over the cue image or the adapted {@link Control}.      No info text is shown if <code>_ClassElement_(Object)</code> returns <code>null</code>.    </li>  </ul>  <p>  The given {@link ILabelProvider} becomes owned by the {@link _ClassElement_},  _ClassPathElement_. it gets disposed when the adapted {@link Control} is disposed  or when another {@link ILabelProvider} is set.  </p>   @param _ClassElement_ a {@link ILabelProvider}, or <code>null</code>   if no visual feedback should be shown ',directive
' Sets the visual feedback provider for content assist.  ',non-directive
'The given {',directive
'@link ILabelProvider} methods are called with  {',directive
'@link #_ClassElement_()} as argument.   ',directive
'<ul>    ',non-directive
'<li><code>_ClassElement_(Object)</code> provides the visual cue image.      ',non-directive
'The image can maximally be 5 pixels wide and 8 pixels high.      ',non-directive
'If <code>_ClassElement_(Object)</code> returns <code>null</code>, a default image is used.    ',directive
'</li>    ',non-directive
'<li><code>_ClassElement_(Object)</code> provides the hover info text.      ',non-directive
'It is shown when hovering over the cue image or the adapted {',non-directive
'@link Control}.      ',non-directive
'No info text is shown if <code>_ClassElement_(Object)</code> returns <code>null</code>.    ',directive
'</li>  </ul>  ',non-directive
'<p>  The given {',directive
'@link ILabelProvider} becomes owned by the {',directive
'@link _ClassElement_},  _ClassPathElement_. ',directive
'it gets disposed when the adapted {',directive
'@link Control} is disposed  or when another {',directive
'@link ILabelProvider} is set.  ',directive
'</p>   ',non-directive
'@param _ClassElement_ a {',directive
'@link ILabelProvider}, or <code>null</code>   if no visual feedback should be shown ',directive
' Creates a new {@link _ClassElement_}. ',non-directive
' Creates a new {',non-directive
'@link _ClassElement_}. ',non-directive
?,non-directive
?,non-directive
' A content assist subject control can request assistance provided by a  {@linkplain _ClassPathElement_ subject control content assistant}.   @since _ClassPathElement_ ',non-directive
' A content assist subject control can request assistance provided by a  {',non-directive
'@linkplain _ClassPathElement_ subject control content assistant}.   ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the control of this content assist subject control.   @return the control of this content assist subject control ',non-directive
' Returns the control of this content assist subject control.   ',non-directive
'@return the control of this content assist subject control ',non-directive
' Returns the selected range.   @return start and length of the selection, x is the offset and y the          length based on the subject\'s model (_ClassPathElement_. document) ',non-directive
' Returns the selected range.   ',non-directive
'@return start and length of the selection, x is the offset and y the          length based on the subject\'s model (_ClassPathElement_. ',non-directive
'document) ',non-directive
' Sets the selected range. Offset and length based on the subject\'s  model (_ClassPathElement_. document).   @param offset the offset of the selection based on the subject\'s model _ClassPathElement_. document  @param length the length of the selection based on the subject\'s model _ClassPathElement_. document ',non-directive
' Sets the selected range. ',non-directive
'Offset and length based on the subject\'s  model (_ClassPathElement_. ',non-directive
'document).   ',non-directive
'@param offset the offset of the selection based on the subject\'s model _ClassPathElement_. ',non-directive
'document  ',non-directive
'@param length the length of the selection based on the subject\'s model _ClassPathElement_. ',non-directive
'document ',non-directive
' Reveals the given region. Offset and length based on the subject\'s  model (_ClassPathElement_. document).   @param offset the offset of the selection based on the subject\'s model _ClassPathElement_. document  @param length the length of the selection based on the subject\'s model _ClassPathElement_. document ',non-directive
' Reveals the given region. ',non-directive
'Offset and length based on the subject\'s  model (_ClassPathElement_. ',non-directive
'document).   ',non-directive
'@param offset the offset of the selection based on the subject\'s model _ClassPathElement_. ',non-directive
'document  ',non-directive
'@param length the length of the selection based on the subject\'s model _ClassPathElement_. ',non-directive
'document ',non-directive
' Returns this content assist subject control\'s document.   @return the viewer\'s input document ',non-directive
' Returns this content assist subject control\'s document.   ',non-directive
'@return the viewer\'s input document ',non-directive
' If supported, inserts the verify key listener at the beginning of this content assist  subject\'s list of verify key listeners. If the listener is already  registered with the viewer this call moves the listener to the beginning  of the list.  <p>  Note: This content assist subject control may not support prepending a verify  listener, in which case <code>false</code> will be returned. However,  {@link #_ClassElement_(_ClassElement_)} might work.  </p>   @param _ClassElement_ the listener to be inserted  @return <code>true</code> if the listener was added ',directive
' If supported, inserts the verify key listener at the beginning of this content assist  subject\'s list of verify key listeners. ',non-directive
'If the listener is already  registered with the viewer this call moves the listener to the beginning  of the list.  ',directive
'<p>  Note: This content assist subject control may not support prepending a verify  listener, in which case <code>false</code> will be returned. ',directive
'However,  {',directive
'@link #_ClassElement_(_ClassElement_)} might work.  ',directive
'</p>   ',non-directive
'@param _ClassElement_ the listener to be inserted  ',non-directive
'@return <code>true</code> if the listener was added ',non-directive
' Removes the verify key listener from this content assist subject control\'s  list of verify key listeners. If the listener is not registered, this  call has no effect.   @param _ClassElement_ the listener to be removed ',directive
' Removes the verify key listener from this content assist subject control\'s  list of verify key listeners. ',non-directive
'If the listener is not registered, this  call has no effect.   ',directive
'@param _ClassElement_ the listener to be removed ',non-directive
' Tests whether a verify key listener can be added either using <code>_ClassElement_</code>  or {@link #_ClassElement_(_ClassElement_)}.   @return <code>true</code> if adding verify key listeners is supported ',non-directive
' Tests whether a verify key listener can be added either using <code>_ClassElement_</code>  or {',non-directive
'@link #_ClassElement_(_ClassElement_)}.   ',non-directive
'@return <code>true</code> if adding verify key listeners is supported ',non-directive
' If supported, registers an event consumer with this content assist  subject.   @param _ClassElement_ the content assist subject control\'s event consumer. <code>null</code>            is a valid argument. ',non-directive
' If supported, registers an event consumer with this content assist  subject.   ',directive
'@param _ClassElement_ the content assist subject control\'s event consumer. ',non-directive
'<code>null</code>            is a valid argument. ',directive
' The standard implementation of the {@link _ClassPathElement_} interface.  Usually, clients instantiate this class and configure it before using it.   @since _ClassPathElement_  @deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support * ',directive
' The standard implementation of the {',non-directive
'@link _ClassPathElement_} interface.  ',non-directive
'Usually, clients instantiate this class and configure it before using it.   ',directive
'@since _ClassPathElement_  ',non-directive
'@deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support * ',directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Extends {@link _ClassPathElement_} to  allow to install a content assistant on the given  {@linkplain _ClassPathElement_ content assist subject control}.   @since _ClassPathElement_  @deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',directive
' Extends {',non-directive
'@link _ClassPathElement_} to  allow to install a content assistant on the given  {',non-directive
'@linkplain _ClassPathElement_ content assist subject control}.   ',non-directive
'@since _ClassPathElement_  ',non-directive
'@deprecated As of _ClassPathElement_, replaced by Platform UI\'s field assist support ',directive
' Installs this presenter for the given context information.   @param info the context information which this presenter should style  @param _ClassElement_ the content assist subject control  @param offset the document offset for which the information has been computed ',directive
' Installs this presenter for the given context information.   ',non-directive
'@param info the context information which this presenter should style  ',non-directive
'@param _ClassElement_ the content assist subject control  ',non-directive
'@param offset the document offset for which the information has been computed ',non-directive
' A field editor to edit directory paths. ',non-directive
' A field editor to edit directory paths. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a new path field editor  ',non-directive
' Creates a new path field editor  ',non-directive
' Creates a path field editor.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param _ClassElement_ the label text displayed for the directory chooser  @param parent the parent of the field editor\'s control ',non-directive
' Creates a path field editor.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param _ClassElement_ the label text displayed for the directory chooser  ',non-directive
'@param parent the parent of the field editor\'s control ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns the value that will be used for _ClassPathElement_(int).    @return the value.  @see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Returns the value that will be used for _ClassPathElement_(int).   ',non-directive
?,non-directive
'@return the value.  ',non-directive
'@see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Returns the value that will be used for _ClassPathElement_(int).    @return the value.  @see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Returns the value that will be used for _ClassPathElement_(int).   ',non-directive
?,non-directive
'@return the value.  ',non-directive
'@see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Returns the value that will be used for _ClassPathElement_(int).    @return the value.  @see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Returns the value that will be used for _ClassPathElement_(int).   ',non-directive
?,non-directive
'@return the value.  ',non-directive
'@see _ClassPathElement_#_ClassElement_(int) ',non-directive
?,non-directive
?,non-directive
' Returns the value that will be used for _ClassPathElement_(int).    @return the value.  @see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Returns the value that will be used for _ClassPathElement_(int).   ',non-directive
?,non-directive
'@return the value.  ',non-directive
'@see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Returns this field editor\'s scale control.    @return the scale control, or <code>null</code> if no scale field is          created yet ',non-directive
' Returns this field editor\'s scale control.   ',non-directive
?,non-directive
'@return the scale control, or <code>null</code> if no scale field is          created yet ',directive
?,non-directive
?,non-directive
' Set the value to be used for _ClassPathElement_(int) and update the  scale.    @param increment             a value greater than 0.  @see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Set the value to be used for _ClassPathElement_(int) and update the  scale.   ',non-directive
?,non-directive
'@param increment             a value greater than 0.  ',directive
'@see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Set the value to be used for _ClassPathElement_(int) and update the  scale.    @param max             a value greater than 0.  @see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Set the value to be used for _ClassPathElement_(int) and update the  scale.   ',non-directive
?,non-directive
'@param max             a value greater than 0.  ',directive
'@see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Set the value to be used for _ClassPathElement_(int) and update the  scale.    @param min             a value greater than 0.  @see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Set the value to be used for _ClassPathElement_(int) and update the  scale.   ',non-directive
?,non-directive
'@param min             a value greater than 0.  ',directive
'@see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Set the value to be used for _ClassPathElement_(int) and update the  scale.    @param _ClassElement_             a value greater than 0.  @see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Set the value to be used for _ClassPathElement_(int) and update the  scale.   ',non-directive
?,non-directive
'@param _ClassElement_             a value greater than 0.  ',directive
'@see _ClassPathElement_#_ClassElement_(int) ',non-directive
' Informs this field editor\'s listener, if it has one, about a change to  the value (<code>VALUE</code> property) provided that the old and new  values are different.  <p>  This hook is <em>not</em> called when the scale is initialized (or  reset to the default value) from the preference store.  </p> ',directive
' Informs this field editor\'s listener, if it has one, about a change to  the value (<code>VALUE</code> property) provided that the old and new  values are different.  ',non-directive
'<p>  This hook is <em>not</em> called when the scale is initialized (or  reset to the default value) from the preference store.  ',directive
'</p> ',non-directive
' Creates a scale field editor.    @param name             the name of the preference this field editor works on  @param _ClassElement_             the label text of the field editor  @param parent             the parent of the field editor\'s control ',non-directive
' Creates a scale field editor.   ',non-directive
?,non-directive
'@param name             the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_             the label text of the field editor  ',non-directive
'@param parent             the parent of the field editor\'s control ',non-directive
' Creates a scale field editor with particular scale values.    @param name             the name of the preference this field editor works on  @param _ClassElement_             the label text of the field editor  @param parent             the parent of the field editor\'s control  @param min             the value used for _ClassPathElement_(int).  @param max             the value used for _ClassPathElement_(int).  @param increment             the value used for _ClassPathElement_(int).  @param _ClassElement_             the value used for _ClassPathElement_(int). ',non-directive
' Creates a scale field editor with particular scale values.   ',non-directive
?,non-directive
'@param name             the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_             the label text of the field editor  ',non-directive
'@param parent             the parent of the field editor\'s control  ',non-directive
'@param min             the value used for _ClassPathElement_(int).  ',non-directive
'@param max             the value used for _ClassPathElement_(int).  ',non-directive
'@param increment             the value used for _ClassPathElement_(int).  ',non-directive
'@param _ClassElement_             the value used for _ClassPathElement_(int). ',non-directive
' The scale, or <code>null</code> if none. ',non-directive
' The scale, or <code>null</code> if none. ',directive
' Abstract base class for all field editors.  <p>  A field editor presents the value of a preference to the end   user. The value is loaded from a preference store; if  modified by the end user, the value is validated and eventually  stored back to the preference store. A field editor reports  an event when the value, or the validity of the value, changes.  </p>  <p>  Field editors should be used in conjunction with a field   editor preference page (<code>_ClassElement_</code>)  which coordinates everything and provides the message line  which display messages emanating from the editor.  </p>  <p>  This package contains ready-to-use field editors for various  types of preferences:  <ul>    <li><code>_ClassElement_</code> - booleans</li>    <li><code>_ClassElement_</code> - integers</li>    <li><code>_ClassElement_</code> - text strings</li>    <li><code>_ClassElement_</code> - enumerations</li>    <li><code>_ClassElement_</code> - RGB colors</li>    <li><code>_ClassElement_</code> - fonts</li>    <li><code>_ClassElement_</code> - directories</li>    <li><code>_ClassElement_</code> - files</li>    <li><code>_ClassElement_</code> - paths</li>  </ul>  </p> ',directive
' Abstract base class for all field editors.  ',non-directive
'<p>  A field editor presents the value of a preference to the end   user. ',non-directive
'The value is loaded from a preference store; if  modified by the end user, the value is validated and eventually  stored back to the preference store. ',directive
'A field editor reports  an event when the value, or the validity of the value, changes.  ',non-directive
'</p>  <p>  Field editors should be used in conjunction with a field   editor preference page (<code>_ClassElement_</code>)  which coordinates everything and provides the message line  which display messages emanating from the editor.  ',directive
'</p>  <p>  This package contains ready-to-use field editors for various  types of preferences:  <ul>    ',non-directive
'<li><code>_ClassElement_</code> - booleans</li>    ',non-directive
'<li><code>_ClassElement_</code> - integers</li>    ',non-directive
'<li><code>_ClassElement_</code> - text strings</li>    ',non-directive
'<li><code>_ClassElement_</code> - enumerations</li>    ',non-directive
'<li><code>_ClassElement_</code> - RGB colors</li>    ',non-directive
'<li><code>_ClassElement_</code> - fonts</li>    ',non-directive
'<li><code>_ClassElement_</code> - directories</li>    ',non-directive
'<li><code>_ClassElement_</code> - files</li>    ',non-directive
'<li><code>_ClassElement_</code> - paths</li>  </ul>  ',non-directive
'</p> ',non-directive
' Checks if the given parent is the current parent of the  supplied control; throws an (unchecked) exception if they  are not correctly related.   @param control the control  @param parent the parent control ',non-directive
' Checks if the given parent is the current parent of the  supplied control; throws an (unchecked) exception if they  are not correctly related.   ',directive
'@param control the control  ',non-directive
'@param parent the parent control ',non-directive
' Clears the error message from the message line. ',directive
' Clears the error message from the message line. ',non-directive
' Clears the normal message from the message line. ',non-directive
' Clears the normal message from the message line. ',non-directive
' Creates this field editor\'s main control containing all of its  basic controls.   @param parent the parent control ',non-directive
' Creates this field editor\'s main control containing all of its  basic controls.   ',non-directive
'@param parent the parent control ',non-directive
' Disposes the SWT resources used by this field editor. ',non-directive
' Disposes the SWT resources used by this field editor. ',non-directive
' Fills this field editor\'s basic controls into the given parent.    @param parent the composite used as a parent for the basic controls;  the parent\'s layout must be a <code>_ClassElement_</code>  @param _ClassElement_ the number of columns ',directive
' Fills this field editor\'s basic controls into the given parent.    ',non-directive
'@param parent the composite used as a parent for the basic controls;  the parent\'s layout must be a <code>_ClassElement_</code>  ',directive
'@param _ClassElement_ the number of columns ',non-directive
' Informs this field editor\'s listener, if it has one, about a change to  one of this field editor\'s boolean-valued properties. Does nothing  if the old and new values are the same.   @param property the field editor property name,     such as <code>VALUE</code> or <code>IS_VALID</code>  @param _ClassElement_ the old value  @param _ClassElement_ the new value ',non-directive
' Informs this field editor\'s listener, if it has one, about a change to  one of this field editor\'s boolean-valued properties. ',non-directive
'Does nothing  if the old and new values are the same.   ',directive
'@param property the field editor property name,     such as <code>VALUE</code> or <code>IS_VALID</code>  ',non-directive
'@param _ClassElement_ the old value  ',non-directive
'@param _ClassElement_ the new value ',non-directive
' Informs this field editor\'s listener, if it has one, about a change to  one of this field editor\'s properties.   @param property the field editor property name,     such as <code>VALUE</code> or <code>IS_VALID</code>  @param _ClassElement_ the old value object, or <code>null</code>  @param _ClassElement_ the new value, or <code>null</code> ',non-directive
' Informs this field editor\'s listener, if it has one, about a change to  one of this field editor\'s properties.   ',non-directive
'@param property the field editor property name,     such as <code>VALUE</code> or <code>IS_VALID</code>  ',non-directive
'@param _ClassElement_ the old value object, or <code>null</code>  ',directive
'@param _ClassElement_ the new value, or <code>null</code> ',directive
' Returns the symbolic font name used by this field editor.   @return the symbolic font name ',non-directive
' Returns the symbolic font name used by this field editor.   ',non-directive
'@return the symbolic font name ',non-directive
' Returns the label control.    @return the label control, or <code>null</code>   if no label control has been created ',non-directive
' Returns the label control.    ',non-directive
'@return the label control, or <code>null</code>   if no label control has been created ',directive
' Returns this field editor\'s label component.  <p>  The label is created if it does not already exist  </p>   @param parent the parent  @return the label control ',non-directive
' Returns this field editor\'s label component.  ',non-directive
'<p>  The label is created if it does not already exist  </p>   ',directive
'@param parent the parent  ',non-directive
'@return the label control ',non-directive
' Returns this field editor\'s label text.   @return the label text ',non-directive
' Returns this field editor\'s label text.   ',non-directive
'@return the label text ',non-directive
' Returns the number of basic controls this field editor consists of.   @return the number of controls ',non-directive
' Returns the number of basic controls this field editor consists of.   ',non-directive
'@return the number of controls ',non-directive
' Returns the name of the preference this field editor operates on.   @return the name of the preference ',non-directive
' Returns the name of the preference this field editor operates on.   ',non-directive
'@return the name of the preference ',non-directive
' Returns the preference page in which this field editor  appears.   @return the preference page, or <code>null</code> if none  @deprecated use #_ClassElement_() ',non-directive
' Returns the preference page in which this field editor  appears.   ',non-directive
'@return the preference page, or <code>null</code> if none  ',directive
'@deprecated use #_ClassElement_() ',directive
' Return the _ClassElement_ that the receiver is sending  updates to.    @return _ClassElement_ or <code>null</code> if it   has not been set.    @since _ClassPathElement_ ',non-directive
' Return the _ClassElement_ that the receiver is sending  updates to.   ',non-directive
?,non-directive
'@return _ClassElement_ or <code>null</code> if it   has not been set.   ',directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the preference store used by this field editor.   @return the preference store, or <code>null</code> if none  @see #_ClassElement_ ',non-directive
' Returns the preference store used by this field editor.   ',non-directive
'@return the preference store, or <code>null</code> if none  ',directive
'@see #_ClassElement_ ',non-directive
' Initialize the field editor with the given preference name and label.    @param name the name of the preference this field editor works on  @param text the label text of the field editor ',non-directive
' Initialize the field editor with the given preference name and label.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param text the label text of the field editor ',non-directive
' Initializes this field editor with the preference value from  the preference store. ',non-directive
' Initializes this field editor with the preference value from  the preference store. ',non-directive
' Initializes this field editor with the default preference value  from the preference store. ',non-directive
' Initializes this field editor with the default preference value  from the preference store. ',non-directive
' Returns whether this field editor currently presents the  default value for its preference.    @return <code>true</code> if the default value is presented,    and <code>false</code> otherwise ',non-directive
' Returns whether this field editor currently presents the  default value for its preference.   ',non-directive
?,non-directive
'@return <code>true</code> if the default value is presented,    and <code>false</code> otherwise ',non-directive
' Sets this field editor\'s label text.  The label is typically presented to the left of the entry field.   @param text the label text ',non-directive
' Sets this field editor\'s label text.  ',non-directive
'The label is typically presented to the left of the entry field.   ',directive
'@param text the label text ',non-directive
' Sets the name of the preference this field editor operates on.  <p>  The ability to change this allows the same field editor object  to be reused for different preferences.  </p>  <p>  For example: <p>  <pre>   ...   _ClassPathElement_(\"font\");   _ClassPathElement_();  </pre>  </p>   @param name the name of the preference ',non-directive
' Sets the name of the preference this field editor operates on.  ',non-directive
'<p>  The ability to change this allows the same field editor object  to be reused for different preferences.  ',directive
'</p>  <p>  For example: <p>  <pre>   ...   ',non-directive
'_ClassPathElement_(\"font\");   _ClassPathElement_();  </pre>  </p>   ',non-directive
'@param name the name of the preference ',non-directive
' Sets the preference page in which this field editor  appears.   @param _ClassElement_ the preference page, or <code>null</code> if none  @deprecated use #_ClassElement_(_ClassElement_) ',non-directive
' Sets the preference page in which this field editor  appears.   ',non-directive
'@param _ClassElement_ the preference page, or <code>null</code> if none  ',directive
'@deprecated use #_ClassElement_(_ClassElement_) ',directive
' Set the page to be the receiver.  @param _ClassElement_    @since _ClassPathElement_ ',non-directive
' Set the page to be the receiver.  ',non-directive
'@param _ClassElement_    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Sets the preference store used by this field editor.   @param store the preference store, or <code>null</code> if none  @see #_ClassElement_ ',non-directive
' Sets the preference store used by this field editor.   ',non-directive
'@param store the preference store, or <code>null</code> if none  ',directive
'@see #_ClassElement_ ',non-directive
' Sets whether this field editor is presenting the default value.   @param _ClassElement_ <code>true</code> if the default value is being presented,   and <code>false</code> otherwise ',non-directive
' Sets whether this field editor is presenting the default value.   ',non-directive
'@param _ClassElement_ <code>true</code> if the default value is being presented,   and <code>false</code> otherwise ',non-directive
' Sets or removes the property change listener for this field editor.  <p>  Note that field editors can support only a single listener.  </p>   @param listener a property change listener, or <code>null</code>   to remove ',directive
' Sets or removes the property change listener for this field editor.  ',non-directive
'<p>  Note that field editors can support only a single listener.  ',directive
'</p>   ',non-directive
'@param listener a property change listener, or <code>null</code>   to remove ',directive
' Shows the given error message in the page for this  field editor if it has one.   @param msg the error message ',directive
' Shows the given error message in the page for this  field editor if it has one.   ',non-directive
'@param msg the error message ',non-directive
' Shows the given message in the page for this  field editor if it has one.   @param msg the message ',non-directive
' Shows the given message in the page for this  field editor if it has one.   ',non-directive
'@param msg the message ',non-directive
' Stores this field editor\'s value back into the preference store. ',non-directive
' Stores this field editor\'s value back into the preference store. ',non-directive
' Set the _ClassElement_ on button to be one that is spaced for the  current font.  @param button the button the data is being set on. ',non-directive
' Set the _ClassElement_ on button to be one that is spaced for the  current font.  ',non-directive
'@param button the button the data is being set on. ',non-directive
' Set whether or not the controls in the field editor  are enabled.  @param enabled The enabled state.  @param parent The parent of the controls in the group.   Used to create the controls if required. ',directive
' Set whether or not the controls in the field editor  are enabled.  ',non-directive
'@param enabled The enabled state.  ',non-directive
'@param parent The parent of the controls in the group.   ',non-directive
'Used to create the controls if required. ',directive
' Creates a new field editor. ',non-directive
' Creates a new field editor. ',non-directive
' Creates a new field editor.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param parent the parent of the field editor\'s control ',non-directive
' Creates a new field editor.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param parent the parent of the field editor\'s control ',non-directive
' Property name constant (value <code>\"field_editor_is_valid\"</code>)  to signal a change in the validity of the value of this field editor. ',non-directive
' Property name constant (value <code>\"field_editor_is_valid\"</code>)  to signal a change in the validity of the value of this field editor. ',non-directive
' Property name constant (value <code>\"field_editor_value\"</code>)  to signal a change in the value of this field editor. ',non-directive
' Property name constant (value <code>\"field_editor_value\"</code>)  to signal a change in the value of this field editor. ',non-directive
'  Gap between label and control. ',directive
'  Gap between label and control. ',non-directive
' A concrete implementation of a node in a preference dialog tree. This class  also supports lazy creation of the node\'s preference page. ',non-directive
' A concrete implementation of a node in a preference dialog tree. ',non-directive
'This class  also supports lazy creation of the node\'s preference page. ',directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' (non-Javadoc) Method declared on IPreferenceNode. ',non-directive
' (non-Javadoc) Method declared on IPreferenceNode. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns the image descriptor for this node.    @return the image descriptor ',non-directive
' Returns the image descriptor for this node.   ',non-directive
?,non-directive
'@return the image descriptor ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Set the current page to be _ClassElement_.    @param _ClassElement_ ',non-directive
' Set the current page to be _ClassElement_.   ',non-directive
?,non-directive
'@param _ClassElement_ ',non-directive
' Creates a new preference node with the given id. The new node has no  subnodes.    @param id             the node id ',non-directive
' Creates a new preference node with the given id. ',non-directive
'The new node has no  subnodes.   ',directive
?,non-directive
'@param id             the node id ',non-directive
' Creates a preference node with the given id and preference page. The  title of the preference page is used for the node label. The node will  not have an image.    @param id             the node id  @param _ClassElement_             the preference page ',non-directive
' Creates a preference node with the given id and preference page. ',non-directive
'The  title of the preference page is used for the node label. ',directive
'The node will  not have an image.   ',directive
?,non-directive
'@param id             the node id  ',non-directive
'@param _ClassElement_             the preference page ',non-directive
' A utility class for dealing with preferences whose values are  common SWT objects (color, points, rectangles, and font data).  The static methods on this class handle the conversion between  the SWT objects and their string representations.  <p>  Usage:  <pre>  IPreferenceStore store = ...;  _ClassPathElement_(store, \"bg\", new RGB(127,127,127));  ...  RBG _ClassElement_ = _ClassPathElement_(store, \"bg\");  </pre>  </p>  <p>  This class contains static methods and fields only and cannot   be instantiated.  </p>  Note: touching this class has the side effect of creating a display (static initializer).  @noinstantiate This class is not intended to be instantiated by clients. ',directive
' A utility class for dealing with preferences whose values are  common SWT objects (color, points, rectangles, and font data).  ',non-directive
'The static methods on this class handle the conversion between  the SWT objects and their string representations.  ',directive
'<p>  Usage:  <pre>  IPreferenceStore store = ...;  _ClassPathElement_(store, \"bg\", new RGB(127,127,127));  ...  ',directive
'RBG _ClassElement_ = _ClassPathElement_(store, \"bg\");  </pre>  </p>  <p>  This class contains static methods and fields only and cannot   be instantiated.  ',non-directive
'</p>  Note: touching this class has the side effect of creating a display (static initializer).  ',directive
'@noinstantiate This class is not intended to be instantiated by clients. ',non-directive
' Helper method to construct a <code>_ClassElement_</code> from the given string.  String is in the form _ClassElement_;_ClassElement_; in order that  multiple _ClassElement_ can be defined.  @param value the identifier for the font  @return _ClassElement_[]    @since _ClassPathElement_ ',non-directive
' Helper method to construct a <code>_ClassElement_</code> from the given string.  ',non-directive
'String is in the form _ClassElement_;_ClassElement_; in order that  multiple _ClassElement_ can be defined.  ',directive
'@param value the identifier for the font  ',non-directive
'@return _ClassElement_[]    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Reads the supplied string and returns its corresponding  _ClassElement_. If it cannot be read then the default _ClassElement_  will be returned.    @param _ClassElement_ the string value for the font data    @return the font data ',non-directive
' Reads the supplied string and returns its corresponding  _ClassElement_. ',non-directive
'If it cannot be read then the default _ClassElement_  will be returned.   ',directive
?,non-directive
'@param _ClassElement_ the string value for the font data    ',non-directive
'@return the font data ',non-directive
' Returns the current value of the color-valued preference with the  given name in the given preference store.  Returns the default-default value (<code>COLOR_DEFAULT_DEFAULT</code>)   if there is no preference with the given name, or if the current value   cannot be treated as a color.   @param store the preference store  @param name the name of the preference  @return the color-valued preference ',non-directive
' Returns the current value of the color-valued preference with the  given name in the given preference store.  ',non-directive
'Returns the default-default value (<code>COLOR_DEFAULT_DEFAULT</code>)   if there is no preference with the given name, or if the current value   cannot be treated as a color.   ',directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@return the color-valued preference ',non-directive
' Returns the default value for the color-valued preference  with the given name in the given preference store.  Returns the default-default value (<code>COLOR_DEFAULT_DEFAULT</code>)   is no default preference with the given name, or if the default   value cannot be treated as a color.   @param store the preference store  @param name the name of the preference  @return the default value of the preference ',non-directive
' Returns the default value for the color-valued preference  with the given name in the given preference store.  ',non-directive
'Returns the default-default value (<code>COLOR_DEFAULT_DEFAULT</code>)   is no default preference with the given name, or if the default   value cannot be treated as a color.   ',directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@return the default value of the preference ',non-directive
' Returns the default value array for the font-valued preference  with the given name in the given preference store.  Returns the default-default value (<code>FONTDATA_ARRAY_DEFAULT_DEFAULT</code>)   is no default preference with the given name, or if the default   value cannot be treated as font data.   @param store the preference store  @param name the name of the preference  @return the default value of the preference ',non-directive
' Returns the default value array for the font-valued preference  with the given name in the given preference store.  ',non-directive
'Returns the default-default value (<code>FONTDATA_ARRAY_DEFAULT_DEFAULT</code>)   is no default preference with the given name, or if the default   value cannot be treated as font data.   ',directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@return the default value of the preference ',non-directive
' Returns the default value for the point-valued preference  with the given name in the given preference store.  Returns the default-default value (<code>POINT_DEFAULT_DEFAULT</code>)   is no default preference with the given name, or if the default   value cannot be treated as a point.   @param store the preference store  @param name the name of the preference  @return the default value of the preference ',non-directive
' Returns the default value for the point-valued preference  with the given name in the given preference store.  ',non-directive
'Returns the default-default value (<code>POINT_DEFAULT_DEFAULT</code>)   is no default preference with the given name, or if the default   value cannot be treated as a point.   ',directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@return the default value of the preference ',non-directive
' Returns the default value for the rectangle-valued preference  with the given name in the given preference store.  Returns the default-default value (<code>RECTANGLE_DEFAULT_DEFAULT</code>)   is no default preference with the given name, or if the default   value cannot be treated as a rectangle.   @param store the preference store  @param name the name of the preference  @return the default value of the preference ',non-directive
' Returns the default value for the rectangle-valued preference  with the given name in the given preference store.  ',non-directive
'Returns the default-default value (<code>RECTANGLE_DEFAULT_DEFAULT</code>)   is no default preference with the given name, or if the default   value cannot be treated as a rectangle.   ',directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@return the default value of the preference ',non-directive
' Returns the current value of the font-valued preference with the  given name in the given preference store.  Returns the default-default value (<code>FONTDATA_ARRAY_DEFAULT_DEFAULT</code>)   if there is no preference with the given name, or if the current value   cannot be treated as font data.   @param store the preference store  @param name the name of the preference  @return the font-valued preference ',non-directive
' Returns the current value of the font-valued preference with the  given name in the given preference store.  ',non-directive
'Returns the default-default value (<code>FONTDATA_ARRAY_DEFAULT_DEFAULT</code>)   if there is no preference with the given name, or if the current value   cannot be treated as font data.   ',directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@return the font-valued preference ',non-directive
' Returns the current value of the point-valued preference with the  given name in the given preference store.  Returns the default-default value (<code>POINT_DEFAULT_DEFAULT</code>)   if there is no preference with the given name, or if the current value   cannot be treated as a point.   @param store the preference store  @param name the name of the preference  @return the point-valued preference ',non-directive
' Returns the current value of the point-valued preference with the  given name in the given preference store.  ',non-directive
'Returns the default-default value (<code>POINT_DEFAULT_DEFAULT</code>)   if there is no preference with the given name, or if the current value   cannot be treated as a point.   ',directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@return the point-valued preference ',non-directive
' Returns the current value of the rectangle-valued preference with the  given name in the given preference store.  Returns the default-default value (<code>RECTANGLE_DEFAULT_DEFAULT</code>)   if there is no preference with the given name, or if the current value   cannot be treated as a rectangle.   @param store the preference store  @param name the name of the preference  @return the rectangle-valued preference ',non-directive
' Returns the current value of the rectangle-valued preference with the  given name in the given preference store.  ',non-directive
'Returns the default-default value (<code>RECTANGLE_DEFAULT_DEFAULT</code>)   if there is no preference with the given name, or if the current value   cannot be treated as a rectangle.   ',directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@return the rectangle-valued preference ',non-directive
' Sets the default value of the preference with the given name  in the given preference store. As _ClassElement_ are stored as   arrays this method is only provided for backwards compatibility.  Use <code>_ClassElement_(IPreferenceStore, String, _ClassElement_[])</code>  instead.   @param store the preference store  @param name the name of the preference  @param value the new default value of the preference ',directive
' Sets the default value of the preference with the given name  in the given preference store. ',non-directive
'As _ClassElement_ are stored as   arrays this method is only provided for backwards compatibility.  ',directive
'Use <code>_ClassElement_(IPreferenceStore, String, _ClassElement_[])</code>  instead.   ',directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new default value of the preference ',non-directive
' Sets the default value of the preference with the given name  in the given preference store.   @param store the preference store  @param name the name of the preference  @param value the new default value of the preference ',non-directive
' Sets the default value of the preference with the given name  in the given preference store.   ',non-directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new default value of the preference ',non-directive
' Sets the default value of the preference with the given name  in the given preference store.   @param store the preference store  @param name the name of the preference  @param value the new default value of the preference ',non-directive
' Sets the default value of the preference with the given name  in the given preference store.   ',non-directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new default value of the preference ',non-directive
' Sets the default value of the preference with the given name  in the given preference store.   @param store the preference store  @param name the name of the preference  @param value the new default value of the preference ',non-directive
' Sets the default value of the preference with the given name  in the given preference store.   ',non-directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new default value of the preference ',non-directive
' Sets the default value of the preference with the given name  in the given preference store.   @param store the preference store  @param name the name of the preference  @param value the new default value of the preference ',non-directive
' Sets the default value of the preference with the given name  in the given preference store.   ',non-directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new default value of the preference ',non-directive
' Sets the current value of the preference with the given name  in the given preference store.   <p>  Included for backwards compatibility.  This method is equivalent to  </code>_ClassElement_(store, name, new _ClassElement_[]{value})</code>.  </p>    @param store the preference store  @param name the name of the preference  @param value the new current value of the preference ',non-directive
' Sets the current value of the preference with the given name  in the given preference store.   ',non-directive
'<p>  Included for backwards compatibility.  ',directive
'This method is equivalent to  </code>_ClassElement_(store, name, new _ClassElement_[]{value})</code>.  ',directive
'</p>    ',non-directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new current value of the preference ',non-directive
' Sets the current value of the preference with the given name  in the given preference store. This method also sets the corresponding  key in the JFace font registry to the value and fires a   property change event to listeners on the preference store.    <p>  Note that this API does not update any other settings that may  be dependant upon it. Only the value in the preference store   and in the font registry is updated.  </p>   @param store the preference store  @param name the name of the preference  @param value the new current value of the preference    @see #_ClassElement_(IPreferenceStore, String, _ClassElement_[]) ',directive
' Sets the current value of the preference with the given name  in the given preference store. ',non-directive
'This method also sets the corresponding  key in the JFace font registry to the value and fires a   property change event to listeners on the preference store.   ',directive
' <p>  Note that this API does not update any other settings that may  be dependant upon it. ',directive
'Only the value in the preference store   and in the font registry is updated.  ',directive
'</p>   ',non-directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new current value of the preference    ',non-directive
'@see #_ClassElement_(IPreferenceStore, String, _ClassElement_[]) ',non-directive
' Sets the current value of the preference with the given name  in the given preference store. This method does not update  the font registry or fire a property change event.    @param store the preference store  @param name the name of the preference  @param value the new current value of the preference    @see _ClassElement_#_ClassElement_(IPreferenceStore, String, _ClassElement_[]) ',non-directive
' Sets the current value of the preference with the given name  in the given preference store. ',non-directive
'This method does not update  the font registry or fire a property change event.   ',directive
?,non-directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new current value of the preference    ',non-directive
'@see _ClassElement_#_ClassElement_(IPreferenceStore, String, _ClassElement_[]) ',non-directive
' Returns the stored representation of the given array of _ClassElement_ objects.  The stored representation has the form _ClassElement_;_ClassElement_;  Only includes the non-null entries.    @param _ClassElement_ the array of _ClassElement_ objects  @return the stored representation of the _ClassElement_ objects  @since _ClassPathElement_ ',directive
' Returns the stored representation of the given array of _ClassElement_ objects.  ',non-directive
'The stored representation has the form _ClassElement_;_ClassElement_;  Only includes the non-null entries.   ',directive
?,non-directive
'@param _ClassElement_ the array of _ClassElement_ objects  ',non-directive
'@return the stored representation of the _ClassElement_ objects  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Sets the current value of the preference with the given name  in the given preference store.   @param store the preference store  @param name the name of the preference  @param value the new current value of the preference ',non-directive
' Sets the current value of the preference with the given name  in the given preference store.   ',non-directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new current value of the preference ',non-directive
' Sets the current value of the preference with the given name  in the given preference store.   @param store the preference store  @param name the name of the preference  @param value the new current value of the preference ',non-directive
' Sets the current value of the preference with the given name  in the given preference store.   ',non-directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new current value of the preference ',non-directive
' Sets the current value of the preference with the given name  in the given preference store.   @param store the preference store  @param name the name of the preference  @param value the new current value of the preference ',non-directive
' Sets the current value of the preference with the given name  in the given preference store.   ',non-directive
'@param store the preference store  ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new current value of the preference ',non-directive
' The default-default value for point preferences  (the origin, <code>(0,0)</code>). ',non-directive
' The default-default value for point preferences  (the origin, <code>(0,0)</code>). ',non-directive
' The default-default value for rectangle preferences  (the empty rectangle <code>(0,0,0,0)</code>). ',non-directive
' The default-default value for rectangle preferences  (the empty rectangle <code>(0,0,0,0)</code>). ',non-directive
' The default-default value for color preferences   (black, <code>RGB(0,0,0)</code>). ',non-directive
' The default-default value for color preferences   (black, <code>RGB(0,0,0)</code>). ',non-directive
' The default-default value for <code>_ClassElement_[]</code> preferences. ',non-directive
' The default-default value for <code>_ClassElement_[]</code> preferences. ',non-directive
' The default-default value for <code>_ClassElement_</code> preferences. ',non-directive
' The default-default value for <code>_ClassElement_</code> preferences. ',non-directive
'   JFacePreferences is a class used to administer the preferences used by JFace  objects. ',non-directive
'   JFacePreferences is a class used to administer the preferences used by JFace  objects. ',non-directive
' Return the preference store for the receiver.    @return IPreferenceStore or null ',non-directive
' Return the preference store for the receiver.   ',non-directive
?,non-directive
'@return IPreferenceStore or null ',directive
' Set the preference store for the receiver.    @param store             IPreferenceStore ',non-directive
' Set the preference store for the receiver.   ',non-directive
?,non-directive
'@param store             IPreferenceStore ',non-directive
' Identifier for the Error Color ',directive
' Identifier for the Error Color ',non-directive
' Identifier for the Hyperlink Color ',non-directive
' Identifier for the Hyperlink Color ',non-directive
' Identifier for the Active Hyperlink Colour ',non-directive
' Identifier for the Active Hyperlink Colour ',non-directive
' Identifier for the color used to show extra informations in labels, as a  qualified name. For example in \'_ClassPathElement_ - _OSPathElement_bar\', the qualifier  is \'- _OSPathElement_bar\'.    @since _ClassPathElement_ ',non-directive
' Identifier for the color used to show extra informations in labels, as a  qualified name. ',non-directive
'For example in \'_ClassPathElement_ - _OSPathElement_bar\', the qualifier  is \'- _OSPathElement_bar\'.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Identifier for the color used to show label decorations For example in  \'_ClassPathElement_ [_ClassPathElement_]\', the decoration is \'[_ClassPathElement_]\'.    @since _ClassPathElement_ ',non-directive
' Identifier for the color used to show label decorations For example in  \'_ClassPathElement_ [_ClassPathElement_]\', the decoration is \'[_ClassPathElement_]\'.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Identifier for the color used to counter informations For example in  \'_ClassPathElement_ (2 matches)\', the counter information is \'(2 matches)\'.    @since _ClassPathElement_ ',non-directive
' Identifier for the color used to counter informations For example in  \'_ClassPathElement_ (2 matches)\', the counter information is \'(2 matches)\'.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Identifier for the color used for the background of content assist  popup dialogs.    @since _ClassPathElement_ ',non-directive
' Identifier for the color used for the background of content assist  popup dialogs.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Identifier for the color used for the foreground of content assist  popup dialogs.    @since _ClassPathElement_ ',non-directive
' Identifier for the color used for the foreground of content assist  popup dialogs.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' An interface used by a preference page to talk to  its dialog. ',non-directive
' An interface used by a preference page to talk to  its dialog. ',non-directive
' Returns the preference store.   @return the preference store, or <code>null</code> if none ',non-directive
' Returns the preference store.   ',non-directive
'@return the preference store, or <code>null</code> if none ',directive
' Adjusts the enable state of the OK   button to reflect the state of the currently active   page in this container.  <p>  This method is called by the container itself  when its preference page changes and may be called  by the page at other times to force a button state  update.  </p> ',directive
' Adjusts the enable state of the OK   button to reflect the state of the currently active   page in this container.  ',non-directive
'<p>  This method is called by the container itself  when its preference page changes and may be called  by the page at other times to force a button state  update.  ',directive
'</p> ',non-directive
' Updates the message (or error message) shown in the message line to   reflect the state of the currently active page in this container.  <p>  This method is called by the container itself  when its preference page changes and may be called  by the page at other times to force a message   update.  </p> ',directive
' Updates the message (or error message) shown in the message line to   reflect the state of the currently active page in this container.  ',non-directive
'<p>  This method is called by the container itself  when its preference page changes and may be called  by the page at other times to force a message   update.  ',directive
'</p> ',non-directive
' Updates the title to reflect the state of the   currently active page in this container.  <p>  This method is called by the container itself  when its page changes and may be called  by the page at other times to force a title    update.  </p> ',directive
' Updates the title to reflect the state of the   currently active page in this container.  ',non-directive
'<p>  This method is called by the container itself  when its page changes and may be called  by the page at other times to force a title    update.  ',directive
'</p> ',non-directive
' The <code>_ClassElement_</code> is a wrapper for a button that displays a  selected <code>Color</code> and allows the user to change the selection. ',non-directive
' The <code>_ClassElement_</code> is a wrapper for a button that displays a  selected <code>Color</code> and allows the user to change the selection. ',non-directive
' Adds a property change listener to this <code>_ClassElement_</code>.  Events are fired when the color in the control changes via the user  clicking an selecting a new one in the color dialog. No event is fired in  the case where <code>_ClassElement_(RGB)</code> is invoked.    @param listener             a property change listener  @since _ClassPathElement_ ',directive
' Adds a property change listener to this <code>_ClassElement_</code>.  ',non-directive
'Events are fired when the color in the control changes via the user  clicking an selecting a new one in the color dialog. ',directive
'No event is fired in  the case where <code>_ClassElement_(RGB)</code> is invoked.   ',directive
?,non-directive
'@param listener             a property change listener  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Get the button control being wrappered by the selector.    @return <code>Button</code> ',non-directive
' Get the button control being wrappered by the selector.   ',non-directive
?,non-directive
'@return <code>Button</code> ',non-directive
' Return the currently displayed color.    @return <code>RGB</code> ',non-directive
' Return the currently displayed color.   ',non-directive
?,non-directive
'@return <code>RGB</code> ',non-directive
' Removes the given listener from this <code>_ClassElement_</code>. Has  no affect if the listener is not registered.    @param listener             a property change listener  @since _ClassPathElement_ ',non-directive
' Removes the given listener from this <code>_ClassElement_</code>. ',non-directive
'Has  no affect if the listener is not registered.   ',directive
?,non-directive
'@param listener             a property change listener  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Set the current color value and update the control.    @param rgb             The new color. ',non-directive
' Set the current color value and update the control.   ',non-directive
?,non-directive
'@param rgb             The new color. ',non-directive
' Set whether or not the button is enabled.    @param state             the enabled state. ',non-directive
' Set whether or not the button is enabled.   ',non-directive
?,non-directive
'@param state             the enabled state. ',non-directive
' Update the image being displayed on the button using the current color  setting. ',non-directive
' Update the image being displayed on the button using the current color  setting. ',non-directive
' Activate the editor for this selector. This causes the color selection  dialog to appear and wait for user input.    @since _ClassPathElement_ ',non-directive
' Activate the editor for this selector. ',non-directive
'This causes the color selection  dialog to appear and wait for user input.   ',directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Create a new instance of the reciever and the button that it wrappers in  the supplied parent <code>Composite</code>.    @param parent             The parent of the button. ',non-directive
' Create a new instance of the reciever and the button that it wrappers in  the supplied parent <code>Composite</code>.   ',non-directive
?,non-directive
'@param parent             The parent of the button. ',non-directive
' Property name that signifies the selected color of this  <code>_ClassElement_</code> has changed.    @since _ClassPathElement_ ',non-directive
' Property name that signifies the selected color of this  <code>_ClassElement_</code> has changed.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' A field editor for a boolean type preference. ',non-directive
' A field editor for a boolean type preference. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns the control responsible for displaying this field editor\'s label.  This method can be used to set a tooltip for a  <code>_ClassElement_</code>. Note that the normal pattern of  <code>_ClassElement_(parent)._ClassElement_(_ClassElement_)</code> does not  work for boolean field editors, as it can lead to duplicate text (see bug  259952).    @param parent             the parent composite  @return the control responsible for displaying the label    @since _ClassPathElement_ ',directive
' Returns the control responsible for displaying this field editor\'s label.  ',non-directive
'This method can be used to set a tooltip for a  <code>_ClassElement_</code>. ',directive
'Note that the normal pattern of  <code>_ClassElement_(parent)._ClassElement_(_ClassElement_)</code> does not  work for boolean field editors, as it can lead to duplicate text (see bug  259952).   ',directive
?,non-directive
'@param parent             the parent composite  ',non-directive
'@return the control responsible for displaying the label    ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns this field editor\'s current value.    @return the value ',non-directive
' Returns this field editor\'s current value.   ',non-directive
?,non-directive
'@return the value ',non-directive
' Returns the change button for this field editor.    @param parent             The Composite to create the receiver in.    @return the change button ',non-directive
' Returns the change button for this field editor.   ',non-directive
?,non-directive
'@param parent             The Composite to create the receiver in.   ',non-directive
?,non-directive
'@return the change button ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Informs this field editor\'s listener, if it has one, about a change to  the value (<code>VALUE</code> property) provided that the old and new  values are different.    @param _ClassElement_             the old value  @param _ClassElement_             the new value ',non-directive
' Informs this field editor\'s listener, if it has one, about a change to  the value (<code>VALUE</code> property) provided that the old and new  values are different.   ',non-directive
?,non-directive
'@param _ClassElement_             the old value  ',non-directive
'@param _ClassElement_             the new value ',non-directive
?,non-directive
?,non-directive
' Creates a new boolean field editor ',non-directive
' Creates a new boolean field editor ',non-directive
' Creates a boolean field editor in the given style.    @param name             the name of the preference this field editor works on  @param _ClassElement_             the label text of the field editor  @param style             the style, either <code>DEFAULT</code> or             <code>SEPARATE_LABEL</code>  @param parent             the parent of the field editor\'s control  @see #DEFAULT  @see #SEPARATE_LABEL ',non-directive
' Creates a boolean field editor in the given style.   ',non-directive
?,non-directive
'@param name             the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_             the label text of the field editor  ',non-directive
'@param style             the style, either <code>DEFAULT</code> or             <code>SEPARATE_LABEL</code>  ',directive
'@param parent             the parent of the field editor\'s control  ',non-directive
'@see #DEFAULT  ',non-directive
'@see #SEPARATE_LABEL ',non-directive
' Creates a boolean field editor in the default style.    @param name             the name of the preference this field editor works on  @param label             the label text of the field editor  @param parent             the parent of the field editor\'s control ',non-directive
' Creates a boolean field editor in the default style.   ',non-directive
?,non-directive
'@param name             the name of the preference this field editor works on  ',non-directive
'@param label             the label text of the field editor  ',non-directive
'@param parent             the parent of the field editor\'s control ',non-directive
' Style constant (value <code>0</code>) indicating the default layout where  the field editor\'s check box appears to the left of the label. ',non-directive
' Style constant (value <code>0</code>) indicating the default layout where  the field editor\'s check box appears to the left of the label. ',non-directive
' Style constant (value <code>1</code>) indicating a layout where the field  editor\'s label appears on the left with a check box on the right. ',non-directive
' Style constant (value <code>1</code>) indicating a layout where the field  editor\'s label appears on the left with a check box on the right. ',non-directive
?,non-directive
?,non-directive
' Creates a selection listener. ',non-directive
' Creates a selection listener. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns this field editor\'s button box containing the Add, Remove,  Up, and Down button.   @param parent the parent control  @return the button box ',non-directive
' Returns this field editor\'s button box containing the Add, Remove,  Up, and Down button.   ',non-directive
'@param parent the parent control  ',non-directive
'@return the button box ',non-directive
' Returns this field editor\'s list control.   @param parent the parent control  @return the list control ',non-directive
' Returns this field editor\'s list control.   ',non-directive
'@param parent the parent control  ',non-directive
'@return the list control ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Return the Add button.      @return the button  @since _ClassPathElement_ ',non-directive
' Return the Add button.     ',non-directive
?,non-directive
'@return the button  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Return the Remove button.      @return the button  @since _ClassPathElement_ ',non-directive
' Return the Remove button.     ',non-directive
?,non-directive
'@return the button  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Return the Up button.      @return the button  @since _ClassPathElement_ ',non-directive
' Return the Up button.     ',non-directive
?,non-directive
'@return the button  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Return the Down button.      @return the button  @since _ClassPathElement_ ',non-directive
' Return the Down button.     ',non-directive
?,non-directive
'@return the button  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Return the List.    @return the list  @since _ClassPathElement_ ',non-directive
' Return the List.   ',non-directive
?,non-directive
'@return the list  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a new list field editor  ',non-directive
' Creates a new list field editor  ',non-directive
' Creates a list field editor.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param parent the parent of the field editor\'s control ',non-directive
' Creates a list field editor.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param parent the parent of the field editor\'s control ',non-directive
' A field editor for an enumeration type preference.  The choices are presented as a list of radio buttons. ',non-directive
' A field editor for an enumeration type preference.  ',non-directive
'The choices are presented as a list of radio buttons. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns this field editor\'s radio group control.  @param parent The parent to create the _ClassElement_ in  @return the radio group control ',non-directive
' Returns this field editor\'s radio group control.  ',non-directive
'@param parent The parent to create the _ClassElement_ in  ',non-directive
'@return the radio group control ',non-directive
' Sets the indent used for the first column of the radion button matrix.   @param indent the indent (in pixels) ',non-directive
' Sets the indent used for the first column of the radion button matrix.   ',non-directive
'@param indent the indent (in pixels) ',non-directive
?,non-directive
?,non-directive
' Creates a new radio group field editor  ',non-directive
' Creates a new radio group field editor  ',non-directive
' Creates a radio group field editor.    This constructor does not use a <code>Group</code> to contain the radio buttons.  It is equivalent to using the following constructor with <code>false</code>  for the <code>_ClassElement_</code> argument.  <p>  Example usage:  <pre>   _ClassElement_ editor= new _ClassElement_(    \"_ClassPathElement_\", _ClassElement_, 1,    new String[][] {     {\"Open Browser\", \"open\"},     {\"Expand Tree\", \"expand\"}    },           parent);   </pre>  </p>    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param _ClassElement_ the number of columns for the radio button presentation  @param _ClassElement_ list of radio button [label, value] entries;   the value is returned when the radio button is selected  @param parent the parent of the field editor\'s control ',non-directive
' Creates a radio group field editor.    ',non-directive
'This constructor does not use a <code>Group</code> to contain the radio buttons.  ',directive
'It is equivalent to using the following constructor with <code>false</code>  for the <code>_ClassElement_</code> argument.  ',non-directive
'<p>  Example usage:  <pre>   _ClassElement_ editor= new _ClassElement_(    \"_ClassPathElement_\", _ClassElement_, 1,    new String[][] {     {\"Open Browser\", \"open\"},     {\"Expand Tree\", \"expand\"}    },           parent);   </pre>  </p>    ',non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param _ClassElement_ the number of columns for the radio button presentation  ',non-directive
'@param _ClassElement_ list of radio button [label, value] entries;   the value is returned when the radio button is selected  ',non-directive
'@param parent the parent of the field editor\'s control ',non-directive
' Creates a radio group field editor.  <p>  Example usage:  <pre>   _ClassElement_ editor= new _ClassElement_(    \"_ClassPathElement_\", _ClassElement_, 1,    new String[][] {     {\"Open Browser\", \"open\"},     {\"Expand Tree\", \"expand\"}    },           parent,           true);   </pre>  </p>    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param _ClassElement_ the number of columns for the radio button presentation  @param _ClassElement_ list of radio button [label, value] entries;   the value is returned when the radio button is selected  @param parent the parent of the field editor\'s control  @param _ClassElement_ whether to use a Group control to contain the radio buttons ',non-directive
' Creates a radio group field editor.  ',non-directive
'<p>  Example usage:  <pre>   _ClassElement_ editor= new _ClassElement_(    \"_ClassPathElement_\", _ClassElement_, 1,    new String[][] {     {\"Open Browser\", \"open\"},     {\"Expand Tree\", \"expand\"}    },           parent,           true);   </pre>  </p>    ',non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param _ClassElement_ the number of columns for the radio button presentation  ',non-directive
'@param _ClassElement_ list of radio button [label, value] entries;   the value is returned when the radio button is selected  ',non-directive
'@param parent the parent of the field editor\'s control  ',non-directive
'@param _ClassElement_ whether to use a Group control to contain the radio buttons ',non-directive
' Provides a tree model for <code>_ClassElement_</code> content.    @since _ClassPathElement_ ',non-directive
' Provides a tree model for <code>_ClassElement_</code> content.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Set the manager for the preferences.  @param manager The manager to set.    @since _ClassPathElement_ ',non-directive
' Set the manager for the preferences.  ',non-directive
'@param manager The manager to set.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' A field editor for a color type preference. ',non-directive
' A field editor for a color type preference. ',non-directive
?,non-directive
?,non-directive
' Computes the size of the color image displayed on the button.  <p>  This is an internal method and should not be called by clients.  </p>    @param window             the window to create a GC on for calculation.  @return Point The image size    ',directive
' Computes the size of the color image displayed on the button.  ',non-directive
'<p>  This is an internal method and should not be called by clients.  ',directive
'</p>    ',non-directive
'@param window             the window to create a GC on for calculation.  ',non-directive
'@return Point The image size    ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Get the color selector used by the receiver.    @return _OSPathElement_ ',non-directive
' Get the color selector used by the receiver.   ',non-directive
?,non-directive
'@return _OSPathElement_ ',non-directive
' Returns the change button for this field editor.    @param parent             The control to create the button in if required.  @return the change button ',directive
' Returns the change button for this field editor.   ',non-directive
?,non-directive
'@param parent             The control to create the button in if required.  ',non-directive
'@return the change button ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a new color field editor ',non-directive
' Creates a new color field editor ',non-directive
' Creates a color field editor.    @param name             the name of the preference this field editor works on  @param _ClassElement_             the label text of the field editor  @param parent             the parent of the field editor\'s control ',non-directive
' Creates a color field editor.   ',non-directive
?,non-directive
'@param name             the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_             the label text of the field editor  ',non-directive
'@param parent             the parent of the field editor\'s control ',non-directive
' The _ClassElement_ is an action that set the values of a   boolean property in the preference store. ',non-directive
' The _ClassElement_ is an action that set the values of a   boolean property in the preference store. ',non-directive
?,non-directive
?,non-directive
' Create a new instance of the receiver.  @param title The displayable name of the action.  @param _ClassElement_ The preference store to propogate changes to  @param property The property that is being updated  @throws _ClassElement_ Thrown if _ClassElement_ or  property are <code>null</code>. ',non-directive
' Create a new instance of the receiver.  ',non-directive
'@param title The displayable name of the action.  ',non-directive
'@param _ClassElement_ The preference store to propogate changes to  ',non-directive
'@param property The property that is being updated  ',non-directive
'@throws _ClassElement_ Thrown if _ClassElement_ or  property are <code>null</code>. ',directive
' A field editor for a combo box that allows the drop-down selection of one of  a list of items.    @since _ClassPathElement_ ',non-directive
' A field editor for a combo box that allows the drop-down selection of one of  a list of items.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Create the combo box field editor.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param _ClassElement_ the names (labels) and underlying values to populate the combo widget.  These should be  arranged as: { {name1, value1}, {name2, value2}, ...}  @param parent the parent composite ',directive
' Create the combo box field editor.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param _ClassElement_ the names (labels) and underlying values to populate the combo widget.  ',non-directive
'These should be  arranged as: { {name1, value1}, {name2, value2}, ...}  ',directive
'@param parent the parent composite ',non-directive
' An abstract field editor for a string type preference that presents  a string input field with a change button to its right to edit the  input field\'s content. When the user presses the change button, the  abstract framework method <code>_ClassElement_()</code> gets called  to compute a new string. ',directive
' An abstract field editor for a string type preference that presents  a string input field with a change button to its right to edit the  input field\'s content. ',non-directive
'When the user presses the change button, the  abstract framework method <code>_ClassElement_()</code> gets called  to compute a new string. ',directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Get the change control. Create it in parent if required.  @param parent  @return Button ',directive
' Get the change control. ',non-directive
'Create it in parent if required.  ',non-directive
'@param parent  ',non-directive
'@return Button ',non-directive
?,non-directive
?,non-directive
' Returns this field editor\'s shell.   @return the shell ',non-directive
' Returns this field editor\'s shell.   ',non-directive
'@return the shell ',non-directive
' Sets the text of the change button.   @param text the new text ',non-directive
' Sets the text of the change button.   ',non-directive
'@param text the new text ',non-directive
?,non-directive
?,non-directive
' Creates a new string button field editor  ',non-directive
' Creates a new string button field editor  ',non-directive
' Creates a string button field editor.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param parent the parent of the field editor\'s control ',non-directive
' Creates a string button field editor.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param parent the parent of the field editor\'s control ',non-directive
' Adds the given field editor to this page.   @param editor the field editor ',non-directive
' Adds the given field editor to this page.   ',non-directive
'@param editor the field editor ',non-directive
' Adjust the layout of the field editors so that  they are properly aligned. ',non-directive
' Adjust the layout of the field editors so that  they are properly aligned. ',non-directive
' Applys the font to the field editors managed by this page. ',non-directive
' Applys the font to the field editors managed by this page. ',non-directive
' Recomputes the page\'s error state by calling <code>_ClassElement_</code> for  every field editor. ',directive
' Recomputes the page\'s error state by calling <code>_ClassElement_</code> for  every field editor. ',non-directive
?,non-directive
?,non-directive
' Returns a parent composite for a field editor.  <p>  This value must not be cached since a new parent  may be created each time this method called. Thus  this method must be called each time a field editor  is constructed.  </p>   @return a parent ',directive
' Returns a parent composite for a field editor.  ',non-directive
'<p>  This value must not be cached since a new parent  may be created each time this method called. ',directive
'Thus  this method must be called each time a field editor  is constructed.  ',directive
'</p>   ',non-directive
'@return a parent ',non-directive
' Initializes all field editors. ',non-directive
' Initializes all field editors. ',non-directive
'  The field editor preference page implementation of a <code>_ClassElement_</code>  method loads all the field editors with their default values. ',non-directive
'  The field editor preference page implementation of a <code>_ClassElement_</code>  method loads all the field editors with their default values. ',non-directive
'  The field editor preference page implementation of this   <code>_ClassElement_</code> method saves all field editors by  calling <code>_ClassPathElement_</code>. Note that this method  does not save the preference store itself; it just stores the  values back into the preference store.   @see _ClassElement_#store() ',directive
'  The field editor preference page implementation of this   <code>_ClassElement_</code> method saves all field editors by  calling <code>_ClassPathElement_</code>. ',directive
'Note that this method  does not save the preference store itself; it just stores the  values back into the preference store.   ',directive
'@see _ClassElement_#store() ',non-directive
' The field editor preference page implementation of this <code>IPreferencePage</code>  (and <code>IPropertyChangeListener</code>) method intercepts <code>IS_VALID</code>   events but passes other events on to its superclass. ',directive
' The field editor preference page implementation of this <code>IPreferencePage</code>  (and <code>IPropertyChangeListener</code>) method intercepts <code>IS_VALID</code>   events but passes other events on to its superclass. ',directive
?,non-directive
?,non-directive
' Create a new instance of the reciever. ',non-directive
' Create a new instance of the reciever. ',non-directive
' Creates a new field editor preference page with the given style,  an empty title, and no image.   @param style either <code>GRID</code> or <code>FLAT</code> ',non-directive
' Creates a new field editor preference page with the given style,  an empty title, and no image.   ',non-directive
'@param style either <code>GRID</code> or <code>FLAT</code> ',non-directive
' Creates a new field editor preference page with the given title   and style, but no image.   @param title the title of this preference page  @param style either <code>GRID</code> or <code>FLAT</code> ',non-directive
' Creates a new field editor preference page with the given title   and style, but no image.   ',non-directive
'@param title the title of this preference page  ',non-directive
'@param style either <code>GRID</code> or <code>FLAT</code> ',non-directive
' Creates a new field editor preference page with the given title,  image, and style.   @param title the title of this preference page  @param image the image for this preference page, or     <code>null</code> if none  @param style either <code>GRID</code> or <code>FLAT</code> ',non-directive
' Creates a new field editor preference page with the given title,  image, and style.   ',non-directive
'@param title the title of this preference page  ',non-directive
'@param image the image for this preference page, or     <code>null</code> if none  ',directive
'@param style either <code>GRID</code> or <code>FLAT</code> ',non-directive
' Layout constant (value <code>0</code>) indicating that  each field editor is handled as a single component. ',non-directive
' Layout constant (value <code>0</code>) indicating that  each field editor is handled as a single component. ',non-directive
' Layout constant (value <code>1</code>) indicating that  the field editors\' basic controls are put into a grid layout. ',non-directive
' Layout constant (value <code>1</code>) indicating that  the field editors\' basic controls are put into a grid layout. ',non-directive
'  The vertical spacing used by layout styles <code>FLAT</code>   and <code>GRID</code>. ',non-directive
'  The vertical spacing used by layout styles <code>FLAT</code>   and <code>GRID</code>. ',non-directive
'  The margin width used by layout styles <code>FLAT</code>   and <code>GRID</code>. ',non-directive
'  The margin width used by layout styles <code>FLAT</code>   and <code>GRID</code>. ',non-directive
'  The margin height used by layout styles <code>FLAT</code>   and <code>GRID</code>. ',non-directive
'  The margin height used by layout styles <code>FLAT</code>   and <code>GRID</code>. ',non-directive
' A preference dialog is a hierarchical presentation of preference pages. Each  page is represented by a node in the tree shown on the left hand side of the  dialog; when a node is selected, the corresponding page is shown on the right  hand side. ',non-directive
' A preference dialog is a hierarchical presentation of preference pages. ',non-directive
'Each  page is represented by a node in the tree shown on the left hand side of the  dialog; when a node is selected, the corresponding page is shown on the right  hand side. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates the inner page container.    @param parent  @return Composite ',non-directive
' Creates the inner page container.   ',non-directive
?,non-directive
'@param parent  ',non-directive
'@return Composite ',non-directive
' Return the layout for the composite that contains  the pages.  @return _ClassElement_    @since _ClassPathElement_ ',non-directive
' Return the layout for the composite that contains  the pages.  ',non-directive
'@return _ClassElement_    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Creates the wizard\'s title area.    @param parent             the SWT parent for the title area composite.  @return the created title area composite. ',non-directive
' Creates the wizard\'s title area.   ',non-directive
?,non-directive
'@param parent             the SWT parent for the title area composite.  ',non-directive
'@return the created title area composite. ',non-directive
' @param parent             the SWT parent for the tree area controls.  @return the new <code>Control</code>.  @since _ClassPathElement_ ',non-directive
?,non-directive
'@param parent             the SWT parent for the tree area controls.  ',non-directive
'@return the new <code>Control</code>.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Create a new <code>_ClassElement_</code>.    @param parent             the parent <code>Composite</code>.  @return the <code>_ClassElement_</code>.  @since _ClassPathElement_ ',non-directive
' Create a new <code>_ClassElement_</code>.   ',non-directive
?,non-directive
'@param parent             the parent <code>Composite</code>.  ',non-directive
'@return the <code>_ClassElement_</code>.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Add the listeners to the tree viewer.  @param viewer    @since _ClassPathElement_ ',non-directive
' Add the listeners to the tree viewer.  ',non-directive
'@param viewer    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Find the <code>IPreferenceNode</code> that has data the same id as the  supplied value.    @param _ClassElement_             the id to search for.  @return <code>IPreferenceNode</code> or <code>null</code> if not          found. ',non-directive
' Find the <code>IPreferenceNode</code> that has data the same id as the  supplied value.   ',non-directive
?,non-directive
'@param _ClassElement_             the id to search for.  ',non-directive
'@return <code>IPreferenceNode</code> or <code>null</code> if not          found. ',directive
' Get the last known right side width.    @return the width. ',non-directive
' Get the last known right side width.   ',non-directive
?,non-directive
'@return the width. ',non-directive
' Returns the preference mananger used by this preference dialog.    @return the preference mananger ',non-directive
' Returns the preference mananger used by this preference dialog.   ',non-directive
?,non-directive
'@return the preference mananger ',non-directive
?,non-directive
?,non-directive
' Get the name of the selected item preference    @return String ',non-directive
' Get the name of the selected item preference    ',non-directive
'@return String ',non-directive
' @param selection             the <code>ISelection</code> to examine.  @return the first element, or null if empty. ',non-directive
?,non-directive
'@param selection             the <code>ISelection</code> to examine.  ',non-directive
'@return the first element, or null if empty. ',directive
' @return the <code>_ClassElement_</code> for this dialog.  @since _ClassPathElement_ ',non-directive
?,non-directive
'@return the <code>_ClassElement_</code> for this dialog.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Notifies of the pressing of the Help button.  <p>  The default implementation of this framework method calls  <code>_ClassElement_</code> on the currently active page.  </p> ',directive
' Notifies of the pressing of the Help button.  ',non-directive
'<p>  The default implementation of this framework method calls  <code>_ClassElement_</code> on the currently active page.  ',directive
'</p> ',non-directive
' Returns whether the current page is valid.    @return <code>false</code> if the current page is not valid, or or          <code>true</code> if the current page is valid or there is no          current page ',non-directive
' Returns whether the current page is valid.   ',non-directive
?,non-directive
'@return <code>false</code> if the current page is not valid, or or          <code>true</code> if the current page is valid or there is no          current page ',non-directive
' @param control             the <code>Control</code> to lay out.  @since _ClassPathElement_ ',non-directive
?,non-directive
'@param control             the <code>Control</code> to lay out.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' The preference dialog implementation of this <code>Dialog</code>  framework method sends <code>_ClassElement_</code> to all pages of the  preference dialog, then calls <code>_ClassElement_</code> on this dialog to  save any state, and then calls <code>close</code> to close this dialog. ',directive
' The preference dialog implementation of this <code>Dialog</code>  framework method sends <code>_ClassElement_</code> to all pages of the  preference dialog, then calls <code>_ClassElement_</code> on this dialog to  save any state, and then calls <code>close</code> to close this dialog. ',directive
' Selects the saved item in the tree of preference pages. If it cannot do  this it saves the first one. ',non-directive
' Selects the saved item in the tree of preference pages. ',non-directive
'If it cannot do  this it saves the first one. ',directive
' Display the given error message. The currently displayed message is saved  and will be redisplayed when the error message is set to  <code>null</code>.    @param _ClassElement_             the _ClassElement_ to display or <code>null</code> ',directive
' Display the given error message. ',non-directive
'The currently displayed message is saved  and will be redisplayed when the error message is set to  <code>null</code>.   ',directive
?,non-directive
'@param _ClassElement_             the _ClassElement_ to display or <code>null</code> ',directive
' Set the message text. If the message line currently displays an error,  the message is stored and will be shown after a call to _ClassElement_  <p>  Shortcut for <code>_ClassElement_(_ClassElement_, NONE)</code>  </p>    @param _ClassElement_             the message, or <code>null</code> to clear the message ',directive
' Set the message text. ',non-directive
'If the message line currently displays an error,  the message is stored and will be shown after a call to _ClassElement_  <p>  Shortcut for <code>_ClassElement_(_ClassElement_, NONE)</code>  </p>    ',directive
'@param _ClassElement_             the message, or <code>null</code> to clear the message ',directive
' Sets the minimum page size.    @param _ClassElement_             the minimum page width  @param _ClassElement_             the minimum page height  @see #_ClassElement_(Point) ',non-directive
' Sets the minimum page size.   ',non-directive
?,non-directive
'@param _ClassElement_             the minimum page width  ',non-directive
'@param _ClassElement_             the minimum page height  ',non-directive
'@see #_ClassElement_(Point) ',non-directive
' Sets the minimum page size.    @param size             the page size encoded as <code>new Point(width,height)</code>  @see #_ClassElement_(int,int) ',non-directive
' Sets the minimum page size.   ',non-directive
?,non-directive
'@param size             the page size encoded as <code>new Point(width,height)</code>  ',non-directive
'@see #_ClassElement_(int,int) ',non-directive
' Sets the preference store for this preference dialog.    @param store             the preference store  @see #_ClassElement_ ',non-directive
' Sets the preference store for this preference dialog.   ',non-directive
?,non-directive
'@param store             the preference store  ',non-directive
'@see #_ClassElement_ ',non-directive
' Sets the name of the selected item preference. Public equivalent to  <code>_ClassElement_</code>.    @param _ClassElement_             The identifier for the page  @since _ClassPathElement_ ',non-directive
' Sets the name of the selected item preference. ',non-directive
'Public equivalent to  <code>_ClassElement_</code>.   ',directive
?,non-directive
'@param _ClassElement_             The identifier for the page  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Sets the name of the selected item preference.    @param _ClassElement_             The identifier for the page ',non-directive
' Sets the name of the selected item preference.   ',non-directive
?,non-directive
'@param _ClassElement_             The identifier for the page ',non-directive
' Shows the preference page corresponding to the given preference node.  Does nothing if that page is already current.    @param node             the preference node, or <code>null</code> if none  @return <code>true</code> if the page flip was successful, and          <code>false</code> is unsuccessful ',non-directive
' Shows the preference page corresponding to the given preference node.  ',non-directive
'Does nothing if that page is already current.   ',directive
?,non-directive
'@param node             the preference node, or <code>null</code> if none  ',directive
'@return <code>true</code> if the page flip was successful, and          <code>false</code> is unsuccessful ',non-directive
' Create the page for the node.  @param node    @since _ClassPathElement_ ',non-directive
' Create the page for the node.  ',non-directive
'@param node    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Get the page for the node.  @param node  @return IPreferencePage    @since _ClassPathElement_ ',non-directive
' Get the page for the node.  ',non-directive
'@param node  ',non-directive
'@return IPreferencePage    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Updates this dialog\'s controls to reflect the current page. ',non-directive
' Updates this dialog\'s controls to reflect the current page. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Update the tree to use the specified <code>Font</code>.    @param _ClassElement_             the <code>Font</code> to use.  @since _ClassPathElement_ ',non-directive
' Update the tree to use the specified <code>Font</code>.   ',non-directive
?,non-directive
'@param _ClassElement_             the <code>Font</code> to use.  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the _ClassElement_.  @return IPreferencePage  @since _ClassPathElement_ ',non-directive
' Returns the _ClassElement_.  ',non-directive
'@return IPreferencePage  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Sets the current page.  @param _ClassElement_    @since _ClassPathElement_ ',non-directive
' Sets the current page.  ',non-directive
'@param _ClassElement_    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Set the _ClassElement_.  @param _ClassElement_    @since _ClassPathElement_ ',non-directive
' Set the _ClassElement_.  ',non-directive
'@param _ClassElement_    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Get the composite that is showing the page.   @return Composite.    @since _ClassPathElement_ ',non-directive
' Get the composite that is showing the page.   ',non-directive
'@return Composite.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Set the composite that is showing the page.  @param _ClassElement_ Composite    @since _ClassPathElement_ ',non-directive
' Set the composite that is showing the page.  ',non-directive
'@param _ClassElement_ Composite    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Create the page control for the supplied page.    @param page - the preference page to be shown  @param parent - the composite to parent the page    @since _ClassPathElement_ ',non-directive
' Create the page control for the supplied page.   ',non-directive
?,non-directive
'@param page - the preference page to be shown  ',non-directive
'@param parent - the composite to parent the page    ',non-directive
'@since _ClassPathElement_ ',non-directive
' @see _ClassPathElement_#_ClassElement_()    @since _ClassPathElement_ ',non-directive
?,non-directive
'@see _ClassPathElement_#_ClassElement_()    ',non-directive
'@since _ClassPathElement_ ',non-directive
' @see _ClassPathElement_#_ClassElement_(_ClassPathElement_)  @since _ClassPathElement_ ',non-directive
?,non-directive
'@see _ClassPathElement_#_ClassElement_(_ClassPathElement_)  ',non-directive
'@since _ClassPathElement_ ',non-directive
' @see _ClassPathElement_#_ClassElement_(_ClassPathElement_)  @since _ClassPathElement_ ',non-directive
?,non-directive
'@see _ClassPathElement_#_ClassElement_(_ClassPathElement_)  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Notifies any selection changed listeners that the selected page  has changed.  Only listeners registered at the time this method is called are notified.   @param event a selection changed event   @see IPageChangedListener#_ClassElement_    @since _ClassPathElement_ ',directive
' Notifies any selection changed listeners that the selected page  has changed.  ',non-directive
'Only listeners registered at the time this method is called are notified.   ',directive
'@param event a selection changed event   ',non-directive
'@see IPageChangedListener#_ClassElement_    ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' Creates a new preference dialog under the control of the given preference  manager.    @param _ClassElement_             the parent shell  @param manager             the preference manager ',non-directive
' Creates a new preference dialog under the control of the given preference  manager.   ',non-directive
?,non-directive
'@param _ClassElement_             the parent shell  ',non-directive
'@param manager             the preference manager ',non-directive
' Indentifier for the error image ',directive
' Indentifier for the error image ',non-directive
' Title area fields ',non-directive
' Title area fields ',non-directive
' Return code used when dialog failed ',non-directive
' Return code used when dialog failed ',non-directive
' A field editor for a font type preference. ',non-directive
' A field editor for a font type preference. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns the change button for this field editor.   @param parent The Composite to create the button in if required.  @return the change button ',directive
' Returns the change button for this field editor.   ',non-directive
'@param parent The Composite to create the button in if required.  ',non-directive
'@return the change button ',non-directive
?,non-directive
?,non-directive
' Returns the preferred preview height.    @return the height, or <code>-1</code> if no previewer   is installed ',non-directive
' Returns the preferred preview height.    ',non-directive
'@return the height, or <code>-1</code> if no previewer   is installed ',directive
' Returns the preview control for this field editor.   @return the preview control ',non-directive
' Returns the preview control for this field editor.   ',non-directive
'@return the preview control ',non-directive
' Returns the value control for this field editor. The value control  displays the currently selected font name.  @param parent The Composite to create the viewer in if required  @return the value control ',directive
' Returns the value control for this field editor. ',non-directive
'The value control  displays the currently selected font name.  ',non-directive
'@param parent The Composite to create the viewer in if required  ',non-directive
'@return the value control ',non-directive
' Sets the text of the change button.   @param text the new text ',non-directive
' Sets the text of the change button.   ',non-directive
'@param text the new text ',non-directive
' Store the default preference for the field  being edited ',non-directive
' Store the default preference for the field  being edited ',non-directive
?,non-directive
?,non-directive
' Creates a new font field editor  ',non-directive
' Creates a new font field editor  ',non-directive
' Creates a font field editor with an optional preview area.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param _ClassElement_ the text used for the preview window. If it is  <code>null</code> there will be no preview area,  @param parent the parent of the field editor\'s control ',non-directive
' Creates a font field editor with an optional preview area.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param _ClassElement_ the text used for the preview window. ',non-directive
'If it is  <code>null</code> there will be no preview area,  ',directive
'@param parent the parent of the field editor\'s control ',non-directive
' Creates a font field editor without a preview.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param parent the parent of the field editor\'s control ',non-directive
' Creates a font field editor without a preview.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param parent the parent of the field editor\'s control ',non-directive
' An interface for a preference page. This interface  is used primarily by the page\'s container  ',non-directive
' An interface for a preference page. ',non-directive
'This interface  is used primarily by the page\'s container  ',directive
' Computes a size for this page\'s UI component.    @return the size of the preference page encoded as    <code>new Point(width,height)</code>, or     <code>(0,0)</code> if the page doesn\'t currently have any UI component ',non-directive
' Computes a size for this page\'s UI component.    ',non-directive
'@return the size of the preference page encoded as    <code>new Point(width,height)</code>, or     <code>(0,0)</code> if the page doesn\'t currently have any UI component ',directive
' Returns whether this dialog page is in a valid state.    @return <code>true</code> if the page is in a valid state,    and <code>false</code> if invalid ',non-directive
' Returns whether this dialog page is in a valid state.   ',non-directive
?,non-directive
'@return <code>true</code> if the page is in a valid state,    and <code>false</code> if invalid ',non-directive
' Checks whether it is alright to leave this page.    @return <code>false</code> to abort page flipping and the   have the current page remain visible, and <code>true</code>   to allow the page flip ',non-directive
' Checks whether it is alright to leave this page.   ',non-directive
?,non-directive
'@return <code>false</code> to abort page flipping and the   have the current page remain visible, and <code>true</code>   to allow the page flip ',non-directive
' Notifies that the container of this preference page has been canceled.    @return <code>false</code> to abort the container\'s cancel    procedure and <code>true</code> to allow the cancel to happen ',non-directive
' Notifies that the container of this preference page has been canceled.   ',non-directive
?,non-directive
'@return <code>false</code> to abort the container\'s cancel    procedure and <code>true</code> to allow the cancel to happen ',non-directive
' Notifies that the OK button of this page\'s container has been pressed.    @return <code>false</code> to abort the container\'s OK   processing and <code>true</code> to allow the OK to happen ',non-directive
' Notifies that the OK button of this page\'s container has been pressed.   ',non-directive
?,non-directive
'@return <code>false</code> to abort the container\'s OK   processing and <code>true</code> to allow the OK to happen ',non-directive
' Sets or clears the container of this page.   @param _ClassElement_ the preference page container, or <code>null</code>  ',non-directive
' Sets or clears the container of this page.   ',non-directive
'@param _ClassElement_ the preference page container, or <code>null</code>  ',directive
' Sets the size of this page\'s UI component.   @param size the size of the preference page encoded as    <code>new Point(width,height)</code> ',non-directive
' Sets the size of this page\'s UI component.   ',non-directive
'@param size the size of the preference page encoded as    <code>new Point(width,height)</code> ',non-directive
' Adds the given preference node as a subnode of this  preference node.   @param node the node to add ',non-directive
' Adds the given preference node as a subnode of this  preference node.   ',non-directive
'@param node the node to add ',non-directive
' Creates the preference page for this node. ',non-directive
' Creates the preference page for this node. ',non-directive
' Release the page managed by this node, and any SWT resources  held onto by this node (Images, Fonts, etc).     Note that nodes are reused so this is not a call to dispose the  node itself. ',directive
' Release the page managed by this node, and any SWT resources  held onto by this node (Images, Fonts, etc).     ',non-directive
'Note that nodes are reused so this is not a call to dispose the  node itself. ',directive
' Returns the subnode of this contribution node with the given node id.   @param id the preference node id  @return the subnode, or <code>null</code> if none ',non-directive
' Returns the subnode of this contribution node with the given node id.   ',non-directive
'@param id the preference node id  ',non-directive
'@return the subnode, or <code>null</code> if none ',directive
' Returns the id of this contribution node.  This id identifies a contribution node relative to its parent.   @return the node id ',non-directive
' Returns the id of this contribution node.  ',non-directive
'This id identifies a contribution node relative to its parent.   ',directive
'@return the node id ',non-directive
' Returns the image used to present this node in a preference dialog.   @return the image for this node, or <code>null</code>    if there is no image for this node ',non-directive
' Returns the image used to present this node in a preference dialog.   ',non-directive
'@return the image for this node, or <code>null</code>    if there is no image for this node ',directive
' Returns the text label used to present this node in a preference dialog.   @return the text label for this node, or <code>null</code>    if there is no label for this node ',non-directive
' Returns the text label used to present this node in a preference dialog.   ',non-directive
'@return the text label for this node, or <code>null</code>    if there is no label for this node ',directive
' Returns the preference page for this node.   @return the preference page ',non-directive
' Returns the preference page for this node.   ',non-directive
'@return the preference page ',non-directive
' Returns an iterator over the subnodes (immediate children)  of this contribution node.   @return an IPreferenceNode array containing the child nodes ',non-directive
' Returns an iterator over the subnodes (immediate children)  of this contribution node.   ',non-directive
'@return an IPreferenceNode array containing the child nodes ',non-directive
' Removes the subnode of this preference node with the given node id.   @param id the subnode id  @return the removed subnode, or <code>null</code> if none ',non-directive
' Removes the subnode of this preference node with the given node id.   ',non-directive
'@param id the subnode id  ',non-directive
'@return the removed subnode, or <code>null</code> if none ',directive
' Removes the given preference node from the list of subnodes  (immediate children) of this node.   @param node the node to remove  @return <code>true</code> if the node was removed,   and <code>false</code> otherwise ',non-directive
' Removes the given preference node from the list of subnodes  (immediate children) of this node.   ',non-directive
'@param node the node to remove  ',non-directive
'@return <code>true</code> if the node was removed,   and <code>false</code> otherwise ',non-directive
' Computes the size for this page\'s UI control.  <p>  The default implementation of this <code>IPreferencePage</code>  method returns the size set by <code>_ClassElement_</code>; if no size  has been set, but the page has a UI control, the framework  method <code>_ClassElement_</code> is called to compute the size.  </p>   @return the size of the preference page encoded as    <code>new Point(width,height)</code>, or     <code>(0,0)</code> if the page doesn\'t currently have any UI component ',directive
' Computes the size for this page\'s UI control.  ',non-directive
'<p>  The default implementation of this <code>IPreferencePage</code>  method returns the size set by <code>_ClassElement_</code>; if no size  has been set, but the page has a UI control, the framework  method <code>_ClassElement_</code> is called to compute the size.  ',directive
'</p>   ',non-directive
'@return the size of the preference page encoded as    <code>new Point(width,height)</code>, or     <code>(0,0)</code> if the page doesn\'t currently have any UI component ',directive
' Creates and returns an SWT label under the given composite.   @param parent the parent composite  @return the new label ',non-directive
' Creates and returns an SWT label under the given composite.   ',non-directive
'@param parent the parent composite  ',non-directive
'@return the new label ',non-directive
' Returns the container of this page.   @return the preference page container, or <code>null</code> if this    page has yet to be added to a container ',non-directive
' Returns the container of this page.   ',non-directive
'@return the preference page container, or <code>null</code> if this    page has yet to be added to a container ',directive
' Returns the preference store of this preference page.   @return the preference store , or <code>null</code> if none ',non-directive
' Returns the preference store of this preference page.   ',non-directive
'@return the preference store , or <code>null</code> if none ',directive
'  The preference page implementation of an <code>IPreferencePage</code>  method returns whether this preference page is valid. Preference  pages are considered valid by default; call <code>_ClassElement_(false)</code>  to make a page invalid.  @see IPreferencePage#_ClassElement_() ',directive
'  The preference page implementation of an <code>IPreferencePage</code>  method returns whether this preference page is valid. ',non-directive
'Preference  pages are considered valid by default; call <code>_ClassElement_(false)</code>  to make a page invalid.  ',directive
'@see IPreferencePage#_ClassElement_() ',non-directive
' The <code>_ClassElement_</code> implementation of this   <code>IPreferencePage</code> method returns <code>true</code>  if the page is valid.  @see IPreferencePage#okToLeave() ',non-directive
' The <code>_ClassElement_</code> implementation of this   <code>IPreferencePage</code> method returns <code>true</code>  if the page is valid.  ',non-directive
'@see IPreferencePage#okToLeave() ',non-directive
' Performs special processing when this page\'s Apply button has been pressed.  <p>  This is a framework hook method for sublcasses to do special things when  the Apply button has been pressed.  The default implementation of this framework method simply calls  <code>_ClassElement_</code> to simulate the pressing of the page\'s OK button.  </p>    @see #_ClassElement_ ',directive
' Performs special processing when this page\'s Apply button has been pressed.  ',non-directive
'<p>  This is a framework hook method for sublcasses to do special things when  the Apply button has been pressed.  ',directive
'The default implementation of this framework method simply calls  <code>_ClassElement_</code> to simulate the pressing of the page\'s OK button.  ',directive
'</p>    ',non-directive
'@see #_ClassElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Sets whether this page is valid.  The enable state of the container buttons and the  apply button is updated when a page\'s valid state   changes.  <p>   @param b the new valid state ',non-directive
' Sets whether this page is valid.  ',non-directive
'The enable state of the container buttons and the  apply button is updated when a page\'s valid state   changes.  ',directive
'<p>   ',non-directive
'@param b the new valid state ',non-directive
?,non-directive
?,non-directive
' Updates the enabled state of the Apply button to reflect whether   this page is valid. ',non-directive
' Updates the enabled state of the Apply button to reflect whether   this page is valid. ',non-directive
' Creates a composite with a highlighted Note entry and a message text.  This is designed to take up the full width of the page.    @param font the font to use  @param composite the parent composite  @param title the title of the note  @param message the message for the note  @return the composite for the note ',directive
' Creates a composite with a highlighted Note entry and a message text.  ',non-directive
'This is designed to take up the full width of the page.   ',directive
?,non-directive
'@param font the font to use  ',non-directive
'@param composite the parent composite  ',non-directive
'@param title the title of the note  ',non-directive
'@param message the message for the note  ',non-directive
'@return the composite for the note ',non-directive
' Returns the Apply button.    @return the Apply button ',non-directive
' Returns the Apply button.   ',non-directive
?,non-directive
'@return the Apply button ',non-directive
' Returns the Restore Defaults button.    @return the Restore Defaults button ',non-directive
' Returns the Restore Defaults button.   ',non-directive
?,non-directive
'@return the Restore Defaults button ',non-directive
?,non-directive
?,non-directive
' Apply the data to the receiver. By default do nothing.  @param data  @since _ClassPathElement_ ',non-directive
' Apply the data to the receiver. ',non-directive
'By default do nothing.  ',directive
'@param data  ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a new preference page with an empty title and no image. ',non-directive
' Creates a new preference page with an empty title and no image. ',non-directive
' Creates a new preference page with the given title and no image.   @param title the title of this preference page ',non-directive
' Creates a new preference page with the given title and no image.   ',non-directive
'@param title the title of this preference page ',non-directive
' Creates a new abstract preference page with the given title and image.   @param title the title of this preference page  @param image the image for this preference page,   or <code>null</code> if none ',non-directive
' Creates a new abstract preference page with the given title and image.   ',non-directive
'@param title the title of this preference page  ',non-directive
'@param image the image for this preference page,   or <code>null</code> if none ',directive
' A field editor for an integer type preference. ',non-directive
' A field editor for an integer type preference. ',non-directive
' Sets the range of valid values for this field.    @param min the minimum allowed value (inclusive)  @param max the maximum allowed value (inclusive) ',non-directive
' Sets the range of valid values for this field.   ',non-directive
?,non-directive
'@param min the minimum allowed value (inclusive)  ',non-directive
'@param max the maximum allowed value (inclusive) ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns this field editor\'s current value as an integer.   @return the value  @exception _ClassElement_ if the <code>String</code> does not    contain a parsable integer ',non-directive
' Returns this field editor\'s current value as an integer.   ',non-directive
'@return the value  ',non-directive
'@exception _ClassElement_ if the <code>String</code> does not    contain a parsable integer ',directive
' Creates a new integer field editor  ',non-directive
' Creates a new integer field editor  ',non-directive
' Creates an integer field editor.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param parent the parent of the field editor\'s control ',non-directive
' Creates an integer field editor.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param parent the parent of the field editor\'s control ',non-directive
' Creates an integer field editor.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param parent the parent of the field editor\'s control  @param _ClassElement_ the maximum number of characters in the text. ',non-directive
' Creates an integer field editor.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param parent the parent of the field editor\'s control  ',non-directive
'@param _ClassElement_ the maximum number of characters in the text. ',non-directive
?,non-directive
?,non-directive
' Checks whether the text input field contains a valid value or not.   @return <code>true</code> if the field value is valid,    and <code>false</code> if invalid ',non-directive
' Checks whether the text input field contains a valid value or not.   ',non-directive
'@return <code>true</code> if the field value is valid,    and <code>false</code> if invalid ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns the error message that will be displayed when and if   an error occurs.   @return the error message, or <code>null</code> if none ',directive
' Returns the error message that will be displayed when and if   an error occurs.   ',non-directive
'@return the error message, or <code>null</code> if none ',directive
?,non-directive
?,non-directive
' Returns the field editor\'s value.   @return the current value ',non-directive
' Returns the field editor\'s value.   ',non-directive
'@return the current value ',non-directive
' Returns this field editor\'s text control.   @return the text control, or <code>null</code> if no  text field is created yet ',non-directive
' Returns this field editor\'s text control.   ',non-directive
'@return the text control, or <code>null</code> if no  text field is created yet ',directive
' Returns this field editor\'s text control.  <p>  The control is created if it does not yet exist  </p>   @param parent the parent  @return the text control ',non-directive
' Returns this field editor\'s text control.  ',non-directive
'<p>  The control is created if it does not yet exist  </p>   ',directive
'@param parent the parent  ',non-directive
'@return the text control ',non-directive
' Returns whether an empty string is a valid value.   @return <code>true</code> if an empty string is a valid value, and   <code>false</code> if an empty string is invalid  @see #_ClassElement_ ',non-directive
' Returns whether an empty string is a valid value.   ',non-directive
'@return <code>true</code> if an empty string is a valid value, and   <code>false</code> if an empty string is invalid  ',non-directive
'@see #_ClassElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Sets whether the empty string is a valid value or not.   @param b <code>true</code> if the empty string is allowed,   and <code>false</code> if it is considered invalid ',non-directive
' Sets whether the empty string is a valid value or not.   ',non-directive
'@param b <code>true</code> if the empty string is allowed,   and <code>false</code> if it is considered invalid ',non-directive
' Sets the error message that will be displayed when and if   an error occurs.   @param message the error message ',directive
' Sets the error message that will be displayed when and if   an error occurs.   ',non-directive
'@param message the error message ',non-directive
?,non-directive
?,non-directive
' Sets this field editor\'s value.   @param value the new value, or <code>null</code> meaning the empty string ',non-directive
' Sets this field editor\'s value.   ',non-directive
'@param value the new value, or <code>null</code> meaning the empty string ',directive
' Sets this text field\'s text limit.   @param limit the limit on the number of character in the text   input field, or <code>UNLIMITED</code> for no limit  ',non-directive
' Sets this text field\'s text limit.   ',non-directive
'@param limit the limit on the number of character in the text   input field, or <code>UNLIMITED</code> for no limit  ',directive
' Shows the error message set via <code>_ClassElement_</code>. ',directive
' Shows the error message set via <code>_ClassElement_</code>. ',non-directive
' Informs this field editor\'s listener, if it has one, about a change  to the value (<code>VALUE</code> property) provided that the old and  new values are different.  <p>  This hook is <em>not</em> called when the text is initialized   (or reset to the default value) from the preference store.  </p> ',directive
' Informs this field editor\'s listener, if it has one, about a change  to the value (<code>VALUE</code> property) provided that the old and  new values are different.  ',non-directive
'<p>  This hook is <em>not</em> called when the text is initialized   (or reset to the default value) from the preference store.  ',directive
'</p> ',non-directive
?,non-directive
?,non-directive
' Creates a new string field editor  ',non-directive
' Creates a new string field editor  ',non-directive
' Creates a string field editor.  Use the method <code>_ClassElement_</code> to limit the text.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param width the width of the text input field in characters,   or <code>UNLIMITED</code> for no limit  @param strategy either <code>VALIDATE_ON_KEY_STROKE</code> to perform   on the fly checking (the default), or <code>VALIDATE_ON_FOCUS_LOST</code> to   perform validation only after the text has been typed in  @param parent the parent of the field editor\'s control  @since _ClassPathElement_ ',directive
' Creates a string field editor.  ',non-directive
'Use the method <code>_ClassElement_</code> to limit the text.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param width the width of the text input field in characters,   or <code>UNLIMITED</code> for no limit  ',directive
'@param strategy either <code>VALIDATE_ON_KEY_STROKE</code> to perform   on the fly checking (the default), or <code>VALIDATE_ON_FOCUS_LOST</code> to   perform validation only after the text has been typed in  ',directive
'@param parent the parent of the field editor\'s control  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a string field editor.  Use the method <code>_ClassElement_</code> to limit the text.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param width the width of the text input field in characters,   or <code>UNLIMITED</code> for no limit  @param parent the parent of the field editor\'s control ',non-directive
' Creates a string field editor.  ',non-directive
'Use the method <code>_ClassElement_</code> to limit the text.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param width the width of the text input field in characters,   or <code>UNLIMITED</code> for no limit  ',directive
'@param parent the parent of the field editor\'s control ',non-directive
' Creates a string field editor of unlimited width.  Use the method <code>_ClassElement_</code> to limit the text.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param parent the parent of the field editor\'s control ',non-directive
' Creates a string field editor of unlimited width.  ',non-directive
'Use the method <code>_ClassElement_</code> to limit the text.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param parent the parent of the field editor\'s control ',non-directive
' Validation strategy constant (value <code>0</code>) indicating that  the editor should perform validation after every key stroke.   @see #_ClassElement_ ',directive
' Validation strategy constant (value <code>0</code>) indicating that  the editor should perform validation after every key stroke.   ',non-directive
'@see #_ClassElement_ ',non-directive
' Validation strategy constant (value <code>1</code>) indicating that  the editor should perform validation only when the text widget   loses focus.   @see #_ClassElement_ ',directive
' Validation strategy constant (value <code>1</code>) indicating that  the editor should perform validation only when the text widget   loses focus.   ',non-directive
'@see #_ClassElement_ ',non-directive
' Text limit constant (value <code>-1</code>) indicating unlimited  text limit and width. ',non-directive
' Text limit constant (value <code>-1</code>) indicating unlimited  text limit and width. ',non-directive
' Old text value.  @since _ClassPathElement_ this field is protected. ',non-directive
' Old text value.  ',non-directive
'@since _ClassPathElement_ this field is protected. ',non-directive
' IPersistentPreferenceStore is a preference store that can   be saved. ',non-directive
' IPersistentPreferenceStore is a preference store that can   be saved. ',non-directive
' Saves the non-default-valued preferences known to this preference  store to the file from which they were originally loaded.   @exception _ClassPathElement_ if there is a problem saving this store ',non-directive
' Saves the non-default-valued preferences known to this preference  store to the file from which they were originally loaded.   ',non-directive
'@exception _ClassPathElement_ if there is a problem saving this store ',non-directive
' A field editor for a file path type preference. A standard file   dialog appears when the user presses the change button. ',non-directive
' A field editor for a file path type preference. ',non-directive
'A standard file   dialog appears when the user presses the change button. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a new file field editor  ',non-directive
' Creates a new file field editor  ',non-directive
' Creates a file field editor.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param parent the parent of the field editor\'s control ',non-directive
' Creates a file field editor.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param parent the parent of the field editor\'s control ',non-directive
' Creates a file field editor.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param _ClassElement_ <code>true</code> if the file path   must be absolute, and <code>false</code> otherwise  @param parent the parent of the field editor\'s control ',directive
' Creates a file field editor.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param _ClassElement_ <code>true</code> if the file path   must be absolute, and <code>false</code> otherwise  ',non-directive
'@param parent the parent of the field editor\'s control ',non-directive
' Creates a file field editor.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param _ClassElement_ <code>true</code> if the file path   must be absolute, and <code>false</code> otherwise  @param _ClassElement_ either {@link _ClassElement_#VALIDATE_ON_KEY_STROKE}   to perform on the fly checking, or {@link _ClassElement_#VALIDATE_ON_FOCUS_LOST}   (the default) to perform validation only after the text has been typed in  @param parent the parent of the field editor\'s control.  @since _ClassPathElement_  @see _ClassElement_#VALIDATE_ON_KEY_STROKE  @see _ClassElement_#VALIDATE_ON_FOCUS_LOST ',directive
' Creates a file field editor.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param _ClassElement_ <code>true</code> if the file path   must be absolute, and <code>false</code> otherwise  ',non-directive
'@param _ClassElement_ either {',directive
'@link _ClassElement_#VALIDATE_ON_KEY_STROKE}   to perform on the fly checking, or {',directive
'@link _ClassElement_#VALIDATE_ON_FOCUS_LOST}   (the default) to perform validation only after the text has been typed in  ',directive
'@param parent the parent of the field editor\'s control.  ',non-directive
'@since _ClassPathElement_  ',non-directive
'@see _ClassElement_#VALIDATE_ON_KEY_STROKE  ',non-directive
'@see _ClassElement_#VALIDATE_ON_FOCUS_LOST ',non-directive
' The <code>IPreferenceStore</code> interface represents a table mapping  named preferences to values. If there is no value for a given name,   then that preferences\'s default value is returned; and if there is no  default value for that preference, then a default-default value is returned.  The default-default values for the primitive types are as follows:  <ul>   <li><code>boolean</code> = <code>false</code></li>   <li><code>double</code> = <code>_ClassPathElement_</code></li>   <li><code>float</code> = <code>_ClassPathElement_</code></li>   <li><code>int</code> = <code>0</code></li>   <li><code>long</code> = <code>0</code></li>   <li><code>String</code> = <code>\"\"</code> (the empty string)</li>  </ul>  <p>  Thus a preference store maintains two values for each of a set of  names: a current value and a default value.  The typical usage is to establish the defaults for all known preferences  and then restore previously stored values for preferences whose values   were different from their defaults. After the current values of  the preferences have been modified, it is a simple matter to write  out only those preferences whose values are different from their defaults.  This two-tiered approach to saving and restoring preference setting  minimized the number of preferences that need to be persisted; indeed,  the normal starting state does not require storing any preferences  at all.  </p>  <p>  A property change event is reported whenever a preferences current  value actually changes (whether through <code>_ClassElement_</code>,  <code>setToDefault</code>, or other unspecified means). Note, however,  that manipulating default values (with <code>_ClassElement_</code>)  does not cause such events to be reported.  </p>  <p>  Clients who need a preference store may implement this interface or   instantiate the standard implementation <code>_ClassElement_</code>.  </p>   @see _ClassElement_ ',directive
' The <code>IPreferenceStore</code> interface represents a table mapping  named preferences to values. ',non-directive
'If there is no value for a given name,   then that preferences\'s default value is returned; and if there is no  default value for that preference, then a default-default value is returned.  ',non-directive
'The default-default values for the primitive types are as follows:  <ul>   ',directive
'<li><code>boolean</code> = <code>false</code></li>   ',non-directive
'<li><code>double</code> = <code>_ClassPathElement_</code></li>   ',non-directive
'<li><code>float</code> = <code>_ClassPathElement_</code></li>   ',non-directive
'<li><code>int</code> = <code>0</code></li>   ',non-directive
'<li><code>long</code> = <code>0</code></li>   ',non-directive
'<li><code>String</code> = <code>\"\"</code> (the empty string)</li>  </ul>  ',non-directive
'<p>  Thus a preference store maintains two values for each of a set of  names: a current value and a default value.  ',non-directive
'The typical usage is to establish the defaults for all known preferences  and then restore previously stored values for preferences whose values   were different from their defaults. ',directive
'After the current values of  the preferences have been modified, it is a simple matter to write  out only those preferences whose values are different from their defaults.  ',non-directive
'This two-tiered approach to saving and restoring preference setting  minimized the number of preferences that need to be persisted; indeed,  the normal starting state does not require storing any preferences  at all.  ',non-directive
'</p>  <p>  A property change event is reported whenever a preferences current  value actually changes (whether through <code>_ClassElement_</code>,  <code>setToDefault</code>, or other unspecified means). ',directive
'Note, however,  that manipulating default values (with <code>_ClassElement_</code>)  does not cause such events to be reported.  ',directive
'</p>  <p>  Clients who need a preference store may implement this interface or   instantiate the standard implementation <code>_ClassElement_</code>.  ',directive
'</p>   ',non-directive
'@see _ClassElement_ ',non-directive
' Returns whether the named preference is known to this preference  store.   @param name the name of the preference  @return <code>true</code> if either a current value or a default   value is known for the named preference, and <code>false</code> otherwise ',non-directive
' Returns whether the named preference is known to this preference  store.   ',non-directive
'@param name the name of the preference  ',non-directive
'@return <code>true</code> if either a current value or a default   value is known for the named preference, and <code>false</code> otherwise ',non-directive
' Fires a property change event corresponding to a change to the  current value of the preference with the given name.  <p>  This method is provided on this interface to simplify the implementation   of decorators. There is normally no need to call this method since  <code>_ClassElement_</code> and <code>setToDefault</code> report such  events in due course. Implementations should funnel all preference  changes through this method.  </p>   @param name the name of the preference, to be used as the property   in the event object  @param _ClassElement_ the old value  @param _ClassElement_ the new value ',directive
' Fires a property change event corresponding to a change to the  current value of the preference with the given name.  ',non-directive
'<p>  This method is provided on this interface to simplify the implementation   of decorators. ',directive
'There is normally no need to call this method since  <code>_ClassElement_</code> and <code>setToDefault</code> report such  events in due course. ',directive
'Implementations should funnel all preference  changes through this method.  ',directive
'</p>   ',non-directive
'@param name the name of the preference, to be used as the property   in the event object  ',non-directive
'@param _ClassElement_ the old value  ',non-directive
'@param _ClassElement_ the new value ',non-directive
' Returns the current value of the boolean-valued preference with the  given name.  Returns the default-default value (<code>false</code>) if there  is no preference with the given name, or if the current value   cannot be treated as a boolean.   @param name the name of the preference  @return the boolean-valued preference ',non-directive
' Returns the current value of the boolean-valued preference with the  given name.  ',non-directive
'Returns the default-default value (<code>false</code>) if there  is no preference with the given name, or if the current value   cannot be treated as a boolean.   ',directive
'@param name the name of the preference  ',non-directive
'@return the boolean-valued preference ',non-directive
' Returns the default value for the boolean-valued preference  with the given name.  Returns the default-default value (<code>false</code>) if there  is no default preference with the given name, or if the default   value cannot be treated as a boolean.   @param name the name of the preference  @return the default value of the named preference ',non-directive
' Returns the default value for the boolean-valued preference  with the given name.  ',non-directive
'Returns the default-default value (<code>false</code>) if there  is no default preference with the given name, or if the default   value cannot be treated as a boolean.   ',directive
'@param name the name of the preference  ',non-directive
'@return the default value of the named preference ',non-directive
' Returns the default value for the double-valued preference  with the given name.  Returns the default-default value (<code>_ClassPathElement_</code>) if there  is no default preference with the given name, or if the default   value cannot be treated as a double.   @param name the name of the preference  @return the default value of the named preference ',non-directive
' Returns the default value for the double-valued preference  with the given name.  ',non-directive
'Returns the default-default value (<code>_ClassPathElement_</code>) if there  is no default preference with the given name, or if the default   value cannot be treated as a double.   ',directive
'@param name the name of the preference  ',non-directive
'@return the default value of the named preference ',non-directive
' Returns the default value for the float-valued preference  with the given name.  Returns the default-default value (<code>_ClassPathElement_</code>) if there  is no default preference with the given name, or if the default   value cannot be treated as a float.   @param name the name of the preference  @return the default value of the named preference ',non-directive
' Returns the default value for the float-valued preference  with the given name.  ',non-directive
'Returns the default-default value (<code>_ClassPathElement_</code>) if there  is no default preference with the given name, or if the default   value cannot be treated as a float.   ',directive
'@param name the name of the preference  ',non-directive
'@return the default value of the named preference ',non-directive
' Returns the default value for the integer-valued preference  with the given name.  Returns the default-default value (<code>0</code>) if there  is no default preference with the given name, or if the default   value cannot be treated as an integer.   @param name the name of the preference  @return the default value of the named preference ',non-directive
' Returns the default value for the integer-valued preference  with the given name.  ',non-directive
'Returns the default-default value (<code>0</code>) if there  is no default preference with the given name, or if the default   value cannot be treated as an integer.   ',directive
'@param name the name of the preference  ',non-directive
'@return the default value of the named preference ',non-directive
' Returns the default value for the long-valued preference  with the given name.  Returns the default-default value (<code>0L</code>) if there  is no default preference with the given name, or if the default   value cannot be treated as a long.   @param name the name of the preference  @return the default value of the named preference ',non-directive
' Returns the default value for the long-valued preference  with the given name.  ',non-directive
'Returns the default-default value (<code>0L</code>) if there  is no default preference with the given name, or if the default   value cannot be treated as a long.   ',directive
'@param name the name of the preference  ',non-directive
'@return the default value of the named preference ',non-directive
' Returns the default value for the string-valued preference  with the given name.  Returns the default-default value (the empty string <code>\"\"</code>)   is no default preference with the given name, or if the default   value cannot be treated as a string.   @param name the name of the preference  @return the default value of the named preference ',non-directive
' Returns the default value for the string-valued preference  with the given name.  ',non-directive
'Returns the default-default value (the empty string <code>\"\"</code>)   is no default preference with the given name, or if the default   value cannot be treated as a string.   ',directive
'@param name the name of the preference  ',non-directive
'@return the default value of the named preference ',non-directive
' Returns the current value of the double-valued preference with the  given name.  Returns the default-default value (<code>_ClassPathElement_</code>) if there  is no preference with the given name, or if the current value   cannot be treated as a double.   @param name the name of the preference  @return the double-valued preference ',non-directive
' Returns the current value of the double-valued preference with the  given name.  ',non-directive
'Returns the default-default value (<code>_ClassPathElement_</code>) if there  is no preference with the given name, or if the current value   cannot be treated as a double.   ',directive
'@param name the name of the preference  ',non-directive
'@return the double-valued preference ',non-directive
' Returns the current value of the float-valued preference with the  given name.  Returns the default-default value (<code>_ClassPathElement_</code>) if there  is no preference with the given name, or if the current value   cannot be treated as a float.   @param name the name of the preference  @return the float-valued preference ',non-directive
' Returns the current value of the float-valued preference with the  given name.  ',non-directive
'Returns the default-default value (<code>_ClassPathElement_</code>) if there  is no preference with the given name, or if the current value   cannot be treated as a float.   ',directive
'@param name the name of the preference  ',non-directive
'@return the float-valued preference ',non-directive
' Returns the current value of the integer-valued preference with the  given name.  Returns the default-default value (<code>0</code>) if there  is no preference with the given name, or if the current value   cannot be treated as an integter.   @param name the name of the preference  @return the int-valued preference ',non-directive
' Returns the current value of the integer-valued preference with the  given name.  ',non-directive
'Returns the default-default value (<code>0</code>) if there  is no preference with the given name, or if the current value   cannot be treated as an integter.   ',directive
'@param name the name of the preference  ',non-directive
'@return the int-valued preference ',non-directive
' Returns the current value of the long-valued preference with the  given name.  Returns the default-default value (<code>0L</code>) if there  is no preference with the given name, or if the current value   cannot be treated as a long.   @param name the name of the preference  @return the long-valued preference ',non-directive
' Returns the current value of the long-valued preference with the  given name.  ',non-directive
'Returns the default-default value (<code>0L</code>) if there  is no preference with the given name, or if the current value   cannot be treated as a long.   ',directive
'@param name the name of the preference  ',non-directive
'@return the long-valued preference ',non-directive
' Returns the current value of the string-valued preference with the  given name.  Returns the default-default value (the empty string <code>\"\"</code>)  if there is no preference with the given name, or if the current value   cannot be treated as a string.   @param name the name of the preference  @return the string-valued preference ',non-directive
' Returns the current value of the string-valued preference with the  given name.  ',non-directive
'Returns the default-default value (the empty string <code>\"\"</code>)  if there is no preference with the given name, or if the current value   cannot be treated as a string.   ',directive
'@param name the name of the preference  ',non-directive
'@return the string-valued preference ',non-directive
' Returns whether the current value of the preference with the given name  has the default value.   @param name the name of the preference  @return <code>true</code> if the preference has a known default value  and its current value is the same, and <code>false</code> otherwise  (including the case where the preference is unknown to this store) ',non-directive
' Returns whether the current value of the preference with the given name  has the default value.   ',non-directive
'@param name the name of the preference  ',non-directive
'@return <code>true</code> if the preference has a known default value  and its current value is the same, and <code>false</code> otherwise  (including the case where the preference is unknown to this store) ',non-directive
' Returns whether the current values in this property store  require saving.   @return <code>true</code> if at least one of values of    the preferences known to this store has changed and    requires saving, and <code>false</code> otherwise. ',directive
' Returns whether the current values in this property store  require saving.   ',non-directive
'@return <code>true</code> if at least one of values of    the preferences known to this store has changed and    requires saving, and <code>false</code> otherwise. ',non-directive
' Sets the current value of the preference with the given name to  the given string value without sending a property change.  <p>  This method does not fire a property change event and   should only be used for setting internal preferences   that are not meant to be processed by listeners.  Normal clients should instead call #_ClassElement_.  </p>   @param name the name of the preference  @param value the new current value of the preference ',directive
' Sets the current value of the preference with the given name to  the given string value without sending a property change.  ',non-directive
'<p>  This method does not fire a property change event and   should only be used for setting internal preferences   that are not meant to be processed by listeners.  ',directive
'Normal clients should instead call #_ClassElement_.  ',directive
'</p>   ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new current value of the preference ',non-directive
' Removes the given listener from this preference store.  Has no affect if the listener is not registered.   @param listener a property change listener ',non-directive
' Removes the given listener from this preference store.  ',non-directive
'Has no affect if the listener is not registered.   ',directive
'@param listener a property change listener ',non-directive
' Sets the default value for the double-valued preference with the  given name.   <p>  Note that the current value of the preference is affected if  the preference\'s current value was its old default value, in which  case it changes to the new default value. If the preference\'s current  is different from its old default value, its current value is  unaffected. No property change events are reported by changing default  values.  </p>   @param name the name of the preference  @param value the new default value for the preference ',directive
' Sets the default value for the double-valued preference with the  given name.   ',non-directive
'<p>  Note that the current value of the preference is affected if  the preference\'s current value was its old default value, in which  case it changes to the new default value. ',directive
'If the preference\'s current  is different from its old default value, its current value is  unaffected. ',directive
'No property change events are reported by changing default  values.  ',directive
'</p>   ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new default value for the preference ',non-directive
' Sets the default value for the float-valued preference with the  given name.   <p>  Note that the current value of the preference is affected if  the preference\'s current value was its old default value, in which  case it changes to the new default value. If the preference\'s current  is different from its old default value, its current value is  unaffected. No property change events are reported by changing default  values.  </p>   @param name the name of the preference  @param value the new default value for the preference ',directive
' Sets the default value for the float-valued preference with the  given name.   ',non-directive
'<p>  Note that the current value of the preference is affected if  the preference\'s current value was its old default value, in which  case it changes to the new default value. ',directive
'If the preference\'s current  is different from its old default value, its current value is  unaffected. ',directive
'No property change events are reported by changing default  values.  ',directive
'</p>   ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new default value for the preference ',non-directive
' Sets the default value for the integer-valued preference with the  given name.   <p>  Note that the current value of the preference is affected if  the preference\'s current value was its old default value, in which  case it changes to the new default value. If the preference\'s current  is different from its old default value, its current value is  unaffected. No property change events are reported by changing default  values.  </p>   @param name the name of the preference  @param value the new default value for the preference ',directive
' Sets the default value for the integer-valued preference with the  given name.   ',non-directive
'<p>  Note that the current value of the preference is affected if  the preference\'s current value was its old default value, in which  case it changes to the new default value. ',directive
'If the preference\'s current  is different from its old default value, its current value is  unaffected. ',directive
'No property change events are reported by changing default  values.  ',directive
'</p>   ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new default value for the preference ',non-directive
' Sets the default value for the long-valued preference with the  given name.   <p>  Note that the current value of the preference is affected if  the preference\'s current value was its old default value, in which  case it changes to the new default value. If the preference\'s current  is different from its old default value, its current value is  unaffected. No property change events are reported by changing default  values.  </p>   @param name the name of the preference  @param value the new default value for the preference ',directive
' Sets the default value for the long-valued preference with the  given name.   ',non-directive
'<p>  Note that the current value of the preference is affected if  the preference\'s current value was its old default value, in which  case it changes to the new default value. ',directive
'If the preference\'s current  is different from its old default value, its current value is  unaffected. ',directive
'No property change events are reported by changing default  values.  ',directive
'</p>   ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new default value for the preference ',non-directive
' Sets the default value for the string-valued preference with the  given name.   <p>  Note that the current value of the preference is affected if  the preference\'s current value was its old default value, in which  case it changes to the new default value. If the preference\'s current  is different from its old default value, its current value is  unaffected. No property change events are reported by changing default  values.  </p>   @param name the name of the preference  @param _ClassElement_ the new default value for the preference ',directive
' Sets the default value for the string-valued preference with the  given name.   ',non-directive
'<p>  Note that the current value of the preference is affected if  the preference\'s current value was its old default value, in which  case it changes to the new default value. ',directive
'If the preference\'s current  is different from its old default value, its current value is  unaffected. ',directive
'No property change events are reported by changing default  values.  ',directive
'</p>   ',non-directive
'@param name the name of the preference  ',non-directive
'@param _ClassElement_ the new default value for the preference ',non-directive
' Sets the default value for the boolean-valued preference with the  given name.   <p>  Note that the current value of the preference is affected if  the preference\'s current value was its old default value, in which  case it changes to the new default value. If the preference\'s current  is different from its old default value, its current value is  unaffected. No property change events are reported by changing default  values.  </p>   @param name the name of the preference  @param value the new default value for the preference ',directive
' Sets the default value for the boolean-valued preference with the  given name.   ',non-directive
'<p>  Note that the current value of the preference is affected if  the preference\'s current value was its old default value, in which  case it changes to the new default value. ',directive
'If the preference\'s current  is different from its old default value, its current value is  unaffected. ',directive
'No property change events are reported by changing default  values.  ',directive
'</p>   ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new default value for the preference ',non-directive
' Sets the current value of the preference with the given name back  to its default value.  <p>  Note that the preferred way of re-initializing a preference to the  appropriate default value is to call <code>setToDefault</code>.  This is implemented by removing the named value from the store,   thereby exposing the default value.  </p>   @param name the name of the preference ',directive
' Sets the current value of the preference with the given name back  to its default value.  ',non-directive
'<p>  Note that the preferred way of re-initializing a preference to the  appropriate default value is to call <code>setToDefault</code>.  ',directive
'This is implemented by removing the named value from the store,   thereby exposing the default value.  ',directive
'</p>   ',non-directive
'@param name the name of the preference ',non-directive
' Sets the current value of the double-valued preference with the  given name.  <p>  A property change event is reported if the current value of the   preference actually changes from its previous value. In the event  object, the property name is the name of the preference, and the  old and new values are wrapped as objects.  </p>  <p>  Note that the preferred way of re-initializing a preference to its  default value is to call <code>setToDefault</code>.  </p>   @param name the name of the preference  @param value the new current value of the preference ',directive
' Sets the current value of the double-valued preference with the  given name.  ',non-directive
'<p>  A property change event is reported if the current value of the   preference actually changes from its previous value. ',directive
'In the event  object, the property name is the name of the preference, and the  old and new values are wrapped as objects.  ',directive
'</p>  <p>  Note that the preferred way of re-initializing a preference to its  default value is to call <code>setToDefault</code>.  ',directive
'</p>   ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new current value of the preference ',non-directive
' Sets the current value of the float-valued preference with the  given name.  <p>  A property change event is reported if the current value of the   preference actually changes from its previous value. In the event  object, the property name is the name of the preference, and the  old and new values are wrapped as objects.  </p>  <p>  Note that the preferred way of re-initializing a preference to its  default value is to call <code>setToDefault</code>.  </p>   @param name the name of the preference  @param value the new current value of the preference ',directive
' Sets the current value of the float-valued preference with the  given name.  ',non-directive
'<p>  A property change event is reported if the current value of the   preference actually changes from its previous value. ',directive
'In the event  object, the property name is the name of the preference, and the  old and new values are wrapped as objects.  ',directive
'</p>  <p>  Note that the preferred way of re-initializing a preference to its  default value is to call <code>setToDefault</code>.  ',directive
'</p>   ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new current value of the preference ',non-directive
' Sets the current value of the string-valued preference with the  given name.  <p>  A property change event is reported if the current value of the   preference actually changes from its previous value. In the event  object, the property name is the name of the preference, and the  old and new values are wrapped as objects.  </p>  <p>  Note that the preferred way of re-initializing a preference to its  default value is to call <code>setToDefault</code>.  </p>   @param name the name of the preference  @param value the new current value of the preference ',directive
' Sets the current value of the string-valued preference with the  given name.  ',non-directive
'<p>  A property change event is reported if the current value of the   preference actually changes from its previous value. ',directive
'In the event  object, the property name is the name of the preference, and the  old and new values are wrapped as objects.  ',directive
'</p>  <p>  Note that the preferred way of re-initializing a preference to its  default value is to call <code>setToDefault</code>.  ',directive
'</p>   ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new current value of the preference ',non-directive
' Sets the current value of the boolean-valued preference with the  given name.  <p>  A property change event is reported if the current value of the   preference actually changes from its previous value. In the event  object, the property name is the name of the preference, and the  old and new values are wrapped as objects.  </p>  <p>  Note that the preferred way of re-initializing a preference to its  default value is to call <code>setToDefault</code>.  </p>   @param name the name of the preference  @param value the new current value of the preference ',directive
' Sets the current value of the boolean-valued preference with the  given name.  ',non-directive
'<p>  A property change event is reported if the current value of the   preference actually changes from its previous value. ',directive
'In the event  object, the property name is the name of the preference, and the  old and new values are wrapped as objects.  ',directive
'</p>  <p>  Note that the preferred way of re-initializing a preference to its  default value is to call <code>setToDefault</code>.  ',directive
'</p>   ',non-directive
'@param name the name of the preference  ',non-directive
'@param value the new current value of the preference ',non-directive
' The default-default value for boolean preferences (<code>false</code>). ',non-directive
' The default-default value for boolean preferences (<code>false</code>). ',non-directive
' The default-default value for double preferences (<code>_ClassPathElement_</code>). ',non-directive
' The default-default value for double preferences (<code>_ClassPathElement_</code>). ',non-directive
' The default-default value for float preferences (<code>_ClassPathElement_</code>). ',non-directive
' The default-default value for float preferences (<code>_ClassPathElement_</code>). ',non-directive
' The default-default value for int preferences (<code>0</code>). ',non-directive
' The default-default value for int preferences (<code>0</code>). ',non-directive
' The default-default value for long preferences (<code>0L</code>). ',non-directive
' The default-default value for long preferences (<code>0L</code>). ',non-directive
' The default-default value for String preferences (<code>\"\"</code>). ',non-directive
' The default-default value for String preferences (<code>\"\"</code>). ',non-directive
' The string representation used for <code>true</code> (<code>\"true\"</code>). ',non-directive
' The string representation used for <code>true</code> (<code>\"true\"</code>). ',non-directive
' The string representation used for <code>false</code> (<code>\"false\"</code>). ',non-directive
' The string representation used for <code>false</code> (<code>\"false\"</code>). ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Prints the contents of this preference store to the given print stream.    @param out             the print stream ',non-directive
' Prints the contents of this preference store to the given print stream.   ',non-directive
?,non-directive
'@param out             the print stream ',non-directive
' Prints the contents of this preference store to the given print writer.    @param out             the print writer ',non-directive
' Prints the contents of this preference store to the given print writer.   ',non-directive
?,non-directive
'@param out             the print writer ',non-directive
' Loads this preference store from the file established in the constructor  <code>_ClassElement_(_ClassPathElement_)</code> (or by  <code>_ClassElement_</code>). Default preference values are not affected.    @exception _ClassPathElement_                 if there is a problem loading this store ',non-directive
' Loads this preference store from the file established in the constructor  <code>_ClassElement_(_ClassPathElement_)</code> (or by  <code>_ClassElement_</code>). ',non-directive
'Default preference values are not affected.   ',non-directive
?,non-directive
'@exception _ClassPathElement_                 if there is a problem loading this store ',directive
' Loads this preference store from the given input stream. Default  preference values are not affected.    @param in             the input stream  @exception _ClassPathElement_                 if there is a problem loading this store ',non-directive
' Loads this preference store from the given input stream. ',non-directive
'Default  preference values are not affected.   ',non-directive
?,non-directive
'@param in             the input stream  ',non-directive
'@exception _ClassPathElement_                 if there is a problem loading this store ',directive
?,non-directive
?,non-directive
' Returns an enumeration of all preferences known to this store which have  current values other than their default value.    @return an array of preference names ',non-directive
' Returns an enumeration of all preferences known to this store which have  current values other than their default value.   ',non-directive
?,non-directive
'@return an array of preference names ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Saves the non-default-valued preferences known to this preference store  to the file from which they were originally loaded.    @exception _ClassPathElement_                 if there is a problem saving this store ',non-directive
' Saves the non-default-valued preferences known to this preference store  to the file from which they were originally loaded.   ',non-directive
?,non-directive
'@exception _ClassPathElement_                 if there is a problem saving this store ',directive
' Saves this preference store to the given output stream. The given string  is inserted as header information.    @param out             the output stream  @param header             the header  @exception _ClassPathElement_                 if there is a problem saving this store ',non-directive
' Saves this preference store to the given output stream. ',non-directive
'The given string  is inserted as header information.   ',non-directive
?,non-directive
'@param out             the output stream  ',non-directive
'@param header             the header  ',non-directive
'@exception _ClassPathElement_                 if there is a problem saving this store ',directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Sets the name of the file used when loading and storing this preference  store.  <p>  Afterward, the methods <code>load()</code> and <code>save()</code>  can be used to load and store this preference store.  </p>    @param name             the file name  @see #load()  @see #save() ',non-directive
' Sets the name of the file used when loading and storing this preference  store.  ',non-directive
'<p>  Afterward, the methods <code>load()</code> and <code>save()</code>  can be used to load and store this preference store.  ',directive
'</p>    ',non-directive
'@param name             the file name  ',non-directive
'@see #load()  ',non-directive
'@see #save() ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates an empty preference store.  <p>  Use the methods <code>load(_ClassElement_)</code> and  <code>save(_ClassElement_)</code> to load and store this preference store.  </p>    @see #load(_ClassElement_)  @see #save(_ClassElement_, String) ',non-directive
' Creates an empty preference store.  ',non-directive
'<p>  Use the methods <code>load(_ClassElement_)</code> and  <code>save(_ClassElement_)</code> to load and store this preference store.  ',directive
'</p>    ',non-directive
'@see #load(_ClassElement_)  ',non-directive
'@see #save(_ClassElement_, String) ',non-directive
' Creates an empty preference store that loads from and saves to the a  file.  <p>  Use the methods <code>load()</code> and <code>save()</code> to load  and store this preference store.  </p>    @param filename             the file name  @see #load()  @see #save() ',non-directive
' Creates an empty preference store that loads from and saves to the a  file.  ',non-directive
'<p>  Use the methods <code>load()</code> and <code>save()</code> to load  and store this preference store.  ',directive
'</p>    ',non-directive
'@param filename             the file name  ',non-directive
'@see #load()  ',non-directive
'@see #save() ',non-directive
' Provides labels for <code>IPreferenceNode</code> objects.    @since _ClassPathElement_ ',non-directive
' Provides labels for <code>IPreferenceNode</code> objects.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' @param element must be an instance of <code>IPreferenceNode</code>.  @see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',directive
?,non-directive
'@param element must be an instance of <code>IPreferenceNode</code>.  ',directive
'@see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',non-directive
' @param element must be an instance of <code>IPreferenceNode</code>.  @see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',directive
?,non-directive
'@param element must be an instance of <code>IPreferenceNode</code>.  ',directive
'@see _ClassPathElement_#_ClassElement_(_ClassPathElement_) ',non-directive
?,non-directive
?,non-directive
' A field editor for a directory path type preference. A standard directory  dialog appears when the user presses the change button. ',non-directive
' A field editor for a directory path type preference. ',non-directive
'A standard directory  dialog appears when the user presses the change button. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a new directory field editor  ',non-directive
' Creates a new directory field editor  ',non-directive
' Creates a directory field editor.    @param name the name of the preference this field editor works on  @param _ClassElement_ the label text of the field editor  @param parent the parent of the field editor\'s control ',non-directive
' Creates a directory field editor.   ',non-directive
?,non-directive
'@param name the name of the preference this field editor works on  ',non-directive
'@param _ClassElement_ the label text of the field editor  ',non-directive
'@param parent the parent of the field editor\'s control ',non-directive
' A preference manager maintains a hierarchy of preference nodes and  associated preference pages. ',non-directive
' A preference manager maintains a hierarchy of preference nodes and  associated preference pages. ',non-directive
' Adds the given preference node as a subnode of the  node at the given path.   @param path the path  @param node the node to add  @return <code>true</code> if the add was successful,   and <code>false</code> if there is no contribution at   the given path ',non-directive
' Adds the given preference node as a subnode of the  node at the given path.   ',non-directive
'@param path the path  ',non-directive
'@param node the node to add  ',non-directive
'@return <code>true</code> if the add was successful,   and <code>false</code> if there is no contribution at   the given path ',non-directive
' Recursively enumerates all nodes at or below the given node  and adds them to the given list in the given order.    @param node the starting node  @param sequence a read-write list of preference nodes   (element type: <code>IPreferenceNode</code>)   in the given order  @param order the traversal order, one of   <code>PRE_ORDER</code> and <code>POST_ORDER</code> ',non-directive
' Recursively enumerates all nodes at or below the given node  and adds them to the given list in the given order.   ',non-directive
?,non-directive
'@param node the starting node  ',non-directive
'@param sequence a read-write list of preference nodes   (element type: <code>IPreferenceNode</code>)   in the given order  ',directive
'@param order the traversal order, one of   <code>PRE_ORDER</code> and <code>POST_ORDER</code> ',directive
' Finds and returns the contribution node at the given path.   @param path the path  @return the node, or <code>null</code> if none ',non-directive
' Finds and returns the contribution node at the given path.   ',non-directive
'@param path the path  ',non-directive
'@return the node, or <code>null</code> if none ',directive
' Finds and returns the preference node directly  below the top at the given path.   @param path the path  @param top top at the given path  @return the node, or <code>null</code> if none    @since _ClassPathElement_ ',non-directive
' Finds and returns the preference node directly  below the top at the given path.   ',non-directive
'@param path the path  ',non-directive
'@param top top at the given path  ',non-directive
'@return the node, or <code>null</code> if none    ',directive
'@since _ClassPathElement_ ',non-directive
' Returns all preference nodes managed by this  manager.   @param order the traversal order, one of   <code>PRE_ORDER</code> and <code>POST_ORDER</code>  @return a list of preference nodes   (element type: <code>IPreferenceNode</code>)   in the given order ',non-directive
' Returns all preference nodes managed by this  manager.   ',non-directive
'@param order the traversal order, one of   <code>PRE_ORDER</code> and <code>POST_ORDER</code>  ',directive
'@return a list of preference nodes   (element type: <code>IPreferenceNode</code>)   in the given order ',directive
' Returns the root node.  Note that the root node is a special internal node  that is used to collect together all the nodes that  have no parent; it is not given out to clients.   @return the root node ',directive
' Returns the root node.  ',non-directive
'Note that the root node is a special internal node  that is used to collect together all the nodes that  have no parent; it is not given out to clients.   ',directive
'@return the root node ',non-directive
' Returns the root level nodes of this preference manager.    @return an array containing the root nodes  @since _ClassPathElement_ ',non-directive
' Returns the root level nodes of this preference manager.   ',non-directive
?,non-directive
'@return an array containing the root nodes  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Removes the preference node at the given path.    @param path             the path  @return the node that was removed, or <code>null</code> if there was no          node at the given path ',non-directive
' Removes the preference node at the given path.   ',non-directive
?,non-directive
'@param path             the path  ',non-directive
'@return the node that was removed, or <code>null</code> if there was no          node at the given path ',directive
' Removes the given prefreence node if it is managed by  this contribution manager.   @param node the node to remove  @return <code>true</code> if the node was removed,   and <code>false</code> otherwise ',non-directive
' Removes the given prefreence node if it is managed by  this contribution manager.   ',non-directive
'@param node the node to remove  ',non-directive
'@return <code>true</code> if the node was removed,   and <code>false</code> otherwise ',non-directive
' Removes all contribution nodes known to this manager. ',non-directive
' Removes all contribution nodes known to this manager. ',non-directive
' Creates a new preference manager. ',non-directive
' Creates a new preference manager. ',non-directive
' Creates a new preference manager with the given  path separator.    @param _ClassElement_ ',non-directive
' Creates a new preference manager with the given  path separator.   ',non-directive
?,non-directive
'@param _ClassElement_ ',non-directive
' Creates a new preference manager with the given  path separator and root node.   @param _ClassElement_ the separator character  @param _ClassElement_ the root node.    @since _ClassPathElement_ ',non-directive
' Creates a new preference manager with the given  path separator and root node.   ',non-directive
'@param _ClassElement_ the separator character  ',non-directive
'@param _ClassElement_ the root node.    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Pre-order traversal means visit the root first,  then the children. ',non-directive
' Pre-order traversal means visit the root first,  then the children. ',non-directive
' Post-order means visit the children, and then the root. ',non-directive
' Post-order means visit the children, and then the root. ',non-directive
' Interface for a wizard.  A wizard maintains a list of wizard pages,  stacked on top of each other in card layout fashion.  <p>  The class <code>Wizard</code> provides an abstract implementation  of this interface. However, clients are also free to implement this   interface if <code>Wizard</code> does not suit their needs.  </p>  @see Wizard ',non-directive
' Interface for a wizard.  ',non-directive
'A wizard maintains a list of wizard pages,  stacked on top of each other in card layout fashion.  ',non-directive
'<p>  The class <code>Wizard</code> provides an abstract implementation  of this interface. ',directive
'However, clients are also free to implement this   interface if <code>Wizard</code> does not suit their needs.  ',directive
'</p>  ',non-directive
'@see Wizard ',non-directive
' Adds any last-minute pages to this wizard.  <p>  This method is called just before the wizard becomes visible, to give the   wizard the opportunity to add any lazily created pages.  </p> ',directive
' Adds any last-minute pages to this wizard.  ',non-directive
'<p>  This method is called just before the wizard becomes visible, to give the   wizard the opportunity to add any lazily created pages.  ',directive
'</p> ',non-directive
' Returns whether this wizard could be finished without further user  interaction.  <p>  The result of this method is typically used by the wizard container to enable  or disable the Finish button.  </p>   @return <code>true</code> if the wizard could be finished,    and <code>false</code> otherwise ',non-directive
' Returns whether this wizard could be finished without further user  interaction.  ',non-directive
'<p>  The result of this method is typically used by the wizard container to enable  or disable the Finish button.  ',non-directive
'</p>   ',non-directive
'@return <code>true</code> if the wizard could be finished,    and <code>false</code> otherwise ',non-directive
' Creates this wizard\'s controls in the given parent control.  <p>  The wizard container calls this method to create the controls  for the wizard\'s pages before the wizard is opened. This allows  the wizard to size correctly; otherwise a resize may occur when  moving to a new page.  </p>   @param _ClassElement_ the parent control ',directive
' Creates this wizard\'s controls in the given parent control.  ',non-directive
'<p>  The wizard container calls this method to create the controls  for the wizard\'s pages before the wizard is opened. ',directive
'This allows  the wizard to size correctly; otherwise a resize may occur when  moving to a new page.  ',directive
'</p>   ',non-directive
'@param _ClassElement_ the parent control ',non-directive
' Disposes of this wizard and frees all SWT resources. ',non-directive
' Disposes of this wizard and frees all SWT resources. ',non-directive
' Returns the container of this wizard.   @return the wizard container, or <code>null</code> if this    wizard has yet to be added to a container ',non-directive
' Returns the container of this wizard.   ',non-directive
'@return the wizard container, or <code>null</code> if this    wizard has yet to be added to a container ',directive
' Returns the default page image for this wizard.  <p>  This image can be used for pages which do not  supply their own image.  </p>   @return the default page image ',non-directive
' Returns the default page image for this wizard.  ',non-directive
'<p>  This image can be used for pages which do not  supply their own image.  ',non-directive
'</p>   ',non-directive
'@return the default page image ',non-directive
' Returns the dialog settings for this wizard.  <p>  The dialog store is used to record state between  wizard invocations (for example, radio button selections,  last directory, etc.).  </p>   @return the dialog settings, or <code>null</code> if none ',directive
' Returns the dialog settings for this wizard.  ',non-directive
'<p>  The dialog store is used to record state between  wizard invocations (for example, radio button selections,  last directory, etc.).  ',non-directive
'</p>   ',non-directive
'@return the dialog settings, or <code>null</code> if none ',directive
' Returns the successor of the given page.  <p>  This method is typically called by a wizard page  </p>   @param page the page  @return the next page, or <code>null</code> if none ',directive
' Returns the successor of the given page.  ',non-directive
'<p>  This method is typically called by a wizard page  </p>   ',directive
'@param page the page  ',non-directive
'@return the next page, or <code>null</code> if none ',directive
' Returns the wizard page with the given name belonging to this wizard.   @param _ClassElement_ the name of the wizard page  @return the wizard page with the given name, or <code>null</code> if none ',non-directive
' Returns the wizard page with the given name belonging to this wizard.   ',non-directive
'@param _ClassElement_ the name of the wizard page  ',non-directive
'@return the wizard page with the given name, or <code>null</code> if none ',directive
' Returns the number of pages in this wizard.   @return the number of wizard pages ',non-directive
' Returns the number of pages in this wizard.   ',non-directive
'@return the number of wizard pages ',non-directive
' Returns all the pages in this wizard.   @return a list of pages ',non-directive
' Returns all the pages in this wizard.   ',non-directive
'@return a list of pages ',non-directive
' Returns the predecessor of the given page.  <p>  This method is typically called by a wizard page  </p>   @param page the page  @return the previous page, or <code>null</code> if none ',directive
' Returns the predecessor of the given page.  ',non-directive
'<p>  This method is typically called by a wizard page  </p>   ',directive
'@param page the page  ',non-directive
'@return the previous page, or <code>null</code> if none ',directive
' Returns the first page to be shown in this wizard.   @return the first wizard page ',non-directive
' Returns the first page to be shown in this wizard.   ',non-directive
'@return the first wizard page ',non-directive
' Returns the title bar color for this wizard.   @return the title bar color ',non-directive
' Returns the title bar color for this wizard.   ',non-directive
'@return the title bar color ',non-directive
' Returns the window title string for this wizard.   @return the window title string, or <code>null</code> for no title ',non-directive
' Returns the window title string for this wizard.   ',non-directive
'@return the window title string, or <code>null</code> for no title ',directive
' Returns whether help is available for this wizard.  <p>  The result of this method is typically used by the container to  show or hide the Help button.  </p>   @return <code>true</code> if help is available,    and <code>false</code> if this wizard is helpless ',non-directive
' Returns whether help is available for this wizard.  ',non-directive
'<p>  The result of this method is typically used by the container to  show or hide the Help button.  ',non-directive
'</p>   ',non-directive
'@return <code>true</code> if help is available,    and <code>false</code> if this wizard is helpless ',non-directive
' Returns whether this wizard needs Previous and Next buttons.  <p>  The result of this method is typically used by the container.  </p>   @return <code>true</code> if Previous and Next buttons are required,    and <code>false</code> if none are needed ',directive
' Returns whether this wizard needs Previous and Next buttons.  ',non-directive
'<p>  The result of this method is typically used by the container.  ',non-directive
'</p>   ',non-directive
'@return <code>true</code> if Previous and Next buttons are required,    and <code>false</code> if none are needed ',non-directive
' Returns whether this wizard needs a progress monitor.  <p>  The result of this method is typically used by the container.  </p>   @return <code>true</code> if a progress monitor is required,    and <code>false</code> if none is needed ',directive
' Returns whether this wizard needs a progress monitor.  ',non-directive
'<p>  The result of this method is typically used by the container.  ',non-directive
'</p>   ',non-directive
'@return <code>true</code> if a progress monitor is required,    and <code>false</code> if none is needed ',non-directive
' Performs any actions appropriate in response to the user   having pressed the Cancel button, or refuse if canceling  now is not permitted.   @return <code>true</code> to indicate the cancel request    was accepted, and <code>false</code> to indicate    that the cancel request was refused ',non-directive
' Performs any actions appropriate in response to the user   having pressed the Cancel button, or refuse if canceling  now is not permitted.   ',non-directive
'@return <code>true</code> to indicate the cancel request    was accepted, and <code>false</code> to indicate    that the cancel request was refused ',non-directive
' Performs any actions appropriate in response to the user   having pressed the Finish button, or refuse if finishing  now is not permitted.   Normally this method is only called on the container\'s  current wizard. However if the current wizard is a nested wizard  this method will also be called on all wizards in its parent chain.  Such parents may use this notification to save state etc. However,  the value the parents return from this method is ignored.   @return <code>true</code> to indicate the finish request    was accepted, and <code>false</code> to indicate    that the finish request was refused ',directive
' Performs any actions appropriate in response to the user   having pressed the Finish button, or refuse if finishing  now is not permitted.   ',non-directive
'Normally this method is only called on the container\'s  current wizard. ',directive
'However if the current wizard is a nested wizard  this method will also be called on all wizards in its parent chain.  ',directive
'Such parents may use this notification to save state etc. ',directive
'However,  the value the parents return from this method is ignored.   ',directive
'@return <code>true</code> to indicate the finish request    was accepted, and <code>false</code> to indicate    that the finish request was refused ',non-directive
' Sets or clears the container of this wizard.   @param _ClassElement_ the wizard container, or <code>null</code>  ',non-directive
' Sets or clears the container of this wizard.   ',non-directive
'@param _ClassElement_ the wizard container, or <code>null</code>  ',directive
' <p><code>IWizardContainer2</code> is a supplement to   <code>IWizardContainer</code> that adds a method for updating the size of   the wizard shell based on the contents of the current page.</p>    <p>The class <code>_ClassElement_</code> provides a fully functional   implementation of this interface which will meet the needs of  most clients. However, clients are also free to implement this   interface if <code>_ClassElement_</code> does not suit their needs.  </p>    @see _ClassPathElement_  @since _ClassPathElement_ ',non-directive
' <p><code>IWizardContainer2</code> is a supplement to   <code>IWizardContainer</code> that adds a method for updating the size of   the wizard shell based on the contents of the current page.</p>    <p>The class <code>_ClassElement_</code> provides a fully functional   implementation of this interface which will meet the needs of  most clients. ',directive
'However, clients are also free to implement this   interface if <code>_ClassElement_</code> does not suit their needs.  ',directive
'</p>    ',non-directive
'@see _ClassPathElement_  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Updates the window size to reflect the state of the current wizard.  <p>  This method is called by the container itself  when its wizard changes and may be called  by the wizard at other times to force a window   size change.  </p> ',directive
' Updates the window size to reflect the state of the current wizard.  ',non-directive
'<p>  This method is called by the container itself  when its wizard changes and may be called  by the wizard at other times to force a window   size change.  ',directive
'</p> ',non-directive
' Interface for containers that can host a wizard. It displays  wizard pages, at most one of which is considered  the current page. <code>_ClassElement_</code> returns the  current page; <code>_ClassElement_</code> programmatically changes the  the current page. Note that the pages need not all belong  to the same wizard.  <p>  The class <code>_ClassElement_</code> provides a fully functional   implementation of this interface which will meet the needs of  most clients. However, clients are also free to implement this   interface if <code>_ClassElement_</code> does not suit their needs.  </p>  <p>  Implementors are responsible for disposing of their wizards.  </p>    @see _ClassPathElement_ ',directive
' Interface for containers that can host a wizard. ',non-directive
'It displays  wizard pages, at most one of which is considered  the current page. ',non-directive
'<code>_ClassElement_</code> returns the  current page; <code>_ClassElement_</code> programmatically changes the  the current page. ',non-directive
'Note that the pages need not all belong  to the same wizard.  ',directive
'<p>  The class <code>_ClassElement_</code> provides a fully functional   implementation of this interface which will meet the needs of  most clients. ',directive
'However, clients are also free to implement this   interface if <code>_ClassElement_</code> does not suit their needs.  ',directive
'</p>  <p>  Implementors are responsible for disposing of their wizards.  ',directive
'</p>    ',non-directive
'@see _ClassPathElement_ ',non-directive
' Returns the current wizard page for this container.   @return the current wizard page, or <code>null</code> if the container    is not yet showing the wizard  @see #_ClassElement_ ',non-directive
' Returns the current wizard page for this container.   ',non-directive
'@return the current wizard page, or <code>null</code> if the container    is not yet showing the wizard  ',directive
'@see #_ClassElement_ ',non-directive
' Returns the shell for this wizard container.   @return the shell, or <code>null</code> if this wizard    container does not have a shell ',non-directive
' Returns the shell for this wizard container.   ',non-directive
'@return the shell, or <code>null</code> if this wizard    container does not have a shell ',directive
' Makes the given page visible.  <p>  This method should not be use for normal page  sequencing (back, next) which is handled by the   container itself. It may, however, be used to  move to another page in response to some custom  action such as double clicking in a list.  </p>   @param page the page to show  @see #_ClassElement_ ',directive
' Makes the given page visible.  ',non-directive
'<p>  This method should not be use for normal page  sequencing (back, next) which is handled by the   container itself. ',directive
'It may, however, be used to  move to another page in response to some custom  action such as double clicking in a list.  ',directive
'</p>   ',non-directive
'@param page the page to show  ',non-directive
'@see #_ClassElement_ ',non-directive
' Adjusts the enable state of the Back, Next, and Finish   buttons to reflect the state of the currently active   page in this container.  <p>  This method is called by the container itself  when its wizard page changes and may be called  by the page at other times to force a button state  update.  </p> ',directive
' Adjusts the enable state of the Back, Next, and Finish   buttons to reflect the state of the currently active   page in this container.  ',non-directive
'<p>  This method is called by the container itself  when its wizard page changes and may be called  by the page at other times to force a button state  update.  ',directive
'</p> ',non-directive
' Updates the message (or error message) shown in the message line to   reflect the state of the currently active page in this container.  <p>  This method is called by the container itself  when its wizard page changes and may be called  by the page at other times to force a message   update.  </p> ',directive
' Updates the message (or error message) shown in the message line to   reflect the state of the currently active page in this container.  ',non-directive
'<p>  This method is called by the container itself  when its wizard page changes and may be called  by the page at other times to force a message   update.  ',directive
'</p> ',non-directive
' Updates the title bar (title, description, and image) to   reflect the state of the currently active page in this container.  <p>  This method is called by the container itself  when its wizard page changes and may be called  by the page at other times to force a title bar   update.  </p> ',directive
' Updates the title bar (title, description, and image) to   reflect the state of the currently active page in this container.  ',non-directive
'<p>  This method is called by the container itself  when its wizard page changes and may be called  by the page at other times to force a title bar   update.  ',directive
'</p> ',non-directive
' Updates the window title to reflect the state of the current wizard.  <p>  This method is called by the container itself  when its wizard changes and may be called  by the wizard at other times to force a window   title change.  </p> ',directive
' Updates the window title to reflect the state of the current wizard.  ',non-directive
'<p>  This method is called by the container itself  when its wizard changes and may be called  by the wizard at other times to force a window   title change.  ',directive
'</p> ',non-directive
' The Back button has been pressed. ',non-directive
' The Back button has been pressed. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates the buttons for this dialog\'s button bar.  <p>  The <code>_ClassElement_</code> implementation of this framework method  prevents the parent composite\'s columns from being made equal width in  order to remove the margin between the Back and Next buttons.  </p>    @param parent             the parent composite to contain the buttons ',directive
' Creates the buttons for this dialog\'s button bar.  ',non-directive
'<p>  The <code>_ClassElement_</code> implementation of this framework method  prevents the parent composite\'s columns from being made equal width in  order to remove the margin between the Back and Next buttons.  ',directive
'</p>    ',non-directive
'@param parent             the parent composite to contain the buttons ',non-directive
?,non-directive
?,non-directive
' Return the cancel button if the id is a the cancel id.    @param id             the button id  @return the button corresponding to the button id ',non-directive
' Return the cancel button if the id is a the cancel id.   ',non-directive
?,non-directive
'@param id             the button id  ',non-directive
'@return the button corresponding to the button id ',non-directive
' The <code>_ClassElement_</code> implementation of this  <code>Window</code> method calls call <code>_ClassPathElement_</code>  to allow the current wizard to add extra pages, then  <code>_ClassPathElement_</code> to create the controls. It then calls  <code>_ClassPathElement_</code> to allow the wizard to  pre-create their page controls prior to opening, so that the wizard opens  to the correct size. And finally it shows the first page. ',directive
' The <code>_ClassElement_</code> implementation of this  <code>Window</code> method calls call <code>_ClassPathElement_</code>  to allow the current wizard to add extra pages, then  <code>_ClassPathElement_</code> to create the controls. ',directive
'It then calls  <code>_ClassPathElement_</code> to allow the wizard to  pre-create their page controls prior to opening, so that the wizard opens  to the correct size. ',directive
'And finally it shows the first page. ',non-directive
?,non-directive
?,non-directive
' Create the progress monitor part in the receiver.    @param composite  @param pmlayout  @return _ClassElement_ ',non-directive
' Create the progress monitor part in the receiver.   ',non-directive
?,non-directive
'@param composite  ',non-directive
'@param pmlayout  ',non-directive
'@return _ClassElement_ ',non-directive
' The Finish button has been pressed. ',non-directive
' The Finish button has been pressed. ',non-directive
?,non-directive
?,non-directive
' Returns the progress monitor for this wizard dialog (if it has one).    @return the progress monitor, or <code>null</code> if this wizard          dialog does not have one ',non-directive
' Returns the progress monitor for this wizard dialog (if it has one).   ',non-directive
?,non-directive
'@return the progress monitor, or <code>null</code> if this wizard          dialog does not have one ',directive
' Returns the wizard this dialog is currently displaying.    @return the current wizard ',non-directive
' Returns the wizard this dialog is currently displaying.   ',non-directive
?,non-directive
'@return the current wizard ',non-directive
' The Help button has been pressed. ',non-directive
' The Help button has been pressed. ',non-directive
' The Next button has been pressed. ',non-directive
' The Next button has been pressed. ',non-directive
' Sets the minimum page size used for the pages.    @param _ClassElement_             the minimum page width  @param _ClassElement_             the minimum page height  @see #_ClassElement_(Point) ',non-directive
' Sets the minimum page size used for the pages.   ',non-directive
?,non-directive
'@param _ClassElement_             the minimum page width  ',non-directive
'@param _ClassElement_             the minimum page height  ',non-directive
'@see #_ClassElement_(Point) ',non-directive
' Sets the minimum page size used for the pages.    @param size             the page size encoded as <code>new Point(width,height)</code>  @see #_ClassElement_(int,int) ',non-directive
' Sets the minimum page size used for the pages.   ',non-directive
?,non-directive
'@param size             the page size encoded as <code>new Point(width,height)</code>  ',non-directive
'@see #_ClassElement_(int,int) ',non-directive
' Sets the size of all pages. The given size takes precedence over computed  sizes.    @param width             the page width  @param height             the page height  @see #_ClassElement_(Point) ',non-directive
' Sets the size of all pages. ',non-directive
'The given size takes precedence over computed  sizes.   ',directive
?,non-directive
'@param width             the page width  ',non-directive
'@param height             the page height  ',non-directive
'@see #_ClassElement_(Point) ',non-directive
' Sets the size of all pages. The given size takes precedence over computed  sizes.    @param size             the page size encoded as <code>new Point(width,height)</code>  @see #_ClassElement_(int,int) ',non-directive
' Sets the size of all pages. ',non-directive
'The given size takes precedence over computed  sizes.   ',directive
?,non-directive
'@param size             the page size encoded as <code>new Point(width,height)</code>  ',non-directive
'@see #_ClassElement_(int,int) ',non-directive
' Sets the wizard this dialog is currently displaying.    @param _ClassElement_             the wizard ',non-directive
' Sets the wizard this dialog is currently displaying.   ',non-directive
?,non-directive
'@param _ClassElement_             the wizard ',non-directive
?,non-directive
?,non-directive
' Updates this dialog\'s controls to reflect the current page. ',non-directive
' Updates this dialog\'s controls to reflect the current page. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Computes the correct dialog size for the current page and resizes its  shell if nessessary. Also causes the container to refresh its layout.    @param page             the wizard page to use to resize the dialog  @since _ClassPathElement_ ',non-directive
' Computes the correct dialog size for the current page and resizes its  shell if nessessary. ',directive
'Also causes the container to refresh its layout.   ',directive
?,non-directive
'@param page             the wizard page to use to resize the dialog  ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Notifies any selection changed listeners that the selected page has  changed. Only listeners registered at the time this method is called are  notified.    @param event             a selection changed event    @see IPageChangedListener#_ClassElement_    @since _ClassPathElement_ ',directive
' Notifies any selection changed listeners that the selected page has  changed. ',non-directive
'Only listeners registered at the time this method is called are  notified.   ',directive
?,non-directive
'@param event             a selection changed event    ',non-directive
'@see IPageChangedListener#_ClassElement_    ',non-directive
'@since _ClassPathElement_ ',non-directive
' Adds a listener for page changes to the list of page changing listeners  registered for this dialog. Has no effect if an identical listener is  already registered.    @param listener             a page changing listener  @since _ClassPathElement_ ',non-directive
' Adds a listener for page changes to the list of page changing listeners  registered for this dialog. ',non-directive
'Has no effect if an identical listener is  already registered.   ',directive
?,non-directive
'@param listener             a page changing listener  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Removes the provided page changing listener from the list of page  changing listeners registered for the dialog.    @param listener             a page changing listener  @since _ClassPathElement_ ',non-directive
' Removes the provided page changing listener from the list of page  changing listeners registered for the dialog.   ',non-directive
?,non-directive
'@param listener             a page changing listener  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Notifies any page changing listeners that the currently selected dialog  page is changing. Only listeners registered at the time this method is  called are notified.    @param event             a selection changing event    @see IPageChangingListener#_ClassElement_(_ClassElement_)  @since _ClassPathElement_ ',directive
' Notifies any page changing listeners that the currently selected dialog  page is changing. ',non-directive
'Only listeners registered at the time this method is  called are notified.   ',directive
?,non-directive
'@param event             a selection changing event    ',non-directive
'@see IPageChangingListener#_ClassElement_(_ClassElement_)  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a new wizard dialog for the given wizard.    @param _ClassElement_             the parent shell  @param _ClassElement_             the wizard this dialog is working on ',non-directive
' Creates a new wizard dialog for the given wizard.   ',non-directive
?,non-directive
'@param _ClassElement_             the parent shell  ',non-directive
'@param _ClassElement_             the wizard this dialog is working on ',non-directive
' Image registry key for error message image (value  <code>\"dialog_title_error_image\"</code>). ',directive
' Image registry key for error message image (value  <code>\"dialog_title_error_image\"</code>). ',non-directive
' A layout for a container which includes several pages, like a notebook,  wizard, or preference dialog. The size computed by this layout is the  maximum width and height of all pages currently inserted into the  container. ',directive
' A layout for a container which includes several pages, like a notebook,  wizard, or preference dialog. ',non-directive
'The size computed by this layout is the  maximum width and height of all pages currently inserted into the  container. ',directive
?,non-directive
?,non-directive
' Returns the client area for the given composite according to this  layout.    @param c             the composite  @return the client area rectangle ',non-directive
' Returns the client area for the given composite according to this  layout.   ',non-directive
?,non-directive
'@param c             the composite  ',non-directive
'@return the client area rectangle ',non-directive
?,non-directive
?,non-directive
' Lays outs the page according to this layout.    @param w             the control ',non-directive
' Lays outs the page according to this layout.   ',non-directive
?,non-directive
'@param w             the control ',non-directive
' Sets the location of the page so that its origin is in the upper left  corner.    @param w             the control ',non-directive
' Sets the location of the page so that its origin is in the upper left  corner.   ',non-directive
?,non-directive
'@param w             the control ',non-directive
' Creates new layout object.    @param mw             the margin width  @param mh             the margin height  @param minW             the minimum width  @param minH             the minimum height ',non-directive
' Creates new layout object.   ',non-directive
?,non-directive
'@param mw             the margin width  ',non-directive
'@param mh             the margin height  ',non-directive
'@param minW             the minimum width  ',non-directive
'@param minH             the minimum height ',non-directive
' The margin width; <code>5</code> pixels by default. ',non-directive
' The margin width; <code>5</code> pixels by default. ',non-directive
' The margin height; <code>5</code> pixels by default. ',non-directive
' The margin height; <code>5</code> pixels by default. ',non-directive
' The minimum width; <code>0</code> pixels by default. ',non-directive
' The minimum width; <code>0</code> pixels by default. ',non-directive
' The minimum height; <code>0</code> pixels by default. ',non-directive
' The minimum height; <code>0</code> pixels by default. ',non-directive
' Disposes the wizard managed by this node. Does nothing  if the wizard has not been created.  <p>  This is the last message that should ever be sent to this node.  </p> ',directive
' Disposes the wizard managed by this node. ',non-directive
'Does nothing  if the wizard has not been created.  ',directive
'<p>  This is the last message that should ever be sent to this node.  ',directive
'</p> ',non-directive
' Returns the extent of the wizard for this node.  <p>  If the content has not yet been created, calling this method  does not trigger the creation of the wizard. This allows  this node to suggest an extent in advance of actually creating   the wizard.  </p>   @return the extent, or <code>(-1, -1)</code> extent is not known ',directive
' Returns the extent of the wizard for this node.  ',non-directive
'<p>  If the content has not yet been created, calling this method  does not trigger the creation of the wizard. ',directive
'This allows  this node to suggest an extent in advance of actually creating   the wizard.  ',directive
'</p>   ',non-directive
'@return the extent, or <code>(-1, -1)</code> extent is not known ',directive
' Returns the wizard this node stands for.  <p>  If the content has not been created beforehand, calling this  method triggers the creation of the wizard and caches it so that  the identical wizard object is returned on subsequent calls.  </p>   @return the wizard ',directive
' Returns the wizard this node stands for.  ',non-directive
'<p>  If the content has not been created beforehand, calling this  method triggers the creation of the wizard and caches it so that  the identical wizard object is returned on subsequent calls.  ',directive
'</p>   ',non-directive
'@return the wizard ',non-directive
' Returns whether a wizard has been created for this node.   @return <code>true</code> if a wizard has been created,    and <code>false</code> otherwise ',non-directive
' Returns whether a wizard has been created for this node.   ',non-directive
'@return <code>true</code> if a wizard has been created,    and <code>false</code> otherwise ',non-directive
' An abstract implementation of a wizard page that manages a  set of embedded wizards.  <p>  A wizard selection page should present a list of wizard nodes   corresponding to other wizards. When the end user selects one of  them from the list, the first page of the selected wizard becomes  the next page. The only new methods introduced by this class are   <code>_ClassElement_</code> and <code>_ClassElement_</code>.   Otherwise, the subclass contract is the same as <code>_ClassElement_</code>.  </p> ',directive
' An abstract implementation of a wizard page that manages a  set of embedded wizards.  ',non-directive
'<p>  A wizard selection page should present a list of wizard nodes   corresponding to other wizards. ',directive
'When the end user selects one of  them from the list, the first page of the selected wizard becomes  the next page. ',directive
'The only new methods introduced by this class are   <code>_ClassElement_</code> and <code>_ClassElement_</code>.   ',directive
'Otherwise, the subclass contract is the same as <code>_ClassElement_</code>.  ',directive
'</p> ',non-directive
' The <code>_ClassElement_</code> implementation of   this <code>IWizardPage</code> method returns <code>true</code>  if there is a selected node. ',non-directive
' The <code>_ClassElement_</code> implementation of   this <code>IWizardPage</code> method returns <code>true</code>  if there is a selected node. ',non-directive
' The <code>_ClassElement_</code> implementation of   this <code>IWizardPage</code> method returns the first page   of the currently selected wizard if there is one. ',non-directive
' The <code>_ClassElement_</code> implementation of   this <code>IWizardPage</code> method returns the first page   of the currently selected wizard if there is one. ',non-directive
' Returns the currently selected wizard node within this page.    @return the wizard node, or <code>null</code> if no node is selected ',non-directive
' Returns the currently selected wizard node within this page.   ',non-directive
?,non-directive
'@return the wizard node, or <code>null</code> if no node is selected ',directive
' Sets or clears the currently selected wizard node within this page.     @param node the wizard node, or <code>null</code> to clear ',non-directive
' Sets or clears the currently selected wizard node within this page.    ',non-directive
?,non-directive
'@param node the wizard node, or <code>null</code> to clear ',directive
' Creates a new wizard selection page with the given name, and  with no title or image.   @param _ClassElement_ the name of the page ',non-directive
' Creates a new wizard selection page with the given name, and  with no title or image.   ',non-directive
'@param _ClassElement_ the name of the page ',non-directive
' A standard implementation of an IProgressMonitor. It consists  of a label displaying the task and subtask name, and a  progress indicator to show progress. In contrast to  <code>_ClassElement_</code> this class only implements  <code>IProgressMonitor</code>. ',directive
' A standard implementation of an IProgressMonitor. ',non-directive
'It consists  of a label displaying the task and subtask name, and a  progress indicator to show progress. ',non-directive
'In contrast to  <code>_ClassElement_</code> this class only implements  <code>IProgressMonitor</code>. ',directive
' Attaches the progress monitor part to the given cancel  component.  @param _ClassElement_ the control whose selection will  trigger a cancel ',non-directive
' Attaches the progress monitor part to the given cancel  component.  ',non-directive
'@param _ClassElement_ the control whose selection will  trigger a cancel ',non-directive
' Implements <code>_ClassPathElement_</code>.  @see IProgressMonitor#_ClassElement_(_ClassPathElement_, int) ',non-directive
' Implements <code>_ClassPathElement_</code>.  ',non-directive
'@see IProgressMonitor#_ClassElement_(_ClassPathElement_, int) ',non-directive
' Implements <code>_ClassPathElement_</code>.  @see IProgressMonitor#done() ',non-directive
' Implements <code>_ClassPathElement_</code>.  ',non-directive
'@see IProgressMonitor#done() ',non-directive
' Escapes any occurrence of \'&\' in the given String so that  it is not considered as a mnemonic  character in SWT _ClassElement_, _ClassElement_, Button and Labels.  @param in the original String  @return The converted String ',non-directive
' Escapes any occurrence of \'&\' in the given String so that  it is not considered as a mnemonic  character in SWT _ClassElement_, _ClassElement_, Button and Labels.  ',non-directive
'@param in the original String  ',non-directive
'@return The converted String ',non-directive
' Creates the progress monitor\'s UI parts and layouts them  according to the given layout. If the layout is <code>null</code>  the part\'s default layout is used.  @param layout The layout for the receiver.  @param _ClassElement_ The suggested height of the indicator ',non-directive
' Creates the progress monitor\'s UI parts and layouts them  according to the given layout. ',non-directive
'If the layout is <code>null</code>  the part\'s default layout is used.  ',directive
'@param layout The layout for the receiver.  ',non-directive
'@param _ClassElement_ The suggested height of the indicator ',non-directive
' Implements <code>_ClassPathElement_</code>.  @see IProgressMonitor#_ClassElement_(double) ',non-directive
' Implements <code>_ClassPathElement_</code>.  ',non-directive
'@see IProgressMonitor#_ClassElement_(double) ',non-directive
' Implements <code>_ClassPathElement_</code>.  @see IProgressMonitor#_ClassElement_() ',non-directive
' Implements <code>_ClassPathElement_</code>.  ',non-directive
'@see IProgressMonitor#_ClassElement_() ',non-directive
' Detach the progress monitor part from the given cancel  component  @param cc ',non-directive
' Detach the progress monitor part from the given cancel  component  ',non-directive
'@param cc ',non-directive
' Implements <code>_ClassPathElement_</code>.  @see IProgressMonitor#_ClassElement_(boolean) ',non-directive
' Implements <code>_ClassPathElement_</code>.  ',non-directive
'@see IProgressMonitor#_ClassElement_(boolean) ',non-directive
' Sets the progress monitor part\'s font. ',non-directive
' Sets the progress monitor part\'s font. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Updates the label with the current task and subtask names. ',non-directive
' Updates the label with the current task and subtask names. ',non-directive
' Implements <code>_ClassPathElement_</code>.  @see IProgressMonitor#worked(int) ',non-directive
' Implements <code>_ClassPathElement_</code>.  ',non-directive
'@see IProgressMonitor#worked(int) ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a _ClassElement_.  @param parent The SWT parent of the part.  @param layout The SWT grid bag layout used by the part. A client  can supply the layout to control how the progress monitor part  is layed out. If null is passed the part uses its default layout. ',non-directive
' Creates a _ClassElement_.  ',non-directive
'@param parent The SWT parent of the part.  ',non-directive
'@param layout The SWT grid bag layout used by the part. ',non-directive
'A client  can supply the layout to control how the progress monitor part  is layed out. ',non-directive
'If null is passed the part uses its default layout. ',directive
' Creates a _ClassElement_.  @param parent The SWT parent of the part.  @param layout The SWT grid bag layout used by the part. A client  can supply the layout to control how the progress monitor part  is layed out. If null is passed the part uses its default layout.  @param _ClassElement_ The height of the progress indicator in pixel. ',non-directive
' Creates a _ClassElement_.  ',non-directive
'@param parent The SWT parent of the part.  ',non-directive
'@param layout The SWT grid bag layout used by the part. ',non-directive
'A client  can supply the layout to control how the progress monitor part  is layed out. ',non-directive
'If null is passed the part uses its default layout.  ',directive
'@param _ClassElement_ The height of the progress indicator in pixel. ',non-directive
'the label ',non-directive
'the label ',non-directive
'the current task name ',non-directive
'the current task name ',non-directive
'the current sub task name ',non-directive
'the current sub task name ',non-directive
'the progress indicator ',non-directive
'the progress indicator ',non-directive
'the cancel component ',non-directive
'the cancel component ',non-directive
'true if canceled ',non-directive
'true if canceled ',non-directive
'current blocked status ',non-directive
'current blocked status ',non-directive
'the cancel lister attached to the cancel component ',non-directive
'the cancel lister attached to the cancel component ',non-directive
' Interface for a wizard page.  <p>  The class <code>_ClassElement_</code> provides an abstract implementation  of this interface. However, clients are also free to implement this   interface if <code>_ClassElement_</code> does not suit their needs.  </p> ',non-directive
' Interface for a wizard page.  ',non-directive
'<p>  The class <code>_ClassElement_</code> provides an abstract implementation  of this interface. ',directive
'However, clients are also free to implement this   interface if <code>_ClassElement_</code> does not suit their needs.  ',directive
'</p> ',non-directive
' Returns whether the next page could be displayed.   @return <code>true</code> if the next page could be displayed,    and <code>false</code> otherwise ',non-directive
' Returns whether the next page could be displayed.   ',non-directive
'@return <code>true</code> if the next page could be displayed,    and <code>false</code> otherwise ',non-directive
' Returns this page\'s name.   @return the name of this page ',non-directive
' Returns this page\'s name.   ',non-directive
'@return the name of this page ',non-directive
' Returns the wizard page that would to be shown if the user was to  press the Next button.   @return the next wizard page, or <code>null</code> if none ',non-directive
' Returns the wizard page that would to be shown if the user was to  press the Next button.   ',non-directive
'@return the next wizard page, or <code>null</code> if none ',directive
' Returns the wizard page that would to be shown if the user was to  press the Back button.   @return the previous wizard page, or <code>null</code> if none ',non-directive
' Returns the wizard page that would to be shown if the user was to  press the Back button.   ',non-directive
'@return the previous wizard page, or <code>null</code> if none ',directive
' Returns the wizard that hosts this wizard page.   @return the wizard, or <code>null</code> if this page has not been    added to any wizard  @see #_ClassElement_ ',non-directive
' Returns the wizard that hosts this wizard page.   ',non-directive
'@return the wizard, or <code>null</code> if this page has not been    added to any wizard  ',directive
'@see #_ClassElement_ ',non-directive
' Returns whether this page is complete or not.  <p>  This information is typically used by the wizard to decide  when it is okay to finish.  </p>   @return <code>true</code> if this page is complete, and   <code>false</code> otherwise ',non-directive
' Returns whether this page is complete or not.  ',non-directive
'<p>  This information is typically used by the wizard to decide  when it is okay to finish.  ',non-directive
'</p>   ',non-directive
'@return <code>true</code> if this page is complete, and   <code>false</code> otherwise ',non-directive
' Sets the wizard page that would typically be shown   if the user was to press the Back button.  <p>  This method is called by the container.  </p>   @param page the previous wizard page ',directive
' Sets the wizard page that would typically be shown   if the user was to press the Back button.  ',non-directive
'<p>  This method is called by the container.  ',directive
'</p>   ',non-directive
'@param page the previous wizard page ',non-directive
' Adds a new page to this wizard. The page is inserted at the end of the  page list.    @param page             the new page ',non-directive
' Adds a new page to this wizard. ',non-directive
'The page is inserted at the end of the  page list.   ',directive
?,non-directive
'@param page             the new page ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns the wizard\'s shell if the wizard is visible. Otherwise  <code>null</code> is returned.    @return Shell ',non-directive
' Returns the wizard\'s shell if the wizard is visible. ',non-directive
'Otherwise  <code>null</code> is returned.   ',directive
?,non-directive
'@return Shell ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Sets the default page image descriptor for this wizard.  <p>  This image descriptor will be used to generate an image for a page with  no image of its own; the image will be computed once and cached.  </p>    @param _ClassElement_             the default page image descriptor ',directive
' Sets the default page image descriptor for this wizard.  ',non-directive
'<p>  This image descriptor will be used to generate an image for a page with  no image of its own; the image will be computed once and cached.  ',directive
'</p>    ',non-directive
'@param _ClassElement_             the default page image descriptor ',non-directive
' Sets the dialog settings for this wizard.  <p>  The dialog settings is used to record state between wizard invocations  (for example, radio button selection, last import directory, etc.)  </p>    @param settings             the dialog settings, or <code>null</code> if none  @see #_ClassElement_    ',directive
' Sets the dialog settings for this wizard.  ',non-directive
'<p>  The dialog settings is used to record state between wizard invocations  (for example, radio button selection, last import directory, etc.)  </p>    ',non-directive
'@param settings             the dialog settings, or <code>null</code> if none  ',directive
'@see #_ClassElement_    ',non-directive
' Controls whether the wizard needs Previous and Next buttons even if it  currently contains only one page.  <p>  This flag should be set on wizards where the first wizard page adds  follow-on wizard pages based on user input.  </p>    @param b             <code>true</code> to always show Next and Previous buttons,             and <code>false</code> to suppress Next and Previous buttons             for single page wizards ',directive
' Controls whether the wizard needs Previous and Next buttons even if it  currently contains only one page.  ',non-directive
'<p>  This flag should be set on wizards where the first wizard page adds  follow-on wizard pages based on user input.  ',directive
'</p>    ',non-directive
'@param b             <code>true</code> to always show Next and Previous buttons,             and <code>false</code> to suppress Next and Previous buttons             for single page wizards ',non-directive
' Sets whether help is available for this wizard.  <p>  The result of this method is typically used by the container to show or  hide the Help button.  </p>    @param b             <code>true</code> if help is available, and             <code>false</code> if this wizard is helpless  @see #_ClassElement_() ',non-directive
' Sets whether help is available for this wizard.  ',non-directive
'<p>  The result of this method is typically used by the container to show or  hide the Help button.  ',directive
'</p>    ',non-directive
'@param b             <code>true</code> if help is available, and             <code>false</code> if this wizard is helpless  ',non-directive
'@see #_ClassElement_() ',non-directive
' Sets whether this wizard needs a progress monitor.    @param b             <code>true</code> if a progress monitor is required, and             <code>false</code> if none is needed  @see #_ClassElement_() ',directive
' Sets whether this wizard needs a progress monitor.   ',non-directive
?,non-directive
'@param b             <code>true</code> if a progress monitor is required, and             <code>false</code> if none is needed  ',non-directive
'@see #_ClassElement_() ',non-directive
' Sets the title bar color for this wizard.    @param color             the title bar color ',non-directive
' Sets the title bar color for this wizard.   ',non-directive
?,non-directive
'@param color             the title bar color ',non-directive
' Sets the window title for the container that hosts this page to the given  string.    @param _ClassElement_             the window title for the container ',non-directive
' Sets the window title for the container that hosts this page to the given  string.   ',non-directive
?,non-directive
'@param _ClassElement_             the window title for the container ',non-directive
' Creates a new empty wizard. ',non-directive
' Creates a new empty wizard. ',non-directive
' Image registry key of the default image for wizard pages (value  <code>\"_ClassPathElement_\"</code>). ',non-directive
' Image registry key of the default image for wizard pages (value  <code>\"_ClassPathElement_\"</code>). ',non-directive
' Returns the wizard container for this wizard page.   @return the wizard container, or <code>null</code> if this    wizard page has yet to be added to a wizard, or the    wizard has yet to be added to a container ',non-directive
' Returns the wizard container for this wizard page.   ',non-directive
'@return the wizard container, or <code>null</code> if this    wizard page has yet to be added to a wizard, or the    wizard has yet to be added to a container ',directive
' Returns the dialog settings for this wizard page.   @return the dialog settings, or <code>null</code> if none ',non-directive
' Returns the dialog settings for this wizard page.   ',non-directive
'@return the dialog settings, or <code>null</code> if none ',directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' The <code>_ClassElement_</code> implementation of this method declared on  <code>_ClassElement_</code> returns the shell of the container.  The advantage of this implementation is that the shell is accessable  once the container is created even though this page\'s control may not   yet be created. ',directive
' The <code>_ClassElement_</code> implementation of this method declared on  <code>_ClassElement_</code> returns the shell of the container.  ',non-directive
'The advantage of this implementation is that the shell is accessable  once the container is created even though this page\'s control may not   yet be created. ',directive
?,non-directive
?,non-directive
' Returns whether this page is the current one in the wizard\'s container.   @return <code>true</code> if the page is active,   and <code>false</code> otherwise ',non-directive
' Returns whether this page is the current one in the wizard\'s container.   ',non-directive
'@return <code>true</code> if the page is active,   and <code>false</code> otherwise ',non-directive
' The <code>_ClassElement_</code> implementation of this method   declared on <code>_ClassElement_</code> updates the container  if this is the current page. ',non-directive
' The <code>_ClassElement_</code> implementation of this method   declared on <code>_ClassElement_</code> updates the container  if this is the current page. ',non-directive
' The <code>_ClassElement_</code> implementation of this method   declared on <code>_ClassElement_</code> updates the container  if this page is the current page. ',non-directive
' The <code>_ClassElement_</code> implementation of this method   declared on <code>_ClassElement_</code> updates the container  if this page is the current page. ',non-directive
' The <code>_ClassElement_</code> implementation of this method   declared on <code>_ClassElement_</code> updates the container  if this is the current page. ',non-directive
' The <code>_ClassElement_</code> implementation of this method   declared on <code>_ClassElement_</code> updates the container  if this is the current page. ',non-directive
' Sets whether this page is complete.   <p>  This information is typically used by the wizard to decide  when it is okay to move on to the next page or finish up.  </p>   @param complete <code>true</code> if this page is complete, and    and <code>false</code> otherwise  @see #_ClassElement_() ',non-directive
' Sets whether this page is complete.   ',non-directive
'<p>  This information is typically used by the wizard to decide  when it is okay to move on to the next page or finish up.  ',directive
'</p>   ',non-directive
'@param complete <code>true</code> if this page is complete, and    and <code>false</code> otherwise  ',non-directive
'@see #_ClassElement_() ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a new wizard page with the given name, and  with no title or image.   @param _ClassElement_ the name of the page ',non-directive
' Creates a new wizard page with the given name, and  with no title or image.   ',non-directive
'@param _ClassElement_ the name of the page ',non-directive
' Creates a new wizard page with the given name, title, and image.   @param _ClassElement_ the name of the page  @param title the title for this wizard page,    or <code>null</code> if none  @param _ClassElement_ the image descriptor for the title of this wizard page,    or <code>null</code> if none ',non-directive
' Creates a new wizard page with the given name, title, and image.   ',non-directive
'@param _ClassElement_ the name of the page  ',non-directive
'@param title the title for this wizard page,    or <code>null</code> if none  ',directive
'@param _ClassElement_ the image descriptor for the title of this wizard page,    or <code>null</code> if none ',directive
' Processes {@link ITextSelection}s.    @since _ClassPathElement_ ',non-directive
' Processes {',non-directive
'@link ITextSelection}s.   ',non-directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Returns a text edit describing the text modification that would be executed if the delete key  was pressed on the given selection.    @param selection the selection to delete  @return a text edit describing the operation needed to delete <code>selection</code>  @throws _ClassElement_ if computing the edit failed ',non-directive
' Returns a text edit describing the text modification that would be executed if the delete key  was pressed on the given selection.   ',non-directive
?,non-directive
'@param selection the selection to delete  ',non-directive
'@return a text edit describing the operation needed to delete <code>selection</code>  ',non-directive
'@throws _ClassElement_ if computing the edit failed ',non-directive
' Returns a text edit describing the text modification that would be executed if the backspace  key was pressed on the given selection.    @param selection the selection to delete  @return a text edit describing the operation needed to delete <code>selection</code>  @throws _ClassElement_ if computing the edit failed ',non-directive
' Returns a text edit describing the text modification that would be executed if the backspace  key was pressed on the given selection.   ',non-directive
?,non-directive
'@param selection the selection to delete  ',non-directive
'@return a text edit describing the operation needed to delete <code>selection</code>  ',non-directive
'@throws _ClassElement_ if computing the edit failed ',non-directive
' Returns a text edit describing the text modification that would be executed if the given  selection was replaced by <code>replacement</code>.    @param selection the selection to replace  @param replacement the replacement text  @return a text edit describing the operation needed to replace <code>selection</code>  @throws _ClassElement_ if computing the edit failed ',non-directive
' Returns a text edit describing the text modification that would be executed if the given  selection was replaced by <code>replacement</code>.   ',non-directive
?,non-directive
'@param selection the selection to replace  ',non-directive
'@param replacement the replacement text  ',non-directive
'@return a text edit describing the operation needed to replace <code>selection</code>  ',non-directive
'@throws _ClassElement_ if computing the edit failed ',non-directive
' Returns the text covered by <code>selection</code>    @param selection the selection  @return the text covered by <code>selection</code>  @throws _ClassElement_ if computing the edit failed ',non-directive
' Returns the text covered by <code>selection</code>    ',non-directive
'@param selection the selection  ',non-directive
'@return the text covered by <code>selection</code>  ',non-directive
'@throws _ClassElement_ if computing the edit failed ',non-directive
' Returns <code>true</code> if the text covered by <code>selection</code> does not contain any  characters. Note the difference to {@link ITextSelection#_ClassElement_()}, which returns  <code>true</code> only for invalid selections.    @param selection the selection  @return <code>true</code> if <code>selection</code> does not contain any text,          <code>false</code> otherwise  @throws _ClassElement_ if accessing the document failed ',directive
' Returns <code>true</code> if the text covered by <code>selection</code> does not contain any  characters. ',non-directive
'Note the difference to {',directive
'@link ITextSelection#_ClassElement_()}, which returns  <code>true</code> only for invalid selections.   ',directive
?,non-directive
'@param selection the selection  ',non-directive
'@return <code>true</code> if <code>selection</code> does not contain any text,          <code>false</code> otherwise  ',non-directive
'@throws _ClassElement_ if accessing the document failed ',non-directive
' Returns <code>true</code> if <code>selection</code> extends to two or more lines,  <code>false</code> otherwise.    @param selection the selection  @return <code>true</code> if <code>selection</code> extends to two or more lines,          <code>false</code> otherwise  @throws _ClassElement_ if <code>selection</code> is not valid regarding the target              document ',directive
' Returns <code>true</code> if <code>selection</code> extends to two or more lines,  <code>false</code> otherwise.   ',non-directive
?,non-directive
'@param selection the selection  ',non-directive
'@return <code>true</code> if <code>selection</code> extends to two or more lines,          <code>false</code> otherwise  ',non-directive
'@throws _ClassElement_ if <code>selection</code> is not valid regarding the target              document ',directive
' Returns a selection similar to <code>selection</code> but {@linkplain #_ClassElement_(ISelection)  empty}. Typically, the selection is reduced to its extreme offsets.    @param selection the selection  @param beginning <code>true</code> to collapse the selection to its smallest position (_ClassPathElement_.             its left-most offset), <code>false</code> to collapse it to its greatest position             (_ClassPathElement_ its right-most offset)  @return an empty variant of <code>selection</code>  @throws _ClassElement_ if accessing the document failed ',non-directive
' Returns a selection similar to <code>selection</code> but {',non-directive
'@linkplain #_ClassElement_(ISelection)  empty}. ',non-directive
'Typically, the selection is reduced to its extreme offsets.   ',directive
?,non-directive
'@param selection the selection  ',non-directive
'@param beginning <code>true</code> to collapse the selection to its smallest position (_ClassPathElement_.             ',non-directive
'its left-most offset), <code>false</code> to collapse it to its greatest position             (_ClassPathElement_ its right-most offset)  ',non-directive
'@return an empty variant of <code>selection</code>  ',non-directive
'@throws _ClassElement_ if accessing the document failed ',non-directive
' Convenience method that applies the edit returned from {@link #delete(ISelection)} to the  underlying document.    @param selection the selection to delete  @throws _ClassElement_ if accessing the document failed ',non-directive
' Convenience method that applies the edit returned from {',non-directive
'@link #delete(ISelection)} to the  underlying document.   ',non-directive
?,non-directive
'@param selection the selection to delete  ',non-directive
'@throws _ClassElement_ if accessing the document failed ',non-directive
' Convenience method that applies the edit returned from {@link #replace(ISelection, String)}  to the underlying document and adapts the selection accordingly.    @param selection the selection to replace  @param replacement the replacement text  @throws _ClassElement_ if accessing the document failed ',non-directive
' Convenience method that applies the edit returned from {',non-directive
'@link #replace(ISelection, String)}  to the underlying document and adapts the selection accordingly.   ',non-directive
?,non-directive
'@param selection the selection to replace  ',non-directive
'@param replacement the replacement text  ',non-directive
'@throws _ClassElement_ if accessing the document failed ',non-directive
' Returns the text regions covered by the given selection.    @param selection the selection  @return the text regions corresponding to <code>selection</code>  @throws _ClassElement_ if accessing the document failed ',non-directive
' Returns the text regions covered by the given selection.   ',non-directive
?,non-directive
'@param selection the selection  ',non-directive
'@return the text regions corresponding to <code>selection</code>  ',non-directive
'@throws _ClassElement_ if accessing the document failed ',non-directive
' Returns the number of lines touched by <code>selection</code>. Note that for linear  selections, this is the number of contained delimiters plus 1.    @param selection the selection  @return the number of lines touched by <code>selection</code>  @throws _ClassElement_ if accessing the document failed ',directive
' Returns the number of lines touched by <code>selection</code>. ',non-directive
'Note that for linear  selections, this is the number of contained delimiters plus 1.   ',directive
?,non-directive
'@param selection the selection  ',non-directive
'@return the number of lines touched by <code>selection</code>  ',non-directive
'@throws _ClassElement_ if accessing the document failed ',non-directive
' Creates a new processor on the given viewer.    @param viewer the viewer ',non-directive
' Creates a new processor on the given viewer.   ',non-directive
?,non-directive
'@param viewer the viewer ',non-directive
' Workaround for _OSPathElement_/_ClassPathElement_?id=23980 : Shells without borders are  not resizable on GTK.    @since _ClassPathElement_ ',non-directive
' Workaround for _OSPathElement_/_ClassPathElement_?id=23980 : Shells without borders are  not resizable on GTK.   ',directive
?,non-directive
'@since _ClassPathElement_ ',non-directive
' Makes the given shell resizable on all platforms. The shell must have a {@link _ClassElement_}.  If the shell is not resizable, this method enlarges the {@link _ClassElement_#_ClassElement_  _ClassElement_} and {@link _ClassElement_#_ClassElement_ _ClassElement_} and expects that the added area  is not being shrunken or used in any way by other parties.    @param shell the shell ',directive
' Makes the given shell resizable on all platforms. ',non-directive
'The shell must have a {',directive
'@link _ClassElement_}.  ',directive
'If the shell is not resizable, this method enlarges the {',directive
'@link _ClassElement_#_ClassElement_  _ClassElement_} and {',directive
'@link _ClassElement_#_ClassElement_ _ClassElement_} and expects that the added area  is not being shrunken or used in any way by other parties.   ',directive
?,non-directive
'@param shell the shell ',non-directive
?,non-directive
?,non-directive
' A position updater that never deletes a position. If the region containing  the position is deleted, the position is moved to the _OSPathElement_end (falling  together) of the change. If the region containing the position is replaced,  the position is placed at the same location inside the replacement text, but  always inside the replacement text.   @since _ClassPathElement_ ',directive
' A position updater that never deletes a position. ',non-directive
'If the region containing  the position is deleted, the position is moved to the _OSPathElement_end (falling  together) of the change. ',directive
'If the region containing the position is replaced,  the position is placed at the same location inside the replacement text, but  always inside the replacement text.   ',directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' Returns the position category.   @return the position category ',non-directive
' Returns the position category.   ',non-directive
'@return the position category ',non-directive
' Creates a new updater for the given <code>category</code>.   @param category the new category. ',non-directive
' Creates a new updater for the given <code>category</code>.   ',non-directive
'@param category the new category. ',non-directive
' Adds owner draw support for tables.   @since _ClassPathElement_ ',non-directive
' Adds owner draw support for tables.   ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' Stores the styled ranges in the given table item.   @param item table item  @param column the column index  @param ranges the styled ranges or <code>null</code> to remove them ',non-directive
' Stores the styled ranges in the given table item.   ',non-directive
'@param item table item  ',non-directive
'@param column the column index  ',non-directive
'@param ranges the styled ranges or <code>null</code> to remove them ',directive
?,non-directive
?,non-directive
' A delayed input change listener that forwards delayed input changes to an information control replacer.   @since _ClassPathElement_ ',non-directive
' A delayed input change listener that forwards delayed input changes to an information control replacer.   ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' Creates a new listener.   @param _ClassElement_ the information control with delayed input changes  @param _ClassElement_ the information control replacer, whose information control should get the new input ',directive
' Creates a new listener.   ',non-directive
'@param _ClassElement_ the information control with delayed input changes  ',non-directive
'@param _ClassElement_ the information control replacer, whose information control should get the new input ',non-directive
' An information control replacer can replace an {@link _ClassElement_}\'s  control.  <p>  The {@link _ClassElement_} can be configured with such a replacer by calling  <code>_ClassElement_</code>.  </p>   @since _ClassPathElement_ ',directive
' An information control replacer can replace an {',non-directive
'@link _ClassElement_}\'s  control.  ',non-directive
'<p>  The {',directive
'@link _ClassElement_} can be configured with such a replacer by calling  <code>_ClassElement_</code>.  ',directive
'</p>   ',non-directive
'@since _ClassPathElement_ ',non-directive
' Replace the information control.   @param _ClassElement_ the information presenter control creator  @param _ClassElement_ the bounds of the content area of the information control  @param information the information to show  @param _ClassElement_ the subject area  @param _ClassElement_ <code>true</code> iff the replacing information control should take focus ',directive
' Replace the information control.   ',non-directive
'@param _ClassElement_ the information presenter control creator  ',non-directive
'@param _ClassElement_ the bounds of the content area of the information control  ',non-directive
'@param information the information to show  ',non-directive
'@param _ClassElement_ the subject area  ',non-directive
'@param _ClassElement_ <code>true</code> iff the replacing information control should take focus ',non-directive
?,non-directive
?,non-directive
' Opens the information control with the given information and the specified  subject area. It also activates the information control closer.   @param _ClassElement_ the information area  @param information the information ',non-directive
' Opens the information control with the given information and the specified  subject area. ',non-directive
'It also activates the information control closer.   ',non-directive
'@param _ClassElement_ the information area  ',non-directive
'@param information the information ',non-directive
?,non-directive
?,non-directive
' @param input the delayed input, or <code>null</code> to request cancellation ',non-directive
?,non-directive
'@param input the delayed input, or <code>null</code> to request cancellation ',directive
' Tells whether the replacer is currently replacing another information control.   @return <code>true</code> while code from {@link #_ClassElement_(IInformationControlCreator, Rectangle, Object, Rectangle, boolean)} is run ',non-directive
' Tells whether the replacer is currently replacing another information control.   ',non-directive
'@return <code>true</code> while code from {',directive
'@link #_ClassElement_(IInformationControlCreator, Rectangle, Object, Rectangle, boolean)} is run ',directive
' @return the current information control, or <code>null</code> if none available ',non-directive
?,non-directive
'@return the current information control, or <code>null</code> if none available ',directive
' The number of pixels to blow up the keep-up zone.   @return the margin in pixels ',non-directive
' The number of pixels to blow up the keep-up zone.   ',non-directive
'@return the margin in pixels ',non-directive
' Creates a new information control replacer.   @param creator the default information control creator ',non-directive
' Creates a new information control replacer.   ',non-directive
'@param creator the default information control creator ',non-directive
' Default control creator. ',non-directive
' Default control creator. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Implements a sticky hover control, _ClassPathElement_. a control that replaces a hover  with an enriched and focusable control.  <p>  The information control is made visible on request by calling  {@link #_ClassElement_(Rectangle)}.  </p>  <p>  Clients usually instantiate and configure this class before using it. The configuration  must be consistent: This means the used {@link _ClassPathElement_}  must create an information control expecting information in the same format the configured  {@link _ClassPathElement_}s use to encode the information they provide.  </p>   @since _ClassPathElement_ ',directive
' Implements a sticky hover control, _ClassPathElement_. ',non-directive
'a control that replaces a hover  with an enriched and focusable control.  ',non-directive
'<p>  The information control is made visible on request by calling  {',directive
'@link #_ClassElement_(Rectangle)}.  ',directive
'</p>  <p>  Clients usually instantiate and configure this class before using it. ',directive
'The configuration  must be consistent: This means the used {',directive
'@link _ClassPathElement_}  must create an information control expecting information in the same format the configured  {',directive
'@link _ClassPathElement_}s use to encode the information they provide.  ',directive
'</p>   ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a new sticky hover manager.   @param _ClassElement_ the text viewer ',non-directive
' Creates a new sticky hover manager.   ',non-directive
'@param _ClassElement_ the text viewer ',non-directive
' An internal class that gives access to internal methods of {@link  _ClassElement_} and subclasses.   @since _ClassPathElement_ ',directive
' An internal class that gives access to internal methods of {',non-directive
'@link  _ClassElement_} and subclasses.   ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the current information control, or <code>null</code> if none.   @return the current information control, or <code>null</code> if none ',non-directive
' Returns the current information control, or <code>null</code> if none.   ',directive
'@return the current information control, or <code>null</code> if none ',directive
' Sets the information control replacer for this manager and disposes the  old one if set.   @param replacer the information control replacer for this manager, or             <code>null</code> if no information control replacing should             take place ',directive
' Sets the information control replacer for this manager and disposes the  old one if set.   ',non-directive
'@param replacer the information control replacer for this manager, or             <code>null</code> if no information control replacing should             take place ',directive
' Returns the current information control replacer or <code>null</code> if none has been installed.   @return the current information control replacer or <code>null</code> if none has been installed ',non-directive
' Returns the current information control replacer or <code>null</code> if none has been installed.   ',directive
'@return the current information control replacer or <code>null</code> if none has been installed ',directive
' Tests whether the given information control is replaceable.   @param _ClassElement_ information control or <code>null</code> if none  @return <code>true</code> if information control is replaceable, <code>false</code> otherwise ',non-directive
' Tests whether the given information control is replaceable.   ',non-directive
'@param _ClassElement_ information control or <code>null</code> if none  ',directive
'@return <code>true</code> if information control is replaceable, <code>false</code> otherwise ',non-directive
' Tells whether this manager\'s information control is currently being replaced.   @return <code>true</code> if a replace is in progress ',non-directive
' Tells whether this manager\'s information control is currently being replaced.   ',non-directive
'@return <code>true</code> if a replace is in progress ',non-directive
' Crops the given bounds such that they lie completely on the closest monitor.   @param bounds shell bounds to crop ',non-directive
' Crops the given bounds such that they lie completely on the closest monitor.   ',non-directive
'@param bounds shell bounds to crop ',non-directive
' Sets the hover enrich mode. Only applicable when an information  control replacer has been set with  {@link #_ClassElement_(_ClassElement_)} .   @param mode the enrich mode  @see ITextViewerExtension8#_ClassElement_(_ClassPathElement_) ',directive
' Sets the hover enrich mode. ',non-directive
'Only applicable when an information  control replacer has been set with  {',directive
'@link #_ClassElement_(_ClassElement_)} .   ',directive
'@param mode the enrich mode  ',non-directive
'@see ITextViewerExtension8#_ClassElement_(_ClassPathElement_) ',non-directive
' Indicates whether the mouse cursor is allowed to leave the subject area without closing the hover.   @return whether the mouse cursor is allowed to leave the subject area without closing the hover ',non-directive
' Indicates whether the mouse cursor is allowed to leave the subject area without closing the hover.   ',non-directive
'@return whether the mouse cursor is allowed to leave the subject area without closing the hover ',non-directive
' Replaces this manager\'s information control as defined by  the information control replacer.  <strong>Must only be called when the information control is instanceof {@link IInformationControlExtension3}!</strong>   @param _ClassElement_ <code>true</code> iff the replacing information control should take focus ',directive
' Replaces this manager\'s information control as defined by  the information control replacer.  ',non-directive
'<strong>Must only be called when the information control is instanceof {',directive
'@link IInformationControlExtension3}!</strong>   ',directive
'@param _ClassElement_ <code>true</code> iff the replacing information control should take focus ',non-directive
?,non-directive
?,non-directive
' A change region describes a contiguous range of lines that was changed in the same revision of a  document. Once it is adjusted to diff information, the originally contiguous range may be split  into several ranges or even be empty.   @since _ClassPathElement_ ',directive
' A change region describes a contiguous range of lines that was changed in the same revision of a  document. ',non-directive
'Once it is adjusted to diff information, the originally contiguous range may be split  into several ranges or even be empty.   ',directive
'@since _ClassPathElement_ ',non-directive
' Returns the revision that this region belongs to.   @return the revision that this region belongs to ',non-directive
' Returns the revision that this region belongs to.   ',non-directive
'@return the revision that this region belongs to ',non-directive
' Returns the original (before applying diff information) line range of this change region.   @return the original (before applying diff information) line range of this change region ',directive
' Returns the original (before applying diff information) line range of this change region.   ',directive
'@return the original (before applying diff information) line range of this change region ',directive
' Returns the list of {@link ILineRange}s of this change region for which the revision  information is still valid.   @return the list of adjusted line ranges ',non-directive
' Returns the list of {',non-directive
'@link ILineRange}s of this change region for which the revision  information is still valid.   ',non-directive
'@return the list of adjusted line ranges ',non-directive
' Returns the line coverage of the adjusted ranges, an empty range if the coverage is empty.   @return the line coverage of the adjusted ranges ',non-directive
' Returns the line coverage of the adjusted ranges, an empty range if the coverage is empty.   ',non-directive
'@return the line coverage of the adjusted ranges ',non-directive
' Clears any adjusted ranges, restoring the original range. ',non-directive
' Clears any adjusted ranges, restoring the original range. ',non-directive
' Adjusts this change region to a diff hunk. This will change the adjusted ranges.   @param hunk the diff hunk to adjust to ',non-directive
' Adjusts this change region to a diff hunk. ',non-directive
'This will change the adjusted ranges.   ',non-directive
'@param hunk the diff hunk to adjust to ',non-directive
?,non-directive
?,non-directive
' Creates a new change region for the given revision and line range.   @param revision the revision of the new region  @param lines the line range of the new region  @throws _ClassElement_ if the line range is not well-formed ',non-directive
' Creates a new change region for the given revision and line range.   ',non-directive
'@param revision the revision of the new region  ',non-directive
'@param lines the line range of the new region  ',non-directive
'@throws _ClassElement_ if the line range is not well-formed ',non-directive
' A selection provider for annotate revisions. Selections of a revision can currently happen in  following ways - note that this list may be changed in the future:  <ul>  <li>when the user clicks the revision ruler with the mouse</li>  <li>when the caret is moved to a revision\'s line (only on post-selection)</li>  </ul>  <p>  Calling {@link #_ClassElement_(ISelection)} will set the current sticky revision on the ruler.  </p>   @since _ClassPathElement_ ',directive
' A selection provider for annotate revisions. ',non-directive
'Selections of a revision can currently happen in  following ways - note that this list may be changed in the future:  <ul>  ',directive
'<li>when the user clicks the revision ruler with the mouse</li>  ',non-directive
'<li>when the caret is moved to a revision\'s line (only on post-selection)</li>  </ul>  ',non-directive
'<p>  Calling {',directive
'@link #_ClassElement_(ISelection)} will set the current sticky revision on the ruler.  ',directive
'</p>   ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Computes the diff hunks from an {@link ILineDiffer}.   @since _ClassPathElement_ ',non-directive
' Computes the diff hunks from an {',non-directive
'@link ILineDiffer}.   ',non-directive
'@since _ClassPathElement_ ',non-directive
' Converts the line-based information of {@link ILineDiffer} into {@link Hunk}s, grouping  contiguous blocks of lines that are changed (added, deleted).   @param differ the line differ to query  @param lines the number of lines to query  @return the corresponding {@link Hunk} information ',non-directive
' Converts the line-based information of {',non-directive
'@link ILineDiffer} into {',non-directive
'@link Hunk}s, grouping  contiguous blocks of lines that are changed (added, deleted).   ',non-directive
'@param differ the line differ to query  ',non-directive
'@param lines the number of lines to query  ',non-directive
'@return the corresponding {',non-directive
'@link Hunk} information ',non-directive
' Thrown to indicate that an attempt to create or modify a {@link Range} failed because it would  have resulted in an illegal range. A range is illegal if its length is &lt;= 0 or if its start  line is &lt; 0.   @since _ClassPathElement_ ',non-directive
' Thrown to indicate that an attempt to create or modify a {',non-directive
'@link Range} failed because it would  have resulted in an illegal range. ',non-directive
'A range is illegal if its length is &lt;= 0 or if its start  line is &lt; 0.   ',directive
'@since _ClassPathElement_ ',non-directive
' Constructs an <code>_ClassElement_</code> with no detail message. ',non-directive
' Constructs an <code>_ClassElement_</code> with no detail message. ',non-directive
' Constructs an <code>_ClassElement_</code> with the specified detail message.   @param s the detail message. ',non-directive
' Constructs an <code>_ClassElement_</code> with the specified detail message.   ',non-directive
'@param s the detail message. ',non-directive
' Constructs a new <code>_ClassElement_</code>  object with an argument indicating the illegal index.   @param index the illegal index. ',non-directive
' Constructs a new <code>_ClassElement_</code>  object with an argument indicating the illegal index.   ',non-directive
'@param index the illegal index. ',non-directive
' A strategy for painting the live annotate colors onto the vertical ruler column. It also manages  the revision hover.   @since _ClassPathElement_ ',non-directive
' A strategy for painting the live annotate colors onto the vertical ruler column. ',non-directive
'It also manages  the revision hover.   ',directive
'@since _ClassPathElement_ ',non-directive
' Sets the revision information to be drawn and triggers a redraw.   @param info the revision information to show, <code>null</code> to draw none ',non-directive
' Sets the revision information to be drawn and triggers a redraw.   ',non-directive
'@param info the revision information to show, <code>null</code> to draw none ',directive
' Changes the rendering mode and triggers redrawing if needed.   @param _ClassElement_ the rendering mode  @since _ClassPathElement_ ',non-directive
' Changes the rendering mode and triggers redrawing if needed.   ',non-directive
'@param _ClassElement_ the rendering mode  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Sets the background color.   @param background the background color, <code>null</code> for the platform\'s list         background ',non-directive
' Sets the background color.   ',non-directive
'@param background the background color, <code>null</code> for the platform\'s list         background ',directive
' Sets the parent ruler - the delegating column must call this method as soon as it creates its  control.   @param _ClassElement_ the parent ruler ',directive
' Sets the parent ruler - the delegating column must call this method as soon as it creates its  control.   ',directive
'@param _ClassElement_ the parent ruler ',non-directive
' Delegates the painting of the quick diff colors to this painter. The painter will draw the  color boxes onto the passed {@link GC} for all model (document) lines in  <code>_ClassElement_</code>.   @param gc the {@link GC} to draw onto  @param _ClassElement_ the lines (in document offsets) that are currently (perhaps only         partially) visible ',directive
' Delegates the painting of the quick diff colors to this painter. ',directive
'The painter will draw the  color boxes onto the passed {',non-directive
'@link GC} for all model (document) lines in  <code>_ClassElement_</code>.   ',non-directive
'@param gc the {',non-directive
'@link GC} to draw onto  ',non-directive
'@param _ClassElement_ the lines (in document offsets) that are currently (perhaps only         partially) visible ',directive
' Sets the annotation model.   @param model the annotation model, possibly <code>null</code>  @see IVerticalRulerColumn#_ClassElement_(IAnnotationModel) ',non-directive
' Sets the annotation model.   ',non-directive
'@param model the annotation model, possibly <code>null</code>  ',directive
'@see IVerticalRulerColumn#_ClassElement_(IAnnotationModel) ',non-directive
' Returns the revision hover.   @return the revision hover ',non-directive
' Returns the revision hover.   ',non-directive
'@return the revision hover ',non-directive
' Returns the selection provider.   @return the selection provider ',non-directive
' Returns the selection provider.   ',non-directive
'@return the selection provider ',non-directive
' Sets the hover later returned by {@link #_ClassElement_()}.   @param hover the hover ',non-directive
' Sets the hover later returned by {',non-directive
'@link #_ClassElement_()}.   ',non-directive
'@param hover the hover ',non-directive
' Returns <code>true</code> if the receiver can provide a hover for a certain document line.   @param _ClassElement_ the document line of interest  @return <code>true</code> if the receiver can provide a hover ',non-directive
' Returns <code>true</code> if the receiver can provide a hover for a certain document line.   ',non-directive
'@param _ClassElement_ the document line of interest  ',non-directive
'@return <code>true</code> if the receiver can provide a hover ',non-directive
' Returns <code>true</code> if a revision model has been set, <code>false</code> otherwise.   @return <code>true</code> if a revision model has been set, <code>false</code> otherwise ',non-directive
' Returns <code>true</code> if a revision model has been set, <code>false</code> otherwise.   ',non-directive
'@return <code>true</code> if a revision model has been set, <code>false</code> otherwise ',non-directive
' Returns the width in chars required to display information.   @return the width in chars required to display information  @since _ClassPathElement_ ',directive
' Returns the width in chars required to display information.   ',non-directive
'@return the width in chars required to display information  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Enables showing the revision id.   @param show <code>true</code> to show the revision, <code>false</code> to hide it ',non-directive
' Enables showing the revision id.   ',non-directive
'@param show <code>true</code> to show the revision, <code>false</code> to hide it ',non-directive
' Enables showing the revision author.   @param show <code>true</code> to show the author, <code>false</code> to hide it ',non-directive
' Enables showing the revision author.   ',non-directive
'@param show <code>true</code> to show the author, <code>false</code> to hide it ',non-directive
' Adds a revision listener.   @param listener the listener  @since _ClassPathElement_ ',non-directive
' Adds a revision listener.   ',non-directive
'@param listener the listener  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Removes a revision listener.   @param listener the listener  @since _ClassPathElement_ ',non-directive
' Removes a revision listener.   ',non-directive
'@param listener the listener  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a new revision painter for a vertical ruler column.   @param column the column that will delegate{@link #paint(GC, ILineRange) painting} to the         newly created painter.  @param _ClassElement_ a shared colors object to store shaded colors in ',non-directive
' Creates a new revision painter for a vertical ruler column.   ',non-directive
'@param column the column that will delegate{',non-directive
'@link #paint(GC, ILineRange) painting} to the         newly created painter.  ',non-directive
'@param _ClassElement_ a shared colors object to store shaded colors in ',non-directive
' A variable {@link _ClassPathElement_} with the following invariant:  <ul>  <li>{@link #start() start} &gt;= 0  <li>{@link #length() length} &gt; 0, _ClassPathElement_. a range cannot be empty  </ul>  <p>  Attempts to create or modify a <code>Range</code> such that this invariant would be violated  result in a {@link _ClassElement_} being  thrown.  </p>   @since _ClassPathElement_ ',non-directive
' A variable {',directive
'@link _ClassPathElement_} with the following invariant:  <ul>  ',directive
'<li>{',non-directive
'@link #start() start} &gt;= 0  ',directive
'<li>{',non-directive
'@link #length() length} &gt; 0, _ClassPathElement_. ',directive
'a range cannot be empty  </ul>  ',directive
'<p>  Attempts to create or modify a <code>Range</code> such that this invariant would be violated  result in a {',directive
'@link _ClassElement_} being  thrown.  ',directive
'</p>   ',non-directive
'@since _ClassPathElement_ ',non-directive
' Creates a new range with the same start and length as the passed line range.   @param range the range to copy  @return a <code>Range</code> with the same start and length as <code>range</code>  @throws _ClassElement_ if the passed {@link ILineRange} does not adhere to the          contract of {@link Range} ',non-directive
' Creates a new range with the same start and length as the passed line range.   ',directive
'@param range the range to copy  ',non-directive
'@return a <code>Range</code> with the same start and length as <code>range</code>  ',non-directive
'@throws _ClassElement_ if the passed {',directive
'@link ILineRange} does not adhere to the          contract of {',directive
'@link Range} ',directive
' Creates a new range equal to the passed line range.   @param range the range to copy  @return a <code>Range</code> equal to <code>range</code> ',non-directive
' Creates a new range equal to the passed line range.   ',non-directive
'@param range the range to copy  ',non-directive
'@return a <code>Range</code> equal to <code>range</code> ',non-directive
' Creates a new range with the given start offset and length.   @param start the first line of the new range, must be &gt;= 0  @param length the number of lines included in the new range, must be &gt; 0  @return a <code>Range</code> with the given start and length  @throws _ClassElement_ if the parameters violate the invariant of          {@link Range} ',directive
' Creates a new range with the given start offset and length.   ',non-directive
'@param start the first line of the new range, must be &gt;= 0  ',directive
'@param length the number of lines included in the new range, must be &gt; 0  ',directive
'@return a <code>Range</code> with the given start and length  ',non-directive
'@throws _ClassElement_ if the parameters violate the invariant of          {',directive
'@link Range} ',directive
' Creates a new range with the given start and end offsets.   @param start the first line of the new range, must be &gt;= 0  @param end the first line not in the range any more (exclusive), must be &gt; <code>start</code>  @return a <code>Range</code> with the given start and end offsets  @throws _ClassElement_ if the parameters violate the invariant of          {@link Range} ',directive
' Creates a new range with the given start and end offsets.   ',non-directive
'@param start the first line of the new range, must be &gt;= 0  ',directive
'@param end the first line not in the range any more (exclusive), must be &gt; <code>start</code>  ',directive
'@return a <code>Range</code> with the given start and end offsets  ',non-directive
'@throws _ClassElement_ if the parameters violate the invariant of          {',directive
'@link Range} ',directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns the first line contained in this range. Short equivalent of {@link #_ClassElement_()}.   @return the first line contained in this range ',non-directive
' Returns the first line contained in this range. ',non-directive
'Short equivalent of {',non-directive
'@link #_ClassElement_()}.   ',non-directive
'@return the first line contained in this range ',non-directive
' Returns the number of lines contained in this range. Short equivalent of {@link #getNumberOfLines()}.   @return the number of lines contained in this range ',non-directive
' Returns the number of lines contained in this range. ',non-directive
'Short equivalent of {',non-directive
'@link #getNumberOfLines()}.   ',non-directive
'@return the number of lines contained in this range ',non-directive
' Returns the first line after this range. Equivalent to {@linkplain #start() start} + {@linkplain #length() length}.   @return the first line after this range ',directive
' Returns the first line after this range. ',non-directive
'Equivalent to {',directive
'@linkplain #start() start} + {',directive
'@linkplain #length() length}.   ',directive
'@return the first line after this range ',non-directive
' Moves the receiver to <code>start</code>, keeping {@link #length()} constant.   @param start the new start, must be &gt;= 0  @throws _ClassElement_ if <code>start</code> &lt; 0 ',directive
' Moves the receiver to <code>start</code>, keeping {',non-directive
'@link #length()} constant.   ',non-directive
'@param start the new start, must be &gt;= 0  ',directive
'@throws _ClassElement_ if <code>start</code> &lt; 0 ',directive
' Moves this range such that the {@link #end()} is at <code>end</code>, keeping  {@link #length()} constant.   @param end the new end  @throws _ClassElement_ if <code>end</code> &lt;= {@link #start()} ',non-directive
' Moves this range such that the {',non-directive
'@link #end()} is at <code>end</code>, keeping  {',non-directive
'@link #length()} constant.   ',non-directive
'@param end the new end  ',non-directive
'@throws _ClassElement_ if <code>end</code> &lt;= {',directive
'@link #start()} ',directive
' Moves the range by <code>delta</code> lines, keeping {@link #length()} constant. The  resulting start line must be &gt;= 0.   @param delta the number of lines to shift the range  @throws _ClassElement_ if <code>-delta</code> &gt; {@link #start()} ',directive
' Moves the range by <code>delta</code> lines, keeping {',non-directive
'@link #length()} constant. ',non-directive
'The  resulting start line must be &gt;= 0.   ',directive
'@param delta the number of lines to shift the range  ',non-directive
'@throws _ClassElement_ if <code>-delta</code> &gt; {',directive
'@link #start()} ',directive
' Moves the start offset to <code>start</code>, keeping {@link #end()} constant.   @param start the new start, must be &gt;= 0 and &lt; {@link #end()}  @throws _ClassElement_ if <code>start</code> &lt; 0 or &gt;= {@link #end()} ',directive
' Moves the start offset to <code>start</code>, keeping {',non-directive
'@link #end()} constant.   ',non-directive
'@param start the new start, must be &gt;= 0 and &lt; {',directive
'@link #end()}  ',directive
'@throws _ClassElement_ if <code>start</code> &lt; 0 or &gt;= {',directive
'@link #end()} ',directive
' Sets the end of this range, keeping {@link #start()} constant.   @param end the new end, must be &gt; {@link #start()}  @throws _ClassElement_ if <code>end</code> &lt;= {@link #start()} ',directive
' Sets the end of this range, keeping {',non-directive
'@link #start()} constant.   ',non-directive
'@param end the new end, must be &gt; {',directive
'@link #start()}  ',directive
'@throws _ClassElement_ if <code>end</code> &lt;= {',directive
'@link #start()} ',directive
' Sets the length of this range, keeping {@link #end()} constant.   @param length the new length, must be &gt; 0 and &lt;= {@link #end()}  @throws _ClassElement_ if <code>length</code> &lt;= 0 ',directive
' Sets the length of this range, keeping {',non-directive
'@link #end()} constant.   ',non-directive
'@param length the new length, must be &gt; 0 and &lt;= {',directive
'@link #end()}  ',directive
'@throws _ClassElement_ if <code>length</code> &lt;= 0 ',directive
' Resizes the range by <code>delta</code> lines, keeping {@link #start()} constant.   @param delta the number of lines to resize the range  @throws _ClassElement_ if <code>-delta</code> &gt;= {@link #length()} ',non-directive
' Resizes the range by <code>delta</code> lines, keeping {',non-directive
'@link #start()} constant.   ',non-directive
'@param delta the number of lines to resize the range  ',directive
'@throws _ClassElement_ if <code>-delta</code> &gt;= {',directive
'@link #length()} ',directive
' Resizes the range by <code>delta</code> lines by moving the start offset, {@link #end()} remains unchanged.   @param delta the number of lines to resize the range  @throws _ClassElement_ if <code>-delta</code> &gt;= {@link #length()} ',non-directive
' Resizes the range by <code>delta</code> lines by moving the start offset, {',non-directive
'@link #end()} remains unchanged.   ',non-directive
'@param delta the number of lines to resize the range  ',directive
'@throws _ClassElement_ if <code>-delta</code> &gt;= {',directive
'@link #length()} ',directive
' Splits a range off the end of the receiver. The receiver is shortened to only include  <code>remaining</code> lines after the split.   @param remaining the number of lines to remain in the receiver, must be in [1, {@link #length() length})  @return the split off range  @throws _ClassElement_ if <code>remaining</code>&gt;= {@link #length()} or <code>remaining</code>&ltt;= 0 ',directive
' Splits a range off the end of the receiver. ',non-directive
'The receiver is shortened to only include  <code>remaining</code> lines after the split.   ',directive
'@param remaining the number of lines to remain in the receiver, must be in [1, {',directive
'@link #length() length})  ',directive
'@return the split off range  ',non-directive
'@throws _ClassElement_ if <code>remaining</code>&gt;= {',directive
'@link #length()} or <code>remaining</code>&ltt;= 0 ',directive
' Returns <code>true</code> if the passed range has the same offset and length as the receiver.   @param range another line range to compare the receiver to  @return <code>true</code> if <code>range</code> has the same offset and length as the receiver ',non-directive
' Returns <code>true</code> if the passed range has the same offset and length as the receiver.   ',non-directive
'@param range another line range to compare the receiver to  ',non-directive
'@return <code>true</code> if <code>range</code> has the same offset and length as the receiver ',non-directive
?,non-directive
?,non-directive
' Utility for color operations.   @since _ClassPathElement_ ',non-directive
' Utility for color operations.   ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the human-perceived brightness of a color as float in [_ClassPathElement_, _ClassPathElement_]. The used RGB  weights come from _OSPathElement_/_ClassPathElement_#RTFToC9.   @param rgb the color  @return the gray-scale value ',directive
' Returns the human-perceived brightness of a color as float in [_ClassPathElement_, _ClassPathElement_]. ',non-directive
'The used RGB  weights come from _OSPathElement_/_ClassPathElement_#RTFToC9.   ',directive
'@param rgb the color  ',non-directive
'@return the gray-scale value ',non-directive
' Normalizes a color in its perceived brightness. Yellows are darkened, while blues and reds  are lightened. Depending on the hue, the brightness range within the RGB gamut may be  different, outside values are clipped. Note that this is an approximation; the returned RGB  is not guaranteed to have the requested {@link #brightness(RGB) brightness}.   @param color the color to normalize  @param brightness the requested brightness, in [0,&nbsp;1]  @return a normalized version of <code>color</code>  @see #brightness(RGB) ',directive
' Normalizes a color in its perceived brightness. ',non-directive
'Yellows are darkened, while blues and reds  are lightened. ',directive
'Depending on the hue, the brightness range within the RGB gamut may be  different, outside values are clipped. ',directive
'Note that this is an approximation; the returned RGB  is not guaranteed to have the requested {',directive
'@link #brightness(RGB) brightness}.   ',directive
'@param color the color to normalize  ',non-directive
'@param brightness the requested brightness, in [0,&nbsp;1]  ',non-directive
'@return a normalized version of <code>color</code>  ',non-directive
'@see #brightness(RGB) ',non-directive
' Returns an RGB that lies between the given foreground and background  colors using the given mixing factor. A <code>factor</code> of _ClassPathElement_ will produce a  color equal to <code>fg</code>, while a <code>factor</code> of _ClassPathElement_ will produce one  equal to <code>bg</code>.  @param bg the background color  @param fg the foreground color  @param factor the mixing factor, must be in [0,&nbsp;1]   @return the interpolated color ',directive
' Returns an RGB that lies between the given foreground and background  colors using the given mixing factor. ',non-directive
'A <code>factor</code> of _ClassPathElement_ will produce a  color equal to <code>fg</code>, while a <code>factor</code> of _ClassPathElement_ will produce one  equal to <code>bg</code>.  ',non-directive
'@param bg the background color  ',non-directive
'@param fg the foreground color  ',non-directive
'@param factor the mixing factor, must be in [0,&nbsp;1]   ',directive
'@return the interpolated color ',non-directive
' Returns an array of colors with hues evenly distributed on the hue wheel defined by the <a  href=\"_OSPathElement_/_OSPathElement_HSV_color_space\">HSB color space</a>. The returned array  has size <code>steps</code>. The distance <var>d</var> between two successive colors is  in [120&#176;,&nbsp;180&#176;].  <p>  The color at a given <code>index</code> has the hue returned by  {@linkplain #_ClassElement_(int) _ClassElement_(index)}; _ClassPathElement_. the computed hues are not equidistant,  but adaptively distributed on the color wheel.  </p>  <p>  The first six colors returned correspond to the following {@link SWT} color constants:  {@link SWT#COLOR_RED red}, {@link SWT#COLOR_GREEN green}, {@link SWT#COLOR_BLUE blue},  {@link SWT#COLOR_YELLOW yellow}, {@link SWT#COLOR_CYAN cyan},  {@link SWT#COLOR_MAGENTA magenta}.  </p>   @param steps the requested size, must be &gt;= 2  @return an array of <code>steps</code> colors evenly distributed on the color wheel ',directive
' Returns an array of colors with hues evenly distributed on the hue wheel defined by the <a  href=\"_OSPathElement_/_OSPathElement_HSV_color_space\">HSB color space</a>. ',directive
'The returned array  has size <code>steps</code>. ',non-directive
'The distance <var>d</var> between two successive colors is  in [120&#176;,&nbsp;180&#176;].  ',directive
'<p>  The color at a given <code>index</code> has the hue returned by  {',directive
'@linkplain #_ClassElement_(int) _ClassElement_(index)}; _ClassPathElement_. ',directive
'the computed hues are not equidistant,  but adaptively distributed on the color wheel.  ',directive
'</p>  <p>  The first six colors returned correspond to the following {',non-directive
'@link SWT} color constants:  {',non-directive
'@link SWT#COLOR_RED red}, {',non-directive
'@link SWT#COLOR_GREEN green}, {',non-directive
'@link SWT#COLOR_BLUE blue},  {',non-directive
'@link SWT#COLOR_YELLOW yellow}, {',non-directive
'@link SWT#COLOR_CYAN cyan},  {',non-directive
'@link SWT#COLOR_MAGENTA magenta}.  ',non-directive
'</p>   ',non-directive
'@param steps the requested size, must be &gt;= 2  ',directive
'@return an array of <code>steps</code> colors evenly distributed on the color wheel ',directive
' A hunk describes a contiguous range of changed, added or deleted lines. <code>Hunk</code>s are separated by  one or more unchanged lines.   @since _ClassPathElement_ ',non-directive
' A hunk describes a contiguous range of changed, added or deleted lines. ',non-directive
'<code>Hunk</code>s are separated by  one or more unchanged lines.   ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Creates a new hunk.   @param line the line at which the hunk starts, must be &gt;= 0  @param delta the difference in lines compared to the original  @param changed the number of changed lines in this hunk, must be &gt;= 0 ',directive
' Creates a new hunk.   ',non-directive
'@param line the line at which the hunk starts, must be &gt;= 0  ',directive
'@param delta the difference in lines compared to the original  ',non-directive
'@param changed the number of changed lines in this hunk, must be &gt;= 0 ',directive
' The difference in lines compared to the corresponding line range in the original. Positive  for added lines, negative for deleted lines. ',non-directive
' The difference in lines compared to the corresponding line range in the original. ',non-directive
'Positive  for added lines, negative for deleted lines. ',non-directive
'The number of changed lines in this hunk, must be &gt;= 0. ',directive
'The number of changed lines in this hunk, must be &gt;= 0. ',directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Reads the next line. The lengths of the line will not exceed the given maximum width.   @return the next line  @throws IOException if an _OSPathElement_O error occurs ',directive
' Reads the next line. ',non-directive
'The lengths of the line will not exceed the given maximum width.   ',non-directive
'@return the next line  ',non-directive
'@throws IOException if an _OSPathElement_O error occurs ',non-directive
' Creates a reader that breaks an input text to fit in a given width.   @param reader Reader of the input text  @param gc The graphic context that defines the currently used font sizes  @param _ClassElement_ The max width (pixels) where the text has to fit in ',non-directive
' Creates a reader that breaks an input text to fit in a given width.   ',non-directive
'@param reader Reader of the input text  ',non-directive
'@param gc The graphic context that defines the currently used font sizes  ',non-directive
'@param _ClassElement_ The max width (pixels) where the text has to fit in ',non-directive
?,non-directive
?,non-directive
' @param proposal the completion proposal ',non-directive
?,non-directive
'@param proposal the completion proposal ',non-directive
' A custom implementation of the <code>IContentAssistant</code> interface.  This implementation is used by the linked mode UI. This is internal and subject  to change without notice. ',non-directive
' A custom implementation of the <code>IContentAssistant</code> interface.  ',non-directive
'This implementation is used by the linked mode UI. ',non-directive
'This is internal and subject  to change without notice. ',directive
' Sets the document partitioning this content assistant is using.   @param partitioning the document partitioning for this content assistant ',non-directive
' Sets the document partitioning this content assistant is using.   ',non-directive
'@param partitioning the document partitioning for this content assistant ',non-directive
?,non-directive
?,non-directive
' Registers a given content assist processor for a particular content type.  If there is already a processor registered for this type, the new processor  is registered instead of the old one.   @param processor the content assist processor to register, or <code>null</code> to remove an existing one  @param _ClassElement_ the content type under which to register ',non-directive
' Registers a given content assist processor for a particular content type.  ',non-directive
'If there is already a processor registered for this type, the new processor  is registered instead of the old one.   ',directive
'@param processor the content assist processor to register, or <code>null</code> to remove an existing one  ',directive
'@param _ClassElement_ the content type under which to register ',non-directive
?,non-directive
?,non-directive
' Enables the content assistant\'s auto activation mode.   @param enabled indicates whether auto activation is enabled or not ',non-directive
' Enables the content assistant\'s auto activation mode.   ',non-directive
'@param enabled indicates whether auto activation is enabled or not ',non-directive
' Enables the content assistant\'s auto insertion mode. If enabled,  the content assistant inserts a proposal automatically if it is  the only proposal. In the case of ambiguities, the user must  make the choice.   @param enabled indicates whether auto insertion is enabled or not  @since _ClassPathElement_ ',directive
' Enables the content assistant\'s auto insertion mode. ',non-directive
'If enabled,  the content assistant inserts a proposal automatically if it is  the only proposal. ',directive
'In the case of ambiguities, the user must  make the choice.   ',directive
'@param enabled indicates whether auto insertion is enabled or not  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Sets the delay after which the content assistant is automatically invoked  if the cursor is behind an auto activation character.   @param delay the auto activation delay ',directive
' Sets the delay after which the content assistant is automatically invoked  if the cursor is behind an auto activation character.   ',non-directive
'@param delay the auto activation delay ',non-directive
' Sets the proposal pop-ups\' orientation.  The following values may be used:  <ul>    <li>PROPOSAL_OVERLAY<p>      proposal popup windows should overlay each other    </li>    <li>PROPOSAL_REMOVE<p>      any currently shown proposal popup should be closed    </li>    <li>PROPOSAL_STACKED<p>      proposal popup windows should be vertical stacked, with no overlap,      beneath the line containing the current cursor location    </li>  </ul>   @param orientation the popup\'s orientation ',directive
' Sets the proposal pop-ups\' orientation.  ',non-directive
'The following values may be used:  <ul>    ',directive
'<li>PROPOSAL_OVERLAY<p>      proposal popup windows should overlay each other    </li>    ',directive
'<li>PROPOSAL_REMOVE<p>      any currently shown proposal popup should be closed    </li>    ',directive
'<li>PROPOSAL_STACKED<p>      proposal popup windows should be vertical stacked, with no overlap,      beneath the line containing the current cursor location    </li>  </ul>   ',directive
'@param orientation the popup\'s orientation ',non-directive
' Sets the context information popup\'s orientation.  The following values may be used:  <ul>    <li>CONTEXT_ABOVE<p>      context information popup should always appear above the line containing      the current cursor location    </li>    <li>CONTEXT_BELOW<p>      context information popup should always appear below the line containing      the current cursor location    </li>  </ul>   @param orientation the popup\'s orientation ',directive
' Sets the context information popup\'s orientation.  ',non-directive
'The following values may be used:  <ul>    ',directive
'<li>CONTEXT_ABOVE<p>      context information popup should always appear above the line containing      the current cursor location    </li>    ',directive
'<li>CONTEXT_BELOW<p>      context information popup should always appear below the line containing      the current cursor location    </li>  </ul>   ',directive
'@param orientation the popup\'s orientation ',non-directive
' Sets the context information popup\'s background color.   @param background the background color ',non-directive
' Sets the context information popup\'s background color.   ',non-directive
'@param background the background color ',non-directive
' Sets the context information popup\'s foreground color.   @param foreground the foreground color  @since _ClassPathElement_ ',non-directive
' Sets the context information popup\'s foreground color.   ',non-directive
'@param foreground the foreground color  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Sets the context selector\'s background color.   @param background the background color  @since _ClassPathElement_ ',non-directive
' Sets the context selector\'s background color.   ',non-directive
'@param background the background color  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Sets the context selector\'s foreground color.   @param foreground the foreground color  @since _ClassPathElement_ ',non-directive
' Sets the context selector\'s foreground color.   ',non-directive
'@param foreground the foreground color  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Sets the information control creator for the additional information control.   @param creator the information control creator for the additional information control  @since _ClassPathElement_ ',directive
' Sets the information control creator for the additional information control.   ',non-directive
'@param creator the information control creator for the additional information control  ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Hides the proposal popup. ',non-directive
' Hides the proposal popup. ',non-directive
' Hides any open pop-ups. ',non-directive
' Hides any open pop-ups. ',non-directive
' Callback to signal this content assistant that the presentation of the possible completions has been stopped.  @since _ClassPathElement_ ',directive
' Callback to signal this content assistant that the presentation of the possible completions has been stopped.  ',directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' Callback to signal this content assistant that the presentation of the context information has been stopped.  @since _ClassPathElement_ ',directive
' Callback to signal this content assistant that the presentation of the context information has been stopped.  ',directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
' @param _ClassElement_ the completion position ',non-directive
?,non-directive
'@param _ClassElement_ the completion position ',non-directive
' @return the completion position ',non-directive
?,non-directive
'@return the completion position ',non-directive
' @param proposals the proposals ',non-directive
?,non-directive
'@param proposals the proposals ',non-directive
' @param proposals the proposals ',non-directive
?,non-directive
'@param proposals the proposals ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Returns whether any popups controlled by the receiver have the input focus.   @return <code>true</code> if any of the managed popups have the focus, <code>false</code> otherwise ',non-directive
' Returns whether any popups controlled by the receiver have the input focus.   ',non-directive
'@return <code>true</code> if any of the managed popups have the focus, <code>false</code> otherwise ',non-directive
?,non-directive
?,non-directive
' @param proposal the proposal ',non-directive
?,non-directive
'@param proposal the proposal ',non-directive
' @param listener the proposal listener ',non-directive
?,non-directive
'@param listener the proposal listener ',non-directive
' @param listener the proposal listener ',non-directive
?,non-directive
'@param listener the proposal listener ',non-directive
' Creates a new content assistant. The content assistant is not automatically activated,  overlays the completion proposals with context information list if necessary, and  shows the context information above the location at which it was activated. If auto  activation will be enabled, without further configuration steps, this content assistant  is activated after a 500 ms delay. It uses the default partitioning. ',directive
' Creates a new content assistant. ',non-directive
'The content assistant is not automatically activated,  overlays the completion proposals with context information list if necessary, and  shows the context information above the location at which it was activated. ',directive
'If auto  activation will be enabled, without further configuration steps, this content assistant  is activated after a 500 ms delay. ',directive
'It uses the default partitioning. ',directive
' The popup priority: &gt; info pop-ups, &lt; standard content assist.  Default value: <code>10</code>.   @since _ClassPathElement_ ',non-directive
' The popup priority: &gt; info pop-ups, &lt; standard content assist.  ',directive
'Default value: <code>10</code>.   ',non-directive
'@since _ClassPathElement_ ',non-directive
' Provides a set of convenience methods for creating HTML pages.  <p>  Moved into this package from <code>_ClassPathElement_</code>.</p> ',non-directive
' Provides a set of convenience methods for creating HTML pages.  ',non-directive
'<p>  Moved into this package from <code>_ClassPathElement_</code>.</p> ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Replaces the following style attributes of the font definition of the <code>html</code>  element:  <ul>  <li>font-size</li>  <li>font-weight</li>  <li>font-style</li>  <li>font-family</li>  </ul>  The font\'s name is used as font family, a <code>sans-serif</code> default font family is  appended for the case that the given font name is not available.  <p>  If the listed font attributes are not contained in the passed style list, nothing happens.  </p>   @param styles CSS style definitions  @param _ClassElement_ the font information to use  @return the modified style definitions  @since _ClassPathElement_ ',non-directive
' Replaces the following style attributes of the font definition of the <code>html</code>  element:  <ul>  ',non-directive
'<li>font-size</li>  ',non-directive
'<li>font-weight</li>  ',non-directive
'<li>font-style</li>  ',non-directive
'<li>font-family</li>  </ul>  ',non-directive
'The font\'s name is used as font family, a <code>sans-serif</code> default font family is  appended for the case that the given font name is not available.  ',directive
'<p>  If the listed font attributes are not contained in the passed style list, nothing happens.  ',directive
'</p>   ',non-directive
'@param styles CSS style definitions  ',non-directive
'@param _ClassElement_ the font information to use  ',non-directive
'@return the modified style definitions  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Provides input for a {@link _ClassElement_}.   @since _ClassPathElement_ ',non-directive
' Provides input for a {',non-directive
'@link _ClassElement_}.   ',non-directive
'@since _ClassPathElement_ ',non-directive
' Returns the leading image width.   @return the size of the leading image, by default <code>0</code> is returned  @since _ClassPathElement_ ',non-directive
' Returns the leading image width.   ',non-directive
'@return the size of the leading image, by default <code>0</code> is returned  ',non-directive
'@since _ClassPathElement_ ',non-directive
' @return the HTML contents ',non-directive
?,non-directive
'@return the HTML contents ',non-directive
' Returns the HTML from {@link #_ClassElement_()}.  This is a fallback mode for platforms where the {@link _ClassElement_}  is not available and this input is passed to a {@link _ClassElement_}.   @return {@link #_ClassElement_()} ',non-directive
' Returns the HTML from {',non-directive
'@link #_ClassElement_()}.  ',non-directive
'This is a fallback mode for platforms where the {',directive
'@link _ClassElement_}  is not available and this input is passed to a {',directive
'@link _ClassElement_}.   ',directive
'@return {',non-directive
'@link #_ClassElement_()} ',non-directive
' Creates the next browser input with the given input as previous one.   @param previous the previous input or <code>null</code> if none ',non-directive
' Creates the next browser input with the given input as previous one.   ',non-directive
'@param previous the previous input or <code>null</code> if none ',directive
' <p>  Moved into this package from <code>_ClassPathElement_</code>.</p> ',non-directive
' <p>  Moved into this package from <code>_ClassPathElement_</code>.</p> ',non-directive
' @see Reader#read() ',non-directive
?,non-directive
'@see Reader#read() ',non-directive
' @see Reader#read(char[],int,int) ',non-directive
?,non-directive
'@see Reader#read(char[],int,int) ',non-directive
' @see Reader#ready() ',non-directive
?,non-directive
'@see Reader#ready() ',non-directive
' Returns the readable content as string.  @return the readable content as string  @exception IOException in case reading fails ',non-directive
' Returns the readable content as string.  ',non-directive
'@return the readable content as string  ',non-directive
'@exception IOException in case reading fails ',non-directive
?,non-directive
?,non-directive
' Tells whether the SWT Browser widget and hence this information  control is available.   @param parent the parent component used for checking or <code>null</code> if none  @return <code>true</code> if this control is available ',non-directive
' Tells whether the SWT Browser widget and hence this information  control is available.   ',non-directive
'@param parent the parent component used for checking or <code>null</code> if none  ',directive
'@return <code>true</code> if this control is available ',non-directive
?,non-directive
?,non-directive
' {@_ClassElement_}  @deprecated use {@link #_ClassElement_(Object)} ',directive
' {@_ClassElement_}  ',non-directive
'@deprecated use {',directive
'@link #_ClassElement_(Object)} ',directive
' {@_ClassElement_} This control can handle {@link String} and  {@link _ClassElement_}. ',directive
' {@_ClassElement_} This control can handle {',non-directive
'@link String} and  {',non-directive
'@link _ClassElement_}. ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Adds the listener to the collection of listeners who will be  notified when the current location has changed or is about to change.   @param listener the location listener  @since _ClassPathElement_ ',non-directive
' Adds the listener to the collection of listeners who will be  notified when the current location has changed or is about to change.   ',non-directive
'@param listener the location listener  ',non-directive
'@since _ClassPathElement_ ',non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
?,non-directive
' Adds a listener for input changes to this input change provider.  Has no effect if an identical listener is already registered.   @param _ClassElement_ the listener to add  @since _ClassPathElement_ ',non-directive
' Adds a listener for input changes to this input change provider.  ',non-directive
'Has no effect if an identical listener is already registered.   ',directive
'@param _ClassElement_ the listener to add  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Removes the given input change listener from this input change provider.  Has no effect if an identical listener is not registered.   @param _ClassElement_ the listener to remove  @since _ClassPathElement_ ',non-directive
' Removes the given input change listener from this input change provider.  ',non-directive
'Has no effect if an identical listener is not registered.   ',directive
'@param _ClassElement_ the listener to remove  ',non-directive
'@since _ClassPathElement_ ',non-directive
' Defines a functor interface implemented by classes that transform one  object into another.  <p>  A <code>Transformer</code> converts the input object to the output object.  The input object should be left unchanged.  Transformers are typically used for type conversions, or extracting data  from an object.  <p>  Standard implementations of common transformers are provided by  {@link _ClassElement_}. These include method invokation, returning a constant,  cloning and returning the string value.   @param <I> the input type to the transformer  @param <O> the output type from the transformer   @since Commons Collections _ClassPathElement_  @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $   @author James Strachan  @author Stephen Colebourne ',directive
' Defines a functor interface implemented by classes that transform one  object into another.  ',non-directive
'<p>  A <code>Transformer</code> converts the input object to the output object.  ',non-directive
'The input object should be left unchanged.  ',directive
'Transformers are typically used for type conversions, or extracting data  from an object.  ',non-directive
'<p>  Standard implementations of common transformers are provided by  {',non-directive
'@link _ClassElement_}. ',non-directive
'These include method invokation, returning a constant,  cloning and returning the string value.   ',directive
'@param <I> the input type to the transformer  ',non-directive
'@param <O> the output type from the transformer   ',non-directive
'@since Commons Collections _ClassPathElement_  ',non-directive
'@version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $   ',non-directive
'@author James Strachan  ',non-directive
'@author Stephen Colebourne ',non-directive
' <code>_ClassElement_</code> provides reference implementations and utilities  for the Closure functor interface. The supplied closures are:  <ul>  <li>Invoker - invokes a method on the input object  <li>For - repeatedly calls a closure for a fixed number of times  <li>While - repeatedly calls a closure while a predicate is true  <li>_ClassElement_ - repeatedly calls a closure while a predicate is true  <li>Chained - chains two or more closures together  <li>Switch - calls one closure based on one or more predicates  <li>_ClassElement_ - calls one closure looked up from a Map  <li>Transformer - wraps a Transformer as a Closure  <li>NOP - does nothing  <li>Exception - always throws an exception  </ul>  All the supplied closures are Serializable.   @since Commons Collections _ClassPathElement_  @version $Revision: 815034 $ $Date: 2009-09-15 07:54:39 +0200 (Tue, 15 Sep 2009) $   @author Stephen Colebourne  @author Matt Benson ',directive
' <code>_ClassElement_</code> provides reference implementations and utilities  for the Closure functor interface. ',non-directive
'The supplied closures are:  <ul>  ',non-directive
'<li>Invoker - invokes a method on the input object  ',directive
'<li>For - repeatedly calls a closure for a fixed number of times  ',directive
'<li>While - repeatedly calls a closure while a predicate is true  ',directive
'<li>_ClassElement_ - repeatedly calls a closure while a predicate is true  ',directive
'<li>Chained - chains two or more closures together  ',non-directive
'<li>Switch - calls one closure based on one or more predicates  ',directive
'<li>_ClassElement_ - calls one closure looked up from a Map  ',directive
'<li>Transformer - wraps a Transformer as a Closure  ',non-directive
'<li>NOP - does nothing  ',non-directive
'<li>Exception - always throws an exception  </ul>  ',non-directive
'All the supplied closures are Serializable.   ',non-directive
'@since Commons Collections _ClassPathElement_  ',non-directive
'@version $Revision: 815034 $ $Date: 2009-09-15 07:54:39 +0200 (Tue, 15 Sep 2009) $   ',non-directive
'@author Stephen Colebourne  ',non-directive
'@author Matt Benson ',non-directive
' Gets a Closure that always throws an exception.  This could be useful during testing as a placeholder.   @see _ClassPathElement_    @return the closure ',non-directive
' Gets a Closure that always throws an exception.  ',non-directive
'This could be useful during testing as a placeholder.   ',non-directive
'@see _ClassPathElement_    ',non-directive
'@return the closure ',non-directive
' Gets a Closure that will do nothing.  This could be useful during testing as a placeholder.   @see _ClassPathElement_    @return the closure ',non-directive
' Gets a Closure that will do nothing.  ',non-directive
'This could be useful during testing as a placeholder.   ',non-directive
'@see _ClassPathElement_    ',non-directive
'@return the closure ',non-directive
' Creates a Closure that will call the closure <code>count</code> times.  <p>  A null closure or zero count returns the <code>NOPClosure</code>.   @see _ClassPathElement_    @param count  the number of times to loop  @param closure  the closure to call repeatedly  @return the <code>for</code> closure ',directive
' Creates a Closure that will call the closure <code>count</code> times.  ',directive
'<p>  A null closure or zero count returns the <code>NOPClosure</code>.   ',non-directive
'@see _ClassPathElement_    ',non-directive
'@param count  the number of times to loop  ',non-directive
'@param closure  the closure to call repeatedly  ',directive
'@return the <code>for</code> closure ',non-directive
' Creates a Closure that will call the closure repeatedly until the   predicate returns false.   @see _ClassPathElement_    @param predicate  the predicate to use as an end of loop test, not null  @param closure  the closure to call repeatedly, not null  @return the <code>while</code> closure  @throws _ClassElement_ if either argument is null ',directive
' Creates a Closure that will call the closure repeatedly until the   predicate returns false.   ',directive
'@see _ClassPathElement_    ',non-directive
'@param predicate  the predicate to use as an end of loop test, not null  ',non-directive
'@param closure  the closure to call repeatedly, not null  ',directive
'@return the <code>while</code> closure  ',non-directive
'@throws _ClassElement_ if either argument is null ',non-directive
' Creates a Closure that will invoke a specific method on the closure\'s  input object by reflection.   @see _ClassPathElement_  @see _ClassPathElement_    @param _ClassElement_  the name of the method  @return the <code>invoker</code> closure  @throws _ClassElement_ if the method name is null ',directive
' Creates a Closure that will invoke a specific method on the closure\'s  input object by reflection.   ',directive
'@see _ClassPathElement_  ',directive
'@see _ClassPathElement_    ',non-directive
'@param _ClassElement_  the name of the method  ',non-directive
'@return the <code>invoker</code> closure  ',directive
'@throws _ClassElement_ if the method name is null ',non-directive
' Creates a Closure that will invoke a specific method on the closure\'s  input object by reflection.   @see _ClassPathElement_  @see _ClassPathElement_    @param _ClassElement_  the name of the method  @param _ClassElement_  the parameter types  @param args  the arguments  @return the <code>invoker</code> closure  @throws _ClassElement_ if the method name is null  @throws _ClassElement_ if the _ClassElement_ and args don\'t match ',directive
' Creates a Closure that will invoke a specific method on the closure\'s  input object by reflection.   ',directive
'@see _ClassPathElement_  ',directive
'@see _ClassPathElement_    ',non-directive
'@param _ClassElement_  the name of the method  ',non-directive
'@param _ClassElement_  the parameter types  ',non-directive
'@param args  the arguments  ',non-directive
'@return the <code>invoker</code> closure  ',directive
'@throws _ClassElement_ if the method name is null  ',non-directive
'@throws _ClassElement_ if the _ClassElement_ and args don\'t match ',non-directive
' Create a new Closure that calls two Closures, passing the result of  the first into the second.    @see _ClassPathElement_    @param closure1  the first closure  @param closure2  the second closure  @return the <code>chained</code> closure  @throws _ClassElement_ if either closure is null ',directive
' Create a new Closure that calls two Closures, passing the result of  the first into the second.   ',directive
?,non-directive
'@see _ClassPathElement_    ',non-directive
'@param closure1  the first closure  ',non-directive
'@param closure2  the second closure  ',non-directive
'@return the <code>chained</code> closure  ',non-directive
'@throws _ClassElement_ if either closure is null ',non-directive
' Create a new Closure that calls each closure in turn, passing the   result into the next closure.    @see _ClassPathElement_    @param closures  an array of closures to chain  @return the <code>chained</code> closure  @throws _ClassElement_ if the closures array is null  @throws _ClassElement_ if any closure in the array is null ',directive
' Create a new Closure that calls each closure in turn, passing the   result into the next closure.   ',directive
?,non-directive
'@see _ClassPathElement_    ',non-directive
'@param closures  an array of closures to chain  ',non-directive
'@return the <code>chained</code> closure  ',non-directive
'@throws _ClassElement_ if the closures array is null  ',non-directive
'@throws _ClassElement_ if any closure in the array is null ',non-directive
' Create a new Closure that calls each closure in turn, passing the   result into the next closure. The ordering is that of the iterator()  method on the collection.    @see _ClassPathElement_    @param closures  a collection of closures to chain  @return the <code>chained</code> closure  @throws _ClassElement_ if the closures collection is null  @throws _ClassElement_ if the closures collection is empty  @throws _ClassElement_ if any closure in the collection is null ',directive
' Create a new Closure that calls each closure in turn, passing the   result into the next closure. ',directive
'The ordering is that of the iterator()  method on the collection.   ',non-directive
?,non-directive
'@see _ClassPathElement_    ',non-directive
'@param closures  a collection of closures to chain  ',non-directive
'@return the <code>chained</code> closure  ',non-directive
'@throws _ClassElement_ if the closures collection is null  ',non-directive
'@throws _ClassElement_ if the closures collection is empty  ',non-directive
'@throws _ClassElement_ if any closure in the collection is null ',non-directive
' Create a new Closure that calls another closure based on the  result of the specified predicate.    @see _ClassPathElement_    @param predicate  the validating predicate  @param _ClassElement_  the closure called if the predicate is true  @return the <code>if</code> closure  @throws _ClassElement_ if the predicate is null  @throws _ClassElement_ if the closure is null  @since Commons Collections _ClassPathElement_ ',directive
' Create a new Closure that calls another closure based on the  result of the specified predicate.   ',directive
?,non-directive
'@see _ClassPathElement_    ',non-directive
'@param predicate  the validating predicate  ',non-directive
'@param _ClassElement_  the closure called if the predicate is true  ',directive
'@return the <code>if</code> closure  ',non-directive
'@throws _ClassElement_ if the predicate is null  ',non-directive
'@throws _ClassElement_ if the closure is null  ',non-directive
'@since Commons Collections _ClassPathElement_ ',non-directive
' Create a new Closure that calls one of two closures depending   on the specified predicate.    @see _ClassPathElement_    @param predicate  the predicate to switch on  @param _ClassElement_  the closure called if the predicate is true  @param _ClassElement_  the closure called if the predicate is false  @return the <code>switch</code> closure  @throws _ClassElement_ if the predicate is null  @throws _ClassElement_ if either closure is null ',directive
' Create a new Closure that calls one of two closures depending   on the specified predicate.   ',directive
?,non-directive
'@see _ClassPathElement_    ',non-directive
'@param predicate  the predicate to switch on  ',non-directive
'@param _ClassElement_  the closure called if the predicate is true  ',directive
'@param _ClassElement_  the closure called if the predicate is false  ',directive
'@return the <code>switch</code> closure  ',non-directive
'@throws _ClassElement_ if the predicate is null  ',non-directive
'@throws _ClassElement_ if either closure is null ',non-directive
' Create a new Closure that calls one of the closures depending   on the predicates.  <p>  The closure at array location 0 is called if the predicate at array   location 0 returned true. Each predicate is evaluated  until one returns true.    @see _ClassPathElement_    @param predicates  an array of predicates to check, not null  @param closures  an array of closures to call, not null  @return the <code>switch</code> closure  @throws _ClassElement_ if the either array is null  @throws _ClassElement_ if any element in the arrays is null  @throws _ClassElement_ if the arrays are different sizes ',directive
' Create a new Closure that calls one of the closures depending   on the predicates.  ',directive
'<p>  The closure at array location 0 is called if the predicate at array   location 0 returned true. ',directive
'Each predicate is evaluated  until one returns true.   ',non-directive
?,non-directive
'@see _ClassPathElement_    ',non-directive
'@param predicates  an array of predicates to check, not null  ',non-directive
'@param closures  an array of closures to call, not null  ',directive
'@return the <code>switch</code> closure  ',non-directive
'@throws _ClassElement_ if the either array is null  ',non-directive
'@throws _ClassElement_ if any element in the arrays is null  ',non-directive
'@throws _ClassElement_ if the arrays are different sizes ',non-directive
' Create a new Closure that calls one of the closures depending   on the predicates.  <p>  The closure at array location 0 is called if the predicate at array  location 0 returned true. Each predicate is evaluated  until one returns true. If no predicates evaluate to true, the default  closure is called.    @see _ClassPathElement_    @param predicates  an array of predicates to check, not null  @param closures  an array of closures to call, not null  @param _ClassElement_  the default to call if no predicate matches  @return the <code>switch</code> closure  @throws _ClassElement_ if the either array is null  @throws _ClassElement_ if any element in the arrays is null  @throws _ClassElement_ if the arrays are different sizes ',directive
' Create a new Closure that calls one of the closures depending   on the predicates.  ',directive
'<p>  The closure at array location 0 is called if the predicate at array  location 0 returned true. ',directive
'Each predicate is evaluated  until one returns true. ',non-directive
'If no predicates evaluate to true, the default  closure is called.   ',directive
?,non-directive
'@see _ClassPathElement_    ',non-directive
'@param predicates  an array of predicates to check, not null  ',non-directive
'@param closures  an array of closures to call, not null  ',directive
'@param _ClassElement_  the default to call if no predicate matches  ',directive
'@return the <code>switch</code> closure  ',non-directive
'@throws _ClassElement_ if the either array is null  ',non-directive
'@throws _ClassElement_ if any element in the arrays is null  ',non-directive
'@throws _ClassElement_ if the arrays are different sizes ',non-directive
' Create a new Closure that calls one of the closures depending   on the predicates.   <p>  The Map consists of Predicate keys and Closure values. A closure   is called if its matching predicate returns true. Each predicate is evaluated  until one returns true. If no predicates evaluate to true, the default  closure is called. The default closure is set in the map with a   null key. The ordering is that of the iterator() method on the entryset   collection of the map.    @see _ClassPathElement_    @param _ClassElement_  a map of predicates to closures  @return the <code>switch</code> closure  @throws _ClassElement_ if the map is null  @throws _ClassElement_ if the map is empty  @throws _ClassElement_ if any closure in the map is null  @throws _ClassElement_  if the map elements are of the wrong type ',directive
' Create a new Closure that calls one of the closures depending   on the predicates.   ',directive
'<p>  The Map consists of Predicate keys and Closure values. ',non-directive
'A closure   is called if its matching predicate returns true. ',directive
'Each predicate is evaluated  until one returns true. ',non-directive
'If no predicates evaluate to true, the default  closure is called. ',directive
'The default closure is set in the map with a   null key. ',non-directive
'The ordering is that of the iterator() method on the entryset   collection of the map.   ',non-directive
?,non-directive
'@see _ClassPathElement_    ',non-directive
'@param _ClassElement_  a map of predicates to closures  ',non-directive
'@return the <code>switch</code> closure  ',non-directive
'@throws _ClassElement_ if the map is null  ',non-directive
'@throws _ClassElement_ if the map is empty  ',non-directive
'@throws _ClassElement_ if any closure in the map is null  ',non-directive
'@throws _ClassElement_  if the map elements are of the wrong type ',non-directive
' Create a new Closure that uses the input object as a key to find the  closure to call.   <p>  The Map consists of object keys and Closure values. A closure   is called if the input object equals the key. If there is no match, the  default closure is called. The default closure is set in the map  using a null key.    @see _ClassPathElement_    @param _ClassElement_  a map of objects to closures  @return the closure  @throws _ClassElement_ if the map is null  @throws _ClassElement_ if the map is empty  @throws _ClassElement_ if any closure in the map is null ',directive
' Create a new Closure that uses the input object as a key to find the  closure to call.   ',directive
'<p>  The Map consists of object keys and Closure values. ',non-directive
'A closure   is called if the input object equals the key. ',directive
'If there is no match, the  default closure is called. ',directive
'The default closure is set in the map  using a null key.   ',non-directive
?,non-directive
'@see _ClassPathElement_    ',non-directive
'@param _ClassElement_  a map of objects to closures  ',non-directive
'@return the closure  ',non-directive
'@throws _ClassElement_ if the map is null  ',non-directive
'@throws _ClassElement_ if the map is empty  ',non-directive
'@throws _ClassElement_ if any closure in the map is null ',non-directive
' This class is not normally instantiated. ',non-directive
' This class is not normally instantiated. ',non-directive
' Get the comparator used for the values in the value-to-key map aspect.  @return Comparator<? super V> ',directive
' Get the comparator used for the values in the value-to-key map aspect.  ',non-directive
'@return Comparator<? super V> ',directive
' Provides utility methods for {@link Enumeration} instances.   @since Commons Collections _ClassPathElement_  @version $Id: _ClassPathElement_ 814997 2009-09-15 05:29:56Z bayard $   @author <a href=\"mailto:ggregory@_ClassPathElement_\">Gary Gregory</a> ',non-directive
' Provides utility methods for {',non-directive
'@link Enumeration} instances.   ',non-directive
'@since Commons Collections _ClassPathElement_  ',non-directive
'@version $Id: _ClassPathElement_ 814997 2009-09-15 05:29:56Z bayard $   ',non-directive
'@author <a href=\"mailto:ggregory@_ClassPathElement_\">Gary Gregory</a> ',non-directive
' _ClassElement_ is not normally instantiated. ',non-directive
' _ClassElement_ is not normally instantiated. ',non-directive
' Provides utility methods and decorators for  {@link Map} and {@link _ClassElement_} instances.  <p>  It contains various type safe methods  as well as other useful features like deep copying.  <p>  It also provides the following decorators:    <ul>   <li>{@link #_ClassElement_(Map)}   <li>{@link #_ClassElement_(_ClassElement_)}   <li>{@link #_ClassElement_(Map,Factory)}   <li>{@link #_ClassElement_(Map,Transformer)}   <li>{@link #_ClassElement_(_ClassElement_,Factory)}   <li>{@link #_ClassElement_(_ClassElement_,Transformer)}   <li>{@link #_ClassElement_(Map,Predicate,Predicate)}   <li>{@link #_ClassElement_(_ClassElement_,Predicate,Predicate)}   <li>{@link #_ClassElement_(Map, Transformer, Transformer)}   <li>{@link #_ClassElement_(_ClassElement_, Transformer, Transformer)}   <li>{@link #_ClassElement_( Map )}   <li>{@link #_ClassElement_( Map, Class )}   <li>{@link #_ClassElement_( Map, Factory )}   </ul>   @since Commons Collections _ClassPathElement_  @version $Revision: 956291 $ $Date: 2010-06-19 22:30:20 +0200 (Sat, 19 Jun 2010) $   @author <a href=\"mailto:jstrachan@_ClassPathElement_\">James Strachan</a>  @author <a href=\"mailto:nissim@_ClassPathElement_\">Nissim Karpenstein</a>  @author <a href=\"mailto:knielsen@_ClassPathElement_\">Kasper Nielsen</a>  @author Paul Jack  @author Stephen Colebourne  @author Matthew Hawthorne  @author Arun Mammen Thomas  @author Janek Bogucki  @author Max Rydahl Andersen  @author <a href=\"mailto:equinus100@_ClassPathElement_\">Ashwin S</a>  @author <a href=\"mailto:jcarman@_ClassPathElement_\">James Carman</a>  @author Neil O\'Toole ',non-directive
' Provides utility methods and decorators for  {',non-directive
'@link Map} and {',non-directive
'@link _ClassElement_} instances.  ',non-directive
'<p>  It contains various type safe methods  as well as other useful features like deep copying.  ',non-directive
'<p>  It also provides the following decorators:    <ul>   ',non-directive
'<li>{',non-directive
'@link #_ClassElement_(Map)}   ',non-directive
'<li>{',non-directive
'@link #_ClassElement_(_ClassElement_)}   ',non-directive
'<li>{',non-directive
'@link #_ClassElement_(Map,Factory)}   ',non-directive
'<li>{',non-directive
'@link #_ClassElement_(Map,Transformer)}   ',non-directive
'<li>{',non-directive
'@link #_ClassElement_(_ClassElement_,Factory)}   ',non-directive
'<li>{',non-directive
'@link #_ClassElement_(_ClassElement_,Transformer)}   ',non-directive
'<li>{',non-directive
'@link #_ClassElement_(Map,Predicate,Predicate)}   ',non-directive
'<li>{',non-directive
'@link #_ClassElement_(_ClassElement_,Predicate,Predicate)}   ',non-directive
'<li>{',non-directive
'@link #_ClassElement_(Map, Transformer, Transformer)}   ',non-directive
'<li>{',non-directive
'@link #_ClassElement_(_ClassElement_, Transformer, Transformer)}   ',non-directive
'<li>{',non-directive
'@link #_ClassElement_( Map )}   ',non-directive
'<li>{',non-directive
'@link #_ClassElement_( Map, Class )}   ',non-directive
'<li>{',non-directive
'@link #_ClassElement_( Map, Factory )}   </ul>   ',non-directive
'@since Commons Collections _ClassPathElement_  ',non-directive
'@version $Revision: 956291 $ $Date: 2010-06-19 22:30:20 +0200 (Sat, 19 Jun 2010) $   ',non-directive
'@author <a href=\"mailto:jstrachan@_ClassPathElement_\">James Strachan</a>  ',non-directive
'@author <a href=\"mailto:nissim@_ClassPathElement_\">Nissim Karpenstein</a>  ',non-directive
'@author <a href=\"mailto:knielsen@_ClassPathElement_\">Kasper Nielsen</a>  ',non-directive
'@author Paul Jack  ',non-directive
'@author Stephen Colebourne  ',non-directive
'@author Matthew Hawthorne  ',non-directive
'@author Arun Mammen Thomas  ',non-directive
'@author Janek Bogucki  ',non-directive
'@author Max Rydahl Andersen  ',non-directive
'@author <a href=\"mailto:equinus100@_ClassPathElement_\">Ashwin S</a>  ',non-directive
'@author <a href=\"mailto:jcarman@_ClassPathElement_\">James Carman</a>  ',non-directive
'@author Neil O\'Toole ',non-directive
' Gets from a Map in a null-safe manner.   @param map  the map to use  @param key  the key to look up  @return the value in the Map, <code>null</code> if null map input ',non-directive
' Gets from a Map in a null-safe manner.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map, <code>null</code> if null map input ',non-directive
' Gets a String from a Map in a null-safe manner.  <p>  The String is obtained via <code>_ClassElement_</code>.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a String, <code>null</code> if null map input ',non-directive
' Gets a String from a Map in a null-safe manner.  ',non-directive
'<p>  The String is obtained via <code>_ClassElement_</code>.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a String, <code>null</code> if null map input ',non-directive
' Gets a Boolean from a Map in a null-safe manner.  <p>  If the value is a <code>Boolean</code> it is returned directly.  If the value is a <code>String</code> and it equals \'true\' ignoring case  then <code>true</code> is returned, otherwise <code>false</code>.  If the value is a <code>Number</code> an integer zero value returns  <code>false</code> and non-zero returns <code>true</code>.  Otherwise, <code>null</code> is returned.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a Boolean, <code>null</code> if null map input ',non-directive
' Gets a Boolean from a Map in a null-safe manner.  ',non-directive
'<p>  If the value is a <code>Boolean</code> it is returned directly.  ',non-directive
'If the value is a <code>String</code> and it equals \'true\' ignoring case  then <code>true</code> is returned, otherwise <code>false</code>.  ',non-directive
'If the value is a <code>Number</code> an integer zero value returns  <code>false</code> and non-zero returns <code>true</code>.  ',non-directive
'Otherwise, <code>null</code> is returned.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a Boolean, <code>null</code> if null map input ',non-directive
' Gets a Number from a Map in a null-safe manner.  <p>  If the value is a <code>Number</code> it is returned directly.  If the value is a <code>String</code> it is converted using  {@link _ClassElement_#parse(String)} on the system default formatter  returning <code>null</code> if the conversion fails.  Otherwise, <code>null</code> is returned.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a Number, <code>null</code> if null map input ',non-directive
' Gets a Number from a Map in a null-safe manner.  ',non-directive
'<p>  If the value is a <code>Number</code> it is returned directly.  ',non-directive
'If the value is a <code>String</code> it is converted using  {',non-directive
'@link _ClassElement_#parse(String)} on the system default formatter  returning <code>null</code> if the conversion fails.  ',non-directive
'Otherwise, <code>null</code> is returned.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a Number, <code>null</code> if null map input ',non-directive
' Gets a Byte from a Map in a null-safe manner.  <p>  The Byte is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a Byte, <code>null</code> if null map input ',non-directive
' Gets a Byte from a Map in a null-safe manner.  ',non-directive
'<p>  The Byte is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a Byte, <code>null</code> if null map input ',non-directive
' Gets a Short from a Map in a null-safe manner.  <p>  The Short is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a Short, <code>null</code> if null map input ',non-directive
' Gets a Short from a Map in a null-safe manner.  ',non-directive
'<p>  The Short is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a Short, <code>null</code> if null map input ',non-directive
' Gets a Integer from a Map in a null-safe manner.  <p>  The Integer is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a Integer, <code>null</code> if null map input ',non-directive
' Gets a Integer from a Map in a null-safe manner.  ',non-directive
'<p>  The Integer is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a Integer, <code>null</code> if null map input ',non-directive
' Gets a Long from a Map in a null-safe manner.  <p>  The Long is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a Long, <code>null</code> if null map input ',non-directive
' Gets a Long from a Map in a null-safe manner.  ',non-directive
'<p>  The Long is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a Long, <code>null</code> if null map input ',non-directive
' Gets a Float from a Map in a null-safe manner.  <p>  The Float is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a Float, <code>null</code> if null map input ',non-directive
' Gets a Float from a Map in a null-safe manner.  ',non-directive
'<p>  The Float is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a Float, <code>null</code> if null map input ',non-directive
' Gets a Double from a Map in a null-safe manner.  <p>  The Double is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a Double, <code>null</code> if null map input ',non-directive
' Gets a Double from a Map in a null-safe manner.  ',non-directive
'<p>  The Double is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a Double, <code>null</code> if null map input ',non-directive
' Gets a Map from a Map in a null-safe manner.  <p>  If the value returned from the specified map is not a Map then  <code>null</code> is returned.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a Map, <code>null</code> if null map input ',non-directive
' Gets a Map from a Map in a null-safe manner.  ',non-directive
'<p>  If the value returned from the specified map is not a Map then  <code>null</code> is returned.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a Map, <code>null</code> if null map input ',non-directive
'  Looks up the given key in the given map, converting null into the   given default value.    @param map  the map whose value to look up   @param key  the key of the value to look up in that map   @param _ClassElement_  what to return if the value is null   @return  the value in the map, or _ClassElement_ if the original value     is null or the map is null ',non-directive
'  Looks up the given key in the given map, converting null into the   given default value.    ',non-directive
'@param map  the map whose value to look up   ',non-directive
'@param key  the key of the value to look up in that map   ',non-directive
'@param _ClassElement_  what to return if the value is null   ',non-directive
'@return  the value in the map, or _ClassElement_ if the original value     is null or the map is null ',non-directive
'  Looks up the given key in the given map, converting the result into   a string, using the default value if the the conversion fails.    @param map  the map whose value to look up   @param key  the key of the value to look up in that map   @param _ClassElement_  what to return if the value is null or if the      conversion fails   @return  the value in the map as a string, or _ClassElement_ if the     original value is null, the map is null or the string conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a string, using the default value if the the conversion fails.    ',non-directive
'@param map  the map whose value to look up   ',non-directive
'@param key  the key of the value to look up in that map   ',non-directive
'@param _ClassElement_  what to return if the value is null or if the      conversion fails   ',non-directive
'@return  the value in the map as a string, or _ClassElement_ if the     original value is null, the map is null or the string conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a boolean, using the default value if the the conversion fails.    @param map  the map whose value to look up   @param key  the key of the value to look up in that map   @param _ClassElement_  what to return if the value is null or if the      conversion fails   @return  the value in the map as a boolean, or _ClassElement_ if the     original value is null, the map is null or the boolean conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a boolean, using the default value if the the conversion fails.    ',non-directive
'@param map  the map whose value to look up   ',non-directive
'@param key  the key of the value to look up in that map   ',non-directive
'@param _ClassElement_  what to return if the value is null or if the      conversion fails   ',non-directive
'@return  the value in the map as a boolean, or _ClassElement_ if the     original value is null, the map is null or the boolean conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a number, using the default value if the the conversion fails.    @param map  the map whose value to look up   @param key  the key of the value to look up in that map   @param _ClassElement_  what to return if the value is null or if the      conversion fails   @return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a number, using the default value if the the conversion fails.    ',non-directive
'@param map  the map whose value to look up   ',non-directive
'@param key  the key of the value to look up in that map   ',non-directive
'@param _ClassElement_  what to return if the value is null or if the      conversion fails   ',non-directive
'@return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a byte, using the default value if the the conversion fails.    @param map  the map whose value to look up   @param key  the key of the value to look up in that map   @param _ClassElement_  what to return if the value is null or if the      conversion fails   @return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a byte, using the default value if the the conversion fails.    ',non-directive
'@param map  the map whose value to look up   ',non-directive
'@param key  the key of the value to look up in that map   ',non-directive
'@param _ClassElement_  what to return if the value is null or if the      conversion fails   ',non-directive
'@return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a short, using the default value if the the conversion fails.    @param map  the map whose value to look up   @param key  the key of the value to look up in that map   @param _ClassElement_  what to return if the value is null or if the      conversion fails   @return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a short, using the default value if the the conversion fails.    ',non-directive
'@param map  the map whose value to look up   ',non-directive
'@param key  the key of the value to look up in that map   ',non-directive
'@param _ClassElement_  what to return if the value is null or if the      conversion fails   ',non-directive
'@return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   an integer, using the default value if the the conversion fails.    @param map  the map whose value to look up   @param key  the key of the value to look up in that map   @param _ClassElement_  what to return if the value is null or if the      conversion fails   @return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   an integer, using the default value if the the conversion fails.    ',non-directive
'@param map  the map whose value to look up   ',non-directive
'@param key  the key of the value to look up in that map   ',non-directive
'@param _ClassElement_  what to return if the value is null or if the      conversion fails   ',non-directive
'@return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a long, using the default value if the the conversion fails.    @param map  the map whose value to look up   @param key  the key of the value to look up in that map   @param _ClassElement_  what to return if the value is null or if the      conversion fails   @return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a long, using the default value if the the conversion fails.    ',non-directive
'@param map  the map whose value to look up   ',non-directive
'@param key  the key of the value to look up in that map   ',non-directive
'@param _ClassElement_  what to return if the value is null or if the      conversion fails   ',non-directive
'@return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a float, using the default value if the the conversion fails.    @param map  the map whose value to look up   @param key  the key of the value to look up in that map   @param _ClassElement_  what to return if the value is null or if the      conversion fails   @return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a float, using the default value if the the conversion fails.    ',non-directive
'@param map  the map whose value to look up   ',non-directive
'@param key  the key of the value to look up in that map   ',non-directive
'@param _ClassElement_  what to return if the value is null or if the      conversion fails   ',non-directive
'@return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a double, using the default value if the the conversion fails.    @param map  the map whose value to look up   @param key  the key of the value to look up in that map   @param _ClassElement_  what to return if the value is null or if the      conversion fails   @return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a double, using the default value if the the conversion fails.    ',non-directive
'@param map  the map whose value to look up   ',non-directive
'@param key  the key of the value to look up in that map   ',non-directive
'@param _ClassElement_  what to return if the value is null or if the      conversion fails   ',non-directive
'@return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the number conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a map, using the default value if the the conversion fails.    @param map  the map whose value to look up   @param key  the key of the value to look up in that map   @param _ClassElement_  what to return if the value is null or if the      conversion fails   @return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the map conversion     fails ',non-directive
'  Looks up the given key in the given map, converting the result into   a map, using the default value if the the conversion fails.    ',non-directive
'@param map  the map whose value to look up   ',non-directive
'@param key  the key of the value to look up in that map   ',non-directive
'@param _ClassElement_  what to return if the value is null or if the      conversion fails   ',non-directive
'@return  the value in the map as a number, or _ClassElement_ if the     original value is null, the map is null or the map conversion     fails ',non-directive
' Gets a boolean from a Map in a null-safe manner.  <p>  If the value is a <code>Boolean</code> its value is returned.  If the value is a <code>String</code> and it equals \'true\' ignoring case  then <code>true</code> is returned, otherwise <code>false</code>.  If the value is a <code>Number</code> an integer zero value returns  <code>false</code> and non-zero returns <code>true</code>.  Otherwise, <code>false</code> is returned.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a Boolean, <code>false</code> if null map input ',non-directive
' Gets a boolean from a Map in a null-safe manner.  ',non-directive
'<p>  If the value is a <code>Boolean</code> its value is returned.  ',non-directive
'If the value is a <code>String</code> and it equals \'true\' ignoring case  then <code>true</code> is returned, otherwise <code>false</code>.  ',non-directive
'If the value is a <code>Number</code> an integer zero value returns  <code>false</code> and non-zero returns <code>true</code>.  ',non-directive
'Otherwise, <code>false</code> is returned.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a Boolean, <code>false</code> if null map input ',non-directive
' Gets a byte from a Map in a null-safe manner.  <p>  The byte is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a byte, <code>0</code> if null map input ',non-directive
' Gets a byte from a Map in a null-safe manner.  ',non-directive
'<p>  The byte is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a byte, <code>0</code> if null map input ',non-directive
' Gets a short from a Map in a null-safe manner.  <p>  The short is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a short, <code>0</code> if null map input ',non-directive
' Gets a short from a Map in a null-safe manner.  ',non-directive
'<p>  The short is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a short, <code>0</code> if null map input ',non-directive
' Gets an int from a Map in a null-safe manner.  <p>  The int is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as an int, <code>0</code> if null map input ',non-directive
' Gets an int from a Map in a null-safe manner.  ',non-directive
'<p>  The int is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as an int, <code>0</code> if null map input ',non-directive
' Gets a long from a Map in a null-safe manner.  <p>  The long is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a long, <code>0L</code> if null map input ',non-directive
' Gets a long from a Map in a null-safe manner.  ',non-directive
'<p>  The long is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a long, <code>0L</code> if null map input ',non-directive
' Gets a float from a Map in a null-safe manner.  <p>  The float is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a float, <code>_ClassPathElement_</code> if null map input ',non-directive
' Gets a float from a Map in a null-safe manner.  ',non-directive
'<p>  The float is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a float, <code>_ClassPathElement_</code> if null map input ',non-directive
' Gets a double from a Map in a null-safe manner.  <p>  The double is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @return the value in the Map as a double, <code>_ClassPathElement_</code> if null map input ',non-directive
' Gets a double from a Map in a null-safe manner.  ',non-directive
'<p>  The double is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@return the value in the Map as a double, <code>_ClassPathElement_</code> if null map input ',non-directive
' Gets a boolean from a Map in a null-safe manner,  using the default value if the the conversion fails.  <p>  If the value is a <code>Boolean</code> its value is returned.  If the value is a <code>String</code> and it equals \'true\' ignoring case  then <code>true</code> is returned, otherwise <code>false</code>.  If the value is a <code>Number</code> an integer zero value returns  <code>false</code> and non-zero returns <code>true</code>.  Otherwise, <code>_ClassElement_</code> is returned.   @param map  the map to use  @param key  the key to look up  @param _ClassElement_  return if the value is null or if the      conversion fails  @return the value in the Map as a Boolean, <code>_ClassElement_</code> if null map input ',non-directive
' Gets a boolean from a Map in a null-safe manner,  using the default value if the the conversion fails.  ',non-directive
'<p>  If the value is a <code>Boolean</code> its value is returned.  ',non-directive
'If the value is a <code>String</code> and it equals \'true\' ignoring case  then <code>true</code> is returned, otherwise <code>false</code>.  ',non-directive
'If the value is a <code>Number</code> an integer zero value returns  <code>false</code> and non-zero returns <code>true</code>.  ',non-directive
'Otherwise, <code>_ClassElement_</code> is returned.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@param _ClassElement_  return if the value is null or if the      conversion fails  ',non-directive
'@return the value in the Map as a Boolean, <code>_ClassElement_</code> if null map input ',non-directive
' Gets a byte from a Map in a null-safe manner,  using the default value if the the conversion fails.  <p>  The byte is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @param _ClassElement_  return if the value is null or if the      conversion fails  @return the value in the Map as a byte, <code>_ClassElement_</code> if null map input ',non-directive
' Gets a byte from a Map in a null-safe manner,  using the default value if the the conversion fails.  ',non-directive
'<p>  The byte is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@param _ClassElement_  return if the value is null or if the      conversion fails  ',non-directive
'@return the value in the Map as a byte, <code>_ClassElement_</code> if null map input ',non-directive
' Gets a short from a Map in a null-safe manner,  using the default value if the the conversion fails.  <p>  The short is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @param _ClassElement_  return if the value is null or if the      conversion fails  @return the value in the Map as a short, <code>_ClassElement_</code> if null map input ',non-directive
' Gets a short from a Map in a null-safe manner,  using the default value if the the conversion fails.  ',non-directive
'<p>  The short is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@param _ClassElement_  return if the value is null or if the      conversion fails  ',non-directive
'@return the value in the Map as a short, <code>_ClassElement_</code> if null map input ',non-directive
' Gets an int from a Map in a null-safe manner,  using the default value if the the conversion fails.  <p>  The int is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @param _ClassElement_  return if the value is null or if the      conversion fails  @return the value in the Map as an int, <code>_ClassElement_</code> if null map input ',non-directive
' Gets an int from a Map in a null-safe manner,  using the default value if the the conversion fails.  ',non-directive
'<p>  The int is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@param _ClassElement_  return if the value is null or if the      conversion fails  ',non-directive
'@return the value in the Map as an int, <code>_ClassElement_</code> if null map input ',non-directive
' Gets a long from a Map in a null-safe manner,  using the default value if the the conversion fails.  <p>  The long is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @param _ClassElement_  return if the value is null or if the      conversion fails  @return the value in the Map as a long, <code>_ClassElement_</code> if null map input ',non-directive
' Gets a long from a Map in a null-safe manner,  using the default value if the the conversion fails.  ',non-directive
'<p>  The long is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@param _ClassElement_  return if the value is null or if the      conversion fails  ',non-directive
'@return the value in the Map as a long, <code>_ClassElement_</code> if null map input ',non-directive
' Gets a float from a Map in a null-safe manner,  using the default value if the the conversion fails.  <p>  The float is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @param _ClassElement_  return if the value is null or if the      conversion fails  @return the value in the Map as a float, <code>_ClassElement_</code> if null map input ',non-directive
' Gets a float from a Map in a null-safe manner,  using the default value if the the conversion fails.  ',non-directive
'<p>  The float is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@param _ClassElement_  return if the value is null or if the      conversion fails  ',non-directive
'@return the value in the Map as a float, <code>_ClassElement_</code> if null map input ',non-directive
' Gets a double from a Map in a null-safe manner,  using the default value if the the conversion fails.  <p>  The double is obtained from the results of {@link #_ClassElement_(Map,Object)}.   @param map  the map to use  @param key  the key to look up  @param _ClassElement_  return if the value is null or if the      conversion fails  @return the value in the Map as a double, <code>_ClassElement_</code> if null map input ',non-directive
' Gets a double from a Map in a null-safe manner,  using the default value if the the conversion fails.  ',non-directive
'<p>  The double is obtained from the results of {',non-directive
'@link #_ClassElement_(Map,Object)}.   ',non-directive
'@param map  the map to use  ',non-directive
'@param key  the key to look up  ',non-directive
'@param _ClassElement_  return if the value is null or if the      conversion fails  ',non-directive
'@return the value in the Map as a double, <code>_ClassElement_</code> if null map input ',non-directive
' Gets a new Properties object initialised with the values from a Map.  A null input will return an empty properties object.   @param map  the map to convert to a Properties object, may not be null  @return the properties object ',directive
' Gets a new Properties object initialised with the values from a Map.  ',non-directive
'A null input will return an empty properties object.   ',non-directive
'@param map  the map to convert to a Properties object, may not be null  ',directive
'@return the properties object ',non-directive
' Creates a new _ClassElement_ using data copied from a _ClassElement_.   @param _ClassElement_  the resource bundle to convert, may not be null  @return the hashmap containing the data  @throws _ClassElement_ if the bundle is null ',directive
' Creates a new _ClassElement_ using data copied from a _ClassElement_.   ',non-directive
'@param _ClassElement_  the resource bundle to convert, may not be null  ',directive
'@return the hashmap containing the data  ',non-directive
'@throws _ClassElement_ if the bundle is null ',non-directive
' Null-safe check if the specified map is empty.  <p>  Null returns true.   @param map  the map to check, may be null  @return true if empty or null  @since Commons Collections _ClassPathElement_ ',directive
' Null-safe check if the specified map is empty.  ',non-directive
'<p>  Null returns true.   ',non-directive
'@param map  the map to check, may be null  ',directive
'@return true if empty or null  ',non-directive
'@since Commons Collections _ClassPathElement_ ',non-directive
' Null-safe check if the specified map is not empty.  <p>  Null returns false.   @param map  the map to check, may be null  @return true if non-null and non-empty  @since Commons Collections _ClassPathElement_ ',directive
' Null-safe check if the specified map is not empty.  ',non-directive
'<p>  Null returns false.   ',non-directive
'@param map  the map to check, may be null  ',directive
'@return true if non-null and non-empty  ',non-directive
'@since Commons Collections _ClassPathElement_ ',non-directive
' Creates a mult-value map backed by the given map which returns  collections of type _ClassElement_.   @param map  the map to decorate  @return a multi-value map backed by the given map which returns _ClassElement_ of values.  @see _ClassElement_  @since Commons Collections _ClassPathElement_ ',non-directive
' Creates a mult-value map backed by the given map which returns  collections of type _ClassElement_.   ',non-directive
'@param map  the map to decorate  ',non-directive
'@return a multi-value map backed by the given map which returns _ClassElement_ of values.  ',non-directive
'@see _ClassElement_  ',non-directive
'@since Commons Collections _ClassPathElement_ ',non-directive
' Creates a multi-value map backed by the given map which returns  collections created by the specified collection factory.   @param map  the map to decorate  @param _ClassElement_  a factor which creates collection objects  @return a multi-value map backed by the given map which returns collections  created by the specified collection factory  @see _ClassElement_  @since Commons Collections _ClassPathElement_ ',non-directive
' Creates a multi-value map backed by the given map which returns  collections created by the specified collection factory.   ',non-directive
'@param map  the map to decorate  ',non-directive
'@param _ClassElement_  a factor which creates collection objects  ',non-directive
'@return a multi-value map backed by the given map which returns collections  created by the specified collection factory  ',non-directive
'@see _ClassElement_  ',non-directive
'@since Commons Collections _ClassPathElement_ ',non-directive
' <p>  Populates a Map using the supplied <code>Transformer</code> to transform the collection  values into keys, using the unaltered collection value as the value in the <code>Map</code>.  </p>  @param map the <code>Map</code> to populate.  @param collection the <code>Collection</code> to use as input values for the map.  @param _ClassElement_ the <code>Transformer</code> used to transform the collection value into a key value  @throws _ClassElement_ if the map, collection or transformer are null ',non-directive
' <p>  Populates a Map using the supplied <code>Transformer</code> to transform the collection  values into keys, using the unaltered collection value as the value in the <code>Map</code>.  ',non-directive
'</p>  ',non-directive
'@param map the <code>Map</code> to populate.  ',non-directive
'@param collection the <code>Collection</code> to use as input values for the map.  ',non-directive
'@param _ClassElement_ the <code>Transformer</code> used to transform the collection value into a key value  ',non-directive
'@throws _ClassElement_ if the map, collection or transformer are null ',non-directive
' <p>  Populates a Map using the supplied <code>Transformer</code>s to transform the collection  values into keys and values.  </p>  @param map the <code>Map</code> to populate.  @param collection the <code>Collection</code> to use as input values for the map.  @param _ClassElement_ the <code>Transformer</code> used to transform the collection value into a key value  @param _ClassElement_ the <code>Transformer</code> used to transform the collection value into a value  @throws _ClassElement_ if the map, collection or transformers are null ',non-directive
' <p>  Populates a Map using the supplied <code>Transformer</code>s to transform the collection  values into keys and values.  ',non-directive
'</p>  ',non-directive
'@param map the <code>Map</code> to populate.  ',non-directive
'@param collection the <code>Collection</code> to use as input values for the map.  ',non-directive
'@param _ClassElement_ the <code>Transformer</code> used to transform the collection value into a key value  ',non-directive
'@param _ClassElement_ the <code>Transformer</code> used to transform the collection value into a value  ',non-directive
'@throws _ClassElement_ if the map, collection or transformers are null ',non-directive
' Get the specified {@link Map} as an {@link _ClassElement_}.  @param <K>  @param <V>  @param map to wrap if necessary.  @return _ClassElement_<K, V>  @since Commons Collections 5  @TODO fix version ',directive
' Get the specified {',non-directive
'@link Map} as an {',non-directive
'@link _ClassElement_}.  ',non-directive
'@param <K>  ',non-directive
'@param <V>  ',non-directive
'@param map to wrap if necessary.  ',directive
'@return _ClassElement_<K, V>  ',non-directive
'@since Commons Collections 5  @TODO fix version ',non-directive
' Get the specified {@link _ClassElement_} as an {@link _ClassElement_}.  @param <K>  @param <V>  @param _ClassElement_ to wrap if necessary  @return {@link _ClassElement_}<K, V>  @since Commons Collections 5  @TODO fix version ',directive
' Get the specified {',non-directive
'@link _ClassElement_} as an {',non-directive
'@link _ClassElement_}.  ',non-directive
'@param <K>  ',non-directive
'@param <V>  ',non-directive
'@param _ClassElement_ to wrap if necessary  ',directive
'@return {',non-directive
'@link _ClassElement_}<K, V>  ',non-directive
'@since Commons Collections 5  @TODO fix version ',non-directive
' An empty unmodifiable map.  This was not provided in _ClassPathElement_. ',non-directive
' An empty unmodifiable map.  ',non-directive
'This was not provided in _ClassPathElement_. ',non-directive
' An empty unmodifiable sorted map.  This is not provided in the JDK. ',non-directive
' An empty unmodifiable sorted map.  ',non-directive
'This is not provided in the JDK. ',non-directive
' Defines an iterator that operates over an ordered <code>Map</code>.  <p>  This iterator allows both forward and reverse iteration through the map.   @param <K> the type of the keys in the map  @param <V> the type of the values in the map  @since Commons Collections _ClassPathElement_  @version $Revision: 815006 $ $Date: 2009-09-15 07:44:36 +0200 (Tue, 15 Sep 2009) $   @author Stephen Colebourne ',non-directive
' Defines an iterator that operates over an ordered <code>Map</code>.  ',non-directive
'<p>  This iterator allows both forward and reverse iteration through the map.   ',non-directive
'@param <K> the type of the keys in the map  ',non-directive
'@param <V> the type of the values in the map  ',non-directive
'@since Commons Collections _ClassPathElement_  ',non-directive
'@version $Revision: 815006 $ $Date: 2009-09-15 07:44:36 +0200 (Tue, 15 Sep 2009) $   ',non-directive
'@author Stephen Colebourne ',non-directive
' Checks to see if there is a previous entry that can be iterated to.   @return <code>true</code> if the iterator has a previous element ',non-directive
' Checks to see if there is a previous entry that can be iterated to.   ',non-directive
'@return <code>true</code> if the iterator has a previous element ',non-directive
' Gets the previous <em>key</em> from the <code>Map</code>.   @return the previous key in the iteration  @throws _ClassElement_ if the iteration is finished ',non-directive
' Gets the previous <em>key</em> from the <code>Map</code>.   ',non-directive
'@return the previous key in the iteration  ',non-directive
'@throws _ClassElement_ if the iteration is finished ',non-directive
' Defines a functor interface implemented by classes that create objects.  <p>  A <code>Factory</code> creates an object without using an input parameter.  If an input parameter is required, then {@link Transformer} is more appropriate.  <p>  Standard implementations of common factories are provided by  {@link _ClassElement_}. These include factories that return a constant,  a copy of a prototype or a new instance.   @param <T> the type that the factory creates   @since Commons Collections _ClassPathElement_  @version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $   @author Arron Bates  @author Stephen Colebourne ',directive
' Defines a functor interface implemented by classes that create objects.  ',non-directive
'<p>  A <code>Factory</code> creates an object without using an input parameter.  ',non-directive
'If an input parameter is required, then {',directive
'@link Transformer} is more appropriate.  ',non-directive
'<p>  Standard implementations of common factories are provided by  {',non-directive
'@link _ClassElement_}. ',non-directive
'These include factories that return a constant,  a copy of a prototype or a new instance.   ',non-directive
'@param <T> the type that the factory creates   ',non-directive
'@since Commons Collections _ClassPathElement_  ',non-directive
'@version $Revision: 814997 $ $Date: 2009-09-15 07:29:56 +0200 (Tue, 15 Sep 2009) $   ',non-directive
'@author Arron Bates  ',non-directive
'@author Stephen Colebourne ',non-directive
' Create a new object.   @return a new object  @throws _ClassElement_ (runtime) if the factory cannot create an object ',non-directive
' Create a new object.   ',non-directive
'@return a new object  ',non-directive
'@throws _ClassElement_ (runtime) if the factory cannot create an object ',non-directive
' Gets an empty ordered iterator.  <p>  This iterator is a valid iterator object that will iterate  over nothing.   @return  an ordered iterator over nothing ',non-directive
' Gets an empty ordered iterator.  ',non-directive
'<p>  This iterator is a valid iterator object that will iterate  over nothing.   ',non-directive
'@return  an ordered iterator over nothing ',non-directive
' Gets an empty map iterator.  <p>  This iterator is a valid map iterator object that will iterate  over nothing.   @return  a map iterator over nothing ',non-directive
' Gets an empty map iterator.  ',non-directive
'<p>  This iterator is a valid map iterator object that will iterate  over nothing.   ',non-directive
'@return  a map iterator over nothing ',non-directive
' Gets an empty ordered map iterator.  <p>  This iterator is a valid map iterator object that will iterate  over nothing.   @return  a map iterator over nothing ',non-directive
' Gets an empty ordered map iterator.  ',non-directive
'<p>  This iterator is a valid map iterator object that will iterate  over nothing.   ',non-directive
'@return  a map iterator over nothing ',non-directive
' Gets a singleton list iterator.  <p>  This iterator is a valid list iterator object that will iterate over  the specified object.   @param object  the single object over which to iterate  @return  a singleton list iterator over the object ',non-directive
' Gets a singleton list iterator.  ',non-directive
'<p>  This iterator is a valid list iterator object that will iterate over  the specified object.   ',non-directive
'@param object  the single object over which to iterate  ',non-directive
'@return  a singleton list iterator over the object ',non-directive
' Gets an iterator over an object or primitive array.  <p>  This method will handle primitive arrays as well as object arrays.  The primitives will be wrapped in the appropriate wrapper class.   @param array  the array over which to iterate  @return  an iterator over the array  @throws _ClassElement_ if the array is not an array  @throws _ClassElement_ if array is null ',non-directive
' Gets an iterator over an object or primitive array.  ',non-directive
'<p>  This method will handle primitive arrays as well as object arrays.  ',non-directive
'The primitives will be wrapped in the appropriate wrapper class.   ',non-directive
'@param array  the array over which to iterate  ',non-directive
'@return  an iterator over the array  ',non-directive
'@throws _ClassElement_ if the array is not an array  ',non-directive
'@throws _ClassElement_ if array is null ',non-directive
' Gets an iterator over the end part of an object or primitive array.  <p>  This method will handle primitive arrays as well as object arrays.  The primitives will be wrapped in the appropriate wrapper class.   @param array  the array over which to iterate  @param start  the index to start iterating at  @return an iterator over part of the array  @throws _ClassElement_ if the array is not an array  @throws _ClassElement_ if start is less than zero or greater   than the length of the array  @throws _ClassElement_ if array is null ',non-directive
' Gets an iterator over the end part of an object or primitive array.  ',non-directive
'<p>  This method will handle primitive arrays as well as object arrays.  ',non-directive
'The primitives will be wrapped in the appropriate wrapper class.   ',non-directive
'@param array  the array over which to iterate  ',non-directive
'@param start  the index to start iterating at  ',non-directive
'@return an iterator over part of the array  ',non-directive
'@throws _ClassElement_ if the array is not an array  ',non-directive
'@throws _ClassElement_ if start is less than zero or greater   than the length of the array  ',non-directive
'@throws _ClassElement_ if array is null ',non-directive
' Gets a list iterator over an object array.   @param array  the array over which to iterate  @return  a list iterator over the array  @throws _ClassElement_ if array is null ',non-directive
' Gets a list iterator over an object array.   ',non-directive
'@param array  the array over which to iterate  ',non-directive
'@return  a list iterator over the array  ',non-directive
'@throws _ClassElement_ if array is null ',non-directive
' Gets a list iterator over an object or primitive array.  <p>  This method will handle primitive arrays as well as object arrays.  The primitives will be wrapped in the appropriate wrapper class.   @param array  the array over which to iterate  @return  a list iterator over the array  @throws _ClassElement_ if the array is not an array  @throws _ClassElement_ if array is null ',non-directive
' Gets a list iterator over an object or primitive array.  ',non-directive
'<p>  This method will handle primitive arrays as well as object arrays.  ',non-directive
'The primitives will be wrapped in the appropriate wrapper class.   ',non-directive
'@param array  the array over which to iterate  ',non-directive
'@return  a list iterator over the array  ',non-directive
'@throws _ClassElement_ if the array is not an array  ',non-directive
'@throws _ClassElement_ if array is null ',non-directive
' Gets a list iterator over the end part of an object array.   @param array  the array over which to iterate  @param start  the index to start iterating at  @return a list iterator over part of the array  @throws _ClassElement_ if start is less than zero  @throws _ClassElement_ if array is null ',non-directive
' Gets a list iterator over the end part of an object array.   ',non-directive
'@param array  the array over which to iterate  ',non-directive
'@param start  the index to start iterating at  ',non-directive
'@return a list iterator over part of the array  ',non-directive
'@throws _ClassElement_ if start is less than zero  ',non-directive
'@throws _ClassElement_ if array is null ',non-directive
' Gets a list iterator over the end part of an object or primitive array.  <p>  This method will handle primitive arrays as well as object arrays.  The primitives will be wrapped in the appropriate wrapper class.   @param array  the array over which to iterate  @param start  the index to start iterating at  @return a list iterator over part of the array  @throws _ClassElement_ if the array is not an array  @throws _ClassElement_ if start is less than zero  @throws _ClassElement_ if array is null ',non-directive
' Gets a list iterator over the end part of an object or primitive array.  ',non-directive
'<p>  This method will handle primitive arrays as well as object arrays.  ',non-directive
'The primitives will be wrapped in the appropriate wrapper class.   ',non-directive
'@param array  the array over which to iterate  ',non-directive
'@param start  the index to start iterating at  ',non-directive
'@return a list iterator over part of the array  ',non-directive
'@throws _ClassElement_ if the array is not an array  ',non-directive
'@throws _ClassElement_ if start is less than zero  ',non-directive
'@throws _ClassElement_ if array is null ',non-directive
' Gets an immutable version of an {@link Iterator}. The returned object  will always throw an {@link _ClassElement_} for  the {@link Iterator#remove} method.   @param iterator  the iterator to make immutable  @return an immutable version of the iterator ',non-directive
' Gets an immutable version of an {',non-directive
'@link Iterator}. ',non-directive
'The returned object  will always throw an {',non-directive
'@link _ClassElement_} for  the {',non-directive
'@link Iterator#remove} method.   ',non-directive
'@param iterator  the iterator to make immutable  ',non-directive
'@return an immutable version of the iterator ',non-directive
' Gets an immutable version of a {@link _ClassElement_}. The returned object  will always throw an {@link _ClassElement_} for  the {@link Iterator#remove}, {@link _ClassElement_#add} and  {@link _ClassElement_#set} methods.   @param _ClassElement_  the iterator to make immutable  @return an immutable version of the iterator ',non-directive
' Gets an immutable version of a {',non-directive
'@link _ClassElement_}. ',non-directive
'The returned object  will always throw an {',non-directive
'@link _ClassElement_} for  the {',non-directive
'@link Iterator#remove}, {',non-directive
'@link _ClassElement_#add} and  {',non-directive
'@link _ClassElement_#set} methods.   ',non-directive
'@param _ClassElement_  the iterator to make immutable  ',non-directive
'@return an immutable version of the iterator ',non-directive
' Gets an immutable version of a {@link _ClassElement_}. The returned object  will always throw an {@link _ClassElement_} for  the {@link Iterator#remove}, {@link _ClassElement_#_ClassElement_(Object)} methods.   @param _ClassElement_  the iterator to make immutable  @return an immutable version of the iterator ',non-directive
' Gets an immutable version of a {',non-directive
'@link _ClassElement_}. ',non-directive
'The returned object  will always throw an {',non-directive
'@link _ClassElement_} for  the {',non-directive
'@link Iterator#remove}, {',non-directive
'@link _ClassElement_#_ClassElement_(Object)} methods.   ',non-directive
'@param _ClassElement_  the iterator to make immutable  ',non-directive
'@return an immutable version of the iterator ',non-directive
' Gets an iterator that iterates through two {@link Iterator}s  one after another.   @param iterator1  the first iterators to use, not null  @param iterator2  the first iterators to use, not null  @return a combination iterator over the iterators  @throws _ClassElement_ if either iterator is null ',directive
' Gets an iterator that iterates through two {',non-directive
'@link Iterator}s  one after another.   ',directive
'@param iterator1  the first iterators to use, not null  ',non-directive
'@param iterator2  the first iterators to use, not null  ',non-directive
'@return a combination iterator over the iterators  ',non-directive
'@throws _ClassElement_ if either iterator is null ',non-directive
' Gets an iterator that iterates through an array of {@link Iterator}s  one after another.   @param iterators  the iterators to use, not null or empty or contain nulls  @return a combination iterator over the iterators  @throws _ClassElement_ if iterators array is null or contains a null ',directive
' Gets an iterator that iterates through an array of {',non-directive
'@link Iterator}s  one after another.   ',directive
'@param iterators  the iterators to use, not null or empty or contain nulls  ',non-directive
'@return a combination iterator over the iterators  ',non-directive
'@throws _ClassElement_ if iterators array is null or contains a null ',non-directive
' Gets an iterator that iterates through a collections of {@link Iterator}s  one after another.   @param iterators  the iterators to use, not null or empty or contain nulls  @return a combination iterator over the iterators  @throws _ClassElement_ if iterators collection is null or contains a null  @throws _ClassElement_ if the iterators collection contains the wrong object type ',directive
' Gets an iterator that iterates through a collections of {',non-directive
'@link Iterator}s  one after another.   ',directive
'@param iterators  the iterators to use, not null or empty or contain nulls  ',non-directive
'@return a combination iterator over the iterators  ',non-directive
'@throws _ClassElement_ if iterators collection is null or contains a null  ',non-directive
'@throws _ClassElement_ if the iterators collection contains the wrong object type ',non-directive
' Gets an iterator that provides an ordered iteration over the elements  contained in a collection of ordered {@link Iterator}s.  <p>  Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,  the {@link Iterator#next()} method will return the lesser of  <code>_ClassPathElement_()</code> and <code>_ClassPathElement_()</code>.  <p>  The comparator is optional. If null is specified then natural order is used.   @param comparator  the comparator to use, may be null for natural order  @param iterator1  the first iterators to use, not null  @param iterator2  the first iterators to use, not null  @return a combination iterator over the iterators  @throws _ClassElement_ if either iterator is null ',directive
' Gets an iterator that provides an ordered iteration over the elements  contained in a collection of ordered {',non-directive
'@link Iterator}s.  ',non-directive
'<p>  Given two ordered {',non-directive
'@link Iterator}s <code>A</code> and <code>B</code>,  the {',non-directive
'@link Iterator#next()} method will return the lesser of  <code>_ClassPathElement_()</code> and <code>_ClassPathElement_()</code>.  ',non-directive
'<p>  The comparator is optional. ',non-directive
'If null is specified then natural order is used.   ',non-directive
'@param comparator  the comparator to use, may be null for natural order  ',directive
'@param iterator1  the first iterators to use, not null  ',non-directive
'@param iterator2  the first iterators to use, not null  ',non-directive
'@return a combination iterator over the iterators  ',non-directive
'@throws _ClassElement_ if either iterator is null ',non-directive
' Gets an iterator that provides an ordered iteration over the elements  contained in an array of {@link Iterator}s.  <p>  Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,  the {@link Iterator#next()} method will return the lesser of  <code>_ClassPathElement_()</code> and <code>_ClassPathElement_()</code> and so on.  <p>  The comparator is optional. If null is specified then natural order is used.   @param comparator  the comparator to use, may be null for natural order  @param iterators  the iterators to use, not null or empty or contain nulls  @return a combination iterator over the iterators  @throws _ClassElement_ if iterators array is null or contains a null ',directive
' Gets an iterator that provides an ordered iteration over the elements  contained in an array of {',non-directive
'@link Iterator}s.  ',non-directive
'<p>  Given two ordered {',non-directive
'@link Iterator}s <code>A</code> and <code>B</code>,  the {',non-directive
'@link Iterator#next()} method will return the lesser of  <code>_ClassPathElement_()</code> and <code>_ClassPathElement_()</code> and so on.  ',non-directive
'<p>  The comparator is optional. ',non-directive
'If null is specified then natural order is used.   ',non-directive
'@param comparator  the comparator to use, may be null for natural order  ',directive
'@param iterators  the iterators to use, not null or empty or contain nulls  ',non-directive
'@return a combination iterator over the iterators  ',non-directive
'@throws _ClassElement_ if iterators array is null or contains a null ',non-directive
' Gets an iterator that provides an ordered iteration over the elements  contained in a collection of {@link Iterator}s.  <p>  Given two ordered {@link Iterator}s <code>A</code> and <code>B</code>,  the {@link Iterator#next()} method will return the lesser of  <code>_ClassPathElement_()</code> and <code>_ClassPathElement_()</code> and so on.  <p>  The comparator is optional. If null is specified then natural order is used.   @param comparator  the comparator to use, may be null for natural order  @param iterators  the iterators to use, not null or empty or contain nulls  @return a combination iterator over the iterators  @throws _ClassElement_ if iterators collection is null or contains a null  @throws _ClassElement_ if the iterators collection contains the wrong object type ',directive
' Gets an iterator that provides an ordered iteration over the elements  contained in a collection of {',non-directive
'@link Iterator}s.  ',non-directive
'<p>  Given two ordered {',non-directive
'@link Iterator}s <code>A</code> and <code>B</code>,  the {',non-directive
'@link Iterator#next()} method will return the lesser of  <code>_ClassPathElement_()</code> and <code>_ClassPathElement_()</code> and so on.  ',non-directive
'<p>  The comparator is optional. ',non-directive
'If null is specified then natural order is used.   ',non-directive
'@param comparator  the comparator to use, may be null for natural order  ',directive
'@param iterators  the iterators to use, not null or empty or contain nulls  ',non-directive
'@return a combination iterator over the iterators  ',non-directive
'@throws _ClassElement_ if iterators collection is null or contains a null  ',non-directive
'@throws _ClassElement_ if the iterators collection contains the wrong object type ',non-directive
' Gets an iterator that transforms the elements of another iterator.  <p>  The transformation occurs during the next() method and the underlying  iterator is unaffected by the transformation.   @param iterator  the iterator to use, not null  @param transform  the transform to use, not null  @return a new transforming iterator  @throws _ClassElement_ if either parameter is null ',non-directive
' Gets an iterator that transforms the elements of another iterator.  ',non-directive
'<p>  The transformation occurs during the next() method and the underlying  iterator is unaffected by the transformation.   ',non-directive
'@param iterator  the iterator to use, not null  ',non-directive
'@param transform  the transform to use, not null  ',non-directive
'@return a new transforming iterator  ',non-directive
'@throws _ClassElement_ if either parameter is null ',non-directive
' Gets an iterator that provides an iterator view of the given enumeration.   @param enumeration  the enumeration to use  @return a new iterator ',non-directive
' Gets an iterator that provides an iterator view of the given enumeration.   ',non-directive
'@param enumeration  the enumeration to use  ',non-directive
'@return a new iterator ',non-directive
' Gets an iterator that provides an iterator view of the given enumeration  that will remove elements from the specified collection.   @param enumeration  the enumeration to use  @param _ClassElement_  the collection to remove elements from  @return a new iterator ',non-directive
' Gets an iterator that provides an iterator view of the given enumeration  that will remove elements from the specified collection.   ',non-directive
'@param enumeration  the enumeration to use  ',non-directive
'@param _ClassElement_  the collection to remove elements from  ',non-directive
'@return a new iterator ',non-directive
' Gets an enumeration that wraps an iterator.   @param iterator  the iterator to use, not null  @return a new enumeration  @throws _ClassElement_ if iterator is null ',non-directive
' Gets an enumeration that wraps an iterator.   ',non-directive
'@param iterator  the iterator to use, not null  ',non-directive
'@return a new enumeration  ',non-directive
'@throws _ClassElement_ if iterator is null ',non-directive
' Gets an array based on an iterator.  <p>  As the wrapped Iterator is traversed, an _ClassElement_ of its values is  created. At the end, this is converted to an array.   @param iterator  the iterator to use, not null  @return an array of the iterator contents  @throws _ClassElement_ if iterator parameter is null ',non-directive
' Gets an array based on an iterator.  ',non-directive
'<p>  As the wrapped Iterator is traversed, an _ClassElement_ of its values is  created. ',non-directive
'At the end, this is converted to an array.   ',non-directive
'@param iterator  the iterator to use, not null  ',non-directive
'@return an array of the iterator contents  ',non-directive
'@throws _ClassElement_ if iterator parameter is null ',non-directive
' Gets an array based on an iterator.  <p>  As the wrapped Iterator is traversed, an _ClassElement_ of its values is  created. At the end, this is converted to an array.   @param iterator  the iterator to use, not null  @param _ClassElement_  the class of array to create  @return an array of the iterator contents  @throws _ClassElement_ if iterator parameter is null  @throws _ClassElement_ if _ClassElement_ is null  @throws _ClassElement_ if the _ClassElement_ is invalid ',non-directive
' Gets an array based on an iterator.  ',non-directive
'<p>  As the wrapped Iterator is traversed, an _ClassElement_ of its values is  created. ',non-directive
'At the end, this is converted to an array.   ',non-directive
'@param iterator  the iterator to use, not null  ',non-directive
'@param _ClassElement_  the class of array to create  ',non-directive
'@return an array of the iterator contents  ',non-directive
'@throws _ClassElement_ if iterator parameter is null  ',non-directive
'@throws _ClassElement_ if _ClassElement_ is null  ',non-directive
'@throws _ClassElement_ if the _ClassElement_ is invalid ',non-directive
' Gets a list based on an iterator.  <p>  As the wrapped Iterator is traversed, an _ClassElement_ of its values is  created. At the end, the list is returned.   @param iterator  the iterator to use, not null  @return a list of the iterator contents  @throws _ClassElement_ if iterator parameter is null ',non-directive
' Gets a list based on an iterator.  ',non-directive
'<p>  As the wrapped Iterator is traversed, an _ClassElement_ of its values is  created. ',non-directive
'At the end, the list is returned.   ',non-directive
'@param iterator  the iterator to use, not null  ',non-directive
'@return a list of the iterator contents  ',non-directive
'@throws _ClassElement_ if iterator parameter is null ',non-directive
' Gets a list based on an iterator.  <p>  As the wrapped Iterator is traversed, an _ClassElement_ of its values is  created. At the end, the list is returned.   @param iterator  the iterator to use, not null  @param _ClassElement_  the initial size of the _ClassElement_  @return a list of the iterator contents  @throws _ClassElement_ if iterator parameter is null  @throws _ClassElement_ if the size is less than 1 ',non-directive
' Gets a list based on an iterator.  ',non-directive
'<p>  As the wrapped Iterator is traversed, an _ClassElement_ of its values is  created. ',non-directive
'At the end, the list is returned.   ',non-directive
'@param iterator  the iterator to use, not null  ',non-directive
'@param _ClassElement_  the initial size of the _ClassElement_  ',non-directive
'@return a list of the iterator contents  ',non-directive
'@throws _ClassElement_ if iterator parameter is null  ',non-directive
'@throws _ClassElement_ if the size is less than 1 ',non-directive
' _ClassElement_ is not normally instantiated. ',non-directive
' _ClassElement_ is not normally instantiated. ',non-directive
' An ordered iterator over no elements. ',non-directive
' An ordered iterator over no elements. ',non-directive
' A map iterator over no elements. ',non-directive
' A map iterator over no elements. ',non-directive
' An ordered map iterator over no elements. ',non-directive
' An ordered map iterator over no elements. ',non-directive
' Checks to see if there are more entries still to be iterated.   @return <code>true</code> if the iterator has more elements ',non-directive
' Checks to see if there are more entries still to be iterated.   ',non-directive
'@return <code>true</code> if the iterator has more elements ',non-directive
' Gets the next <em>key</em> from the <code>Map</code>.   @return the next key in the iteration  @throws _ClassElement_ if the iteration is finished ',non-directive
' Gets the next <em>key</em> from the <code>Map</code>.   ',non-directive
'@return the next key in the iteration  ',non-directive
'@throws _ClassElement_ if the iteration is finished ',non-directive
' Gets the current key, which is the key returned by the last call  to <code>next()</code>.   @return the current key  @throws _ClassElement_ if <code>next()</code> has not yet been called ',directive
' Gets the current key, which is the key returned by the last call  to <code>next()</code>.   ',directive
'@return the current key  ',non-directive
'@throws _ClassElement_ if <code>next()</code> has not yet been called ',directive
' Gets the current value, which is the value associated with the last key  returned by <code>next()</code>.   @return the current value  @throws _ClassElement_ if <code>next()</code> has not yet been called ',directive
' Gets the current value, which is the value associated with the last key  returned by <code>next()</code>.   ',non-directive
'@return the current value  ',non-directive
'@throws _ClassElement_ if <code>next()</code> has not yet been called ',directive
' Sets the value associated with the current key (optional operation).   @param value  the new value  @return the previous value  @throws _ClassElement_ if _ClassElement_ is not supported by the map  @throws _ClassElement_ if <code>next()</code> has not yet been called  @throws _ClassElement_ if <code>remove()</code> has been called since the   last call to <code>next()</code> ',directive
' Sets the value associated with the current key (optional operation).   ',non-directive
'@param value  the new value  ',non-directive
'@return the previous value  ',non-directive
'@throws _ClassElement_ if _ClassElement_ is not supported by the map  ',non-directive
'@throws _ClassElement_ if <code>next()</code> has not yet been called  ',directive
'@throws _ClassElement_ if <code>remove()</code> has been called since the   last call to <code>next()</code> ',directive
' The _ClassElement_ is used when the buffer\'s capacity has been  exceeded.   @since Commons Collections _ClassPathElement_  @version $Revision: 956279 $ $Date: 2010-06-19 21:47:48 +0200 (Sat, 19 Jun 2010) $   @author Avalon  @author <a href=\"mailto:bloritsch@_ClassPathElement_\">Berin Loritsch</a>  @author <a href=\"mailto:jefft@_ClassPathElement_\">Jeff Turner</a>  @author Paul Jack  @author Stephen Colebourne ',non-directive
' The _ClassElement_ is used when the buffer\'s capacity has been  exceeded.   ',non-directive
'@since Commons Collections _ClassPathElement_  ',non-directive
'@version $Revision: 956279 $ $Date: 2010-06-19 21:47:48 +0200 (Sat, 19 Jun 2010) $   ',non-directive
'@author Avalon  ',non-directive
'@author <a href=\"mailto:bloritsch@_ClassPathElement_\">Berin Loritsch</a>  ',non-directive
'@author <a href=\"mailto:jefft@_ClassPathElement_\">Jeff Turner</a>  ',non-directive
'@author Paul Jack  ',non-directive
'@author Stephen Colebourne ',non-directive
' Constructs a new <code>_ClassElement_</code>. ',non-directive
' Constructs a new <code>_ClassElement_</code>. ',non-directive
'  Construct a new <code>_ClassElement_</code>.    @param message  the detail message for this exception ',non-directive
'  Construct a new <code>_ClassElement_</code>.   ',non-directive
?,non-directive
'@param message  the detail message for this exception ',non-directive
'  Construct a new <code>_ClassElement_</code>.    @param message  the detail message for this exception  @param exception  the root cause of the exception ',non-directive
'  Construct a new <code>_ClassElement_</code>.   ',non-directive
?,non-directive
'@param message  the detail message for this exception  ',non-directive
'@param exception  the root cause of the exception ',non-directive
' Defines a map that is bounded in size.  <p>  The size of the map can vary, but it can never exceed a preset   maximum number of elements. This interface allows the querying of details  associated with the maximum number of elements.   @since Commons Collections _ClassPathElement_  @version $Revision: 815026 $ $Date: 2009-09-15 07:54:23 +0200 (Tue, 15 Sep 2009) $   @author Stephen Colebourne ',directive
' Defines a map that is bounded in size.  ',non-directive
'<p>  The size of the map can vary, but it can never exceed a preset   maximum number of elements. ',directive
'This interface allows the querying of details  associated with the maximum number of elements.   ',non-directive
'@since Commons Collections _ClassPathElement_  ',non-directive
