% 1. Title: arff file created from Comments_WebOutput-Corrected-Java_(only comments and class).csv
% 2 clases
% null-directive and semi-directive instances were taken as directive class

@RELATION "1.1_Java_2Classes.arff"

@ATTRIBUTE text string
@ATTRIBUTE comment__class {directive,non-directive}

@DATA
" Flushes the stream.  ",non-directive
"If the stream has saved any characters from the\n various write() methods in a buffer, write them immediately to their\n intended destination.  ",non-directive
"Then, if that destination is another character or\n byte stream, flush it.  ",non-directive
"Thus one flush() invocation will flush all the\n buffers in a chain of Writers and OutputStreams.\n \n",directive
" <p> If the intended destination of this stream is an abstraction provided\n by the underlying operating system, for example a file, then flushing the\n stream guarantees only that bytes previously written to the stream are\n passed to the operating system for writing; it does not guarantee that\n they are actually written to a physical device such as a disk drive.\n\n ",directive
" Specifies that all characters <i>c</i> in the range\n <code>low&nbsp;&lt;=&nbsp;<i>c</i>&nbsp;&lt;=&nbsp;high</code>\n are \"ordinary\" in this tokenizer. ",non-directive
"See the\n <code>ordinaryChar</code> method for more information on a\n character being ordinary.\n\n ",directive
"@param   low   the low end of the range.\n ",non-directive
"@param   hi    the high end of the range.\n ",non-directive
"@see     java.io.StreamTokenizer#ordinaryChar(int)\n",non-directive
" Reads characters into an array.  ",non-directive
"This method will block until some input\n is available, an I/O error occurs, or the end of the stream is reached.\n\n ",directive
"@param       cbuf  Destination buffer\n\n ",non-directive
"@return      The number of characters read, or -1 \n              if the end of the stream\n              has been reached\n\n ",directive
" Tells whether this stream is ready to be read.\n\n ",non-directive
"@return True if the next read() is guaranteed not to block for input,\n false otherwise.  ",directive
"Note that returning false does not guarantee that the\n next read will block.\n\n ",directive
" Reads up to <code>b.length</code> bytes of data from this file \n into an array of bytes. ",non-directive
"This method blocks until at least one byte \n of input is available. \n ",directive
"<p>\n Although <code>RandomAccessFile</code> is not a subclass of \n <code>InputStream</code>, this method behaves in exactly the \n same way as the {@link InputStream#read(byte[])} method of \n <code>InputStream</code>.\n\n ",directive
"@param      b   the buffer into which the data is read.\n ",non-directive
"@return     the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             this file has been reached.\n ",directive
" Writes the specified byte to this file. ",non-directive
"The write starts at \n the current file pointer.\n\n ",non-directive
"@param      b   the <code>byte</code> to be written.\n ",non-directive
" Reads the next line of text from this file.  ",non-directive
"This method successively\n reads bytes from the file, starting at the current file pointer, \n until it reaches a line terminator or the end\n of the file.  ",non-directive
"Each byte is converted into a character by taking the\n byte's value for the lower eight bits of the character and setting the\n high eight bits of the character to zero.  ",non-directive
"This method does not,\n therefore, support the full Unicode character set.\n\n ",directive
"<p> A line of text is terminated by a carriage-return character\n (<code>'&#92;r'</code>), a newline character (<code>'&#92;n'</code>), a\n carriage-return character immediately followed by a newline character,\n or the end of the file.  ",directive
"Line-terminating characters are discarded and\n are not included as part of the string returned.\n\n ",directive
"<p> This method blocks until a newline character is read, a carriage\n return and the byte following it are read (to see if it is a newline),\n the end of the file is reached, or an exception is thrown.\n\n ",directive
"@return     the next line of text from this file, or null if end\n             of file is encountered before even one byte is read.\n ",directive
" Reads in a string from this file. ",non-directive
"The string has been encoded \n using a\n <a href=\"DataInput.html#modified-utf-8\">modified UTF-8</a>\n format. \n ",directive
"<p>\n The first two bytes are read, starting from the current file \n pointer, as if by \n <code>readUnsignedShort</code>. ",directive
"This value gives the number of \n following bytes that are in the encoded string, not\n the length of the resulting string. ",directive
"The following bytes are then \n interpreted as bytes encoding characters in the modified UTF-8 format \n and are converted into characters. \n ",directive
"<p>\n This method blocks until all the bytes are read, the end of the \n stream is detected, or an exception is thrown. \n\n ",directive
"@return     a Unicode string.\n ",non-directive
"@see        java.io.RandomAccessFile#readUnsignedShort()\n",non-directive
" Converts the float argument to an <code>int</code> using the \n <code>floatToIntBits</code> method in class <code>Float</code>, \n and then writes that <code>int</code> value to the file as a \n four-byte quantity, high byte first. ",non-directive
"The write starts at the \n current position of the file pointer.\n\n ",non-directive
"@param      v   a <code>float</code> value to be written.\n ",non-directive
"@see        java.lang.Float#floatToIntBits(float)\n",non-directive
" Creates a <code>PushbackInputStream</code>\n with a pushback buffer of the specified <code>size</code>,\n and saves its  argument, the input stream\n <code>in</code>, for later use. ",non-directive
"Initially,\n there is no pushed-back byte  (the field\n <code>pushBack</code> is initialized to\n <code>-1</code>).\n\n ",non-directive
"@param  in    the input stream from which bytes will be read.\n ",non-directive
"@param  size  the size of the pushback buffer.\n ",non-directive
"@since  JDK1.1\n",non-directive
" Creates a <code>PushbackInputStream</code>\n and saves its  argument, the input stream\n <code>in</code>, for later use. ",non-directive
"Initially,\n there is no pushed-back byte  (the field\n <code>pushBack</code> is initialized to\n <code>-1</code>).\n\n ",directive
"@param   in   the input stream from which bytes will be read.\n",non-directive
" Prints a boolean value.  ",non-directive
"The string produced by <code>{@link\n java.lang.String#valueOf(boolean)}</code> is translated into bytes\n according to the platform's default character encoding, and these bytes\n are written in exactly the manner of the <code>{@link\n #write(int)}</code> method.\n\n ",directive
"@param      b   The <code>boolean</code> to be printed\n",non-directive
" Prints a double-precision floating-point number.  ",non-directive
"The string produced by\n <code>{@link java.lang.String#valueOf(double)}</code> is translated into\n bytes according to the platform's default character encoding, and these\n bytes are written in exactly the manner of the <code>{@link\n #write(int)}</code> method.\n\n ",directive
"@param      d   The <code>double</code> to be printed\n ",non-directive
"@see        java.lang.Double#toString(double)\n",non-directive
" Prints a long integer and then terminates the line.  ",non-directive
"This method behaves\n as though it invokes <code>{@link #print(long)}</code> and then\n <code>{@link #println()}</code>.\n\n ",directive
"@param x the <code>long</code> value to be printed\n",non-directive
" Creates a new PrintWriter, without automatic line flushing, with the\n specified file.  ",non-directive
"This convenience constructor creates the necessary\n intermediate {@link java.io.OutputStreamWriter OutputStreamWriter},\n which will encode characters using the {@linkplain\n java.nio.charset.Charset#defaultCharset() default charset} for this\n instance of the Java virtual machine.\n\n ",directive
"@param  file\n         The file to use as the destination of this writer.  ",non-directive
"If the file\n         exists then it will be truncated to zero size; otherwise, a new\n         file will be created.  ",directive
"The output will be written to the file\n         and is buffered.\n\n ",non-directive
"@since  1.5\n",non-directive
" Closes the stream.  ",non-directive
"This is done by flushing the stream and then closing\n the underlying output stream.\n\n ",non-directive
"@see        java.io.OutputStream#close()\n",non-directive
" Prints a boolean and then terminate the line.  ",non-directive
"This method behaves as\n though it invokes <code>{@link #print(boolean)}</code> and then\n <code>{@link #println()}</code>.\n\n ",directive
"@param x  The <code>boolean</code> to be printed\n",non-directive
" Prints a character and then terminate the line.  ",non-directive
"This method behaves as\n though it invokes <code>{@link #print(char)}</code> and then\n <code>{@link #println()}</code>.\n\n ",directive
"@param x  The <code>char</code> to be printed.\n",non-directive
" A convenience method to write a formatted string to this output stream\n using the specified format string and arguments.\n\n ",non-directive
"<p> An invocation of this method of the form <tt>out.printf(format,\n args)</tt> behaves in exactly the same way as the invocation\n\n <pre>\n     out.format(format, args) </pre>\n\n ",directive
"@param  format\n         A format string as described in <a\n         href=\"../util/Formatter.html#syntax\">Format string syntax</a>\n\n ",directive
"@param  args\n         Arguments referenced by the format specifiers in the format\n         string.  ",directive
"If there are more arguments than format specifiers, the\n         extra arguments are ignored.  ",directive
"The number of arguments is\n         variable and may be zero.  ",directive
"The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java\n         Virtual Machine Specification</a>.  ",directive
"The behaviour on a\n         <tt>null</tt> argument depends on the <a\n         href=\"../util/Formatter.html#syntax\">conversion</a>.\n\n ",directive
"For specification of all possible\n          formatting errors, see the <a\n          href=\"../util/Formatter.html#detail\">Details</a> section of the\n          formatter class specification.\n\n ",directive
"@return  This output stream\n\n ",non-directive
"@since  1.5\n",non-directive
" Connects this piped writer to a receiver. ",non-directive
"If this object\n is already connected to some other piped reader, an \n <code>IOException</code> is thrown.\n ",directive
"<p>\n If <code>snk</code> is an unconnected piped reader and \n <code>src</code> is an unconnected piped writer, they may \n be connected by either the call:\n <blockquote><pre>\n src.connect(snk)</pre></blockquote>\n or the call:\n <blockquote><pre>\n snk.connect(src)</pre></blockquote>\n The two calls have the same effect.\n\n ",directive
"@param      snk   the piped reader to connect to.\n ",non-directive
" Reads the next character of data from this piped stream.\n ",non-directive
"If no character is available because the end of the stream \n has been reached, the value <code>-1</code> is returned. \n ",directive
"This method blocks until input data is available, the end of\n the stream is detected, or an exception is thrown. \n\n ",directive
"@return     the next character of data, or <code>-1</code> if the end of the\n             stream is reached.\n ",directive
" Connects this piped output stream to a receiver. ",non-directive
"If this object\n is already connected to some other piped input stream, an \n <code>IOException</code> is thrown.\n ",directive
"<p>\n If <code>snk</code> is an unconnected piped input stream and \n <code>src</code> is an unconnected piped output stream, they may \n be connected by either the call:\n <blockquote><pre>\n src.connect(snk)</pre></blockquote>\n or the call:\n <blockquote><pre>\n snk.connect(src)</pre></blockquote>\n The two calls have the same effect.\n\n ",non-directive
"@param      snk   the piped input stream to connect to.\n ",non-directive
" Writes the specified <code>byte</code> to the piped output stream. \n ",non-directive
"<p>\n Implements the <code>write</code> method of <code>OutputStream</code>.\n\n ",non-directive
"@param      b   the <code>byte</code> to be written.\n ",non-directive
" Receives a byte of data.  ",non-directive
"This method will block if no input is\n available.\n ",directive
"@param b the byte being received\n ",non-directive
"@since     JDK1.1\n",non-directive
" Specify stream protocol version to use when writing the stream.\n\n ",non-directive
"<p>This routine provides a hook to enable the current version of\n Serialization to write in a format that is backwards compatible to a\n previous version of the stream format.\n\n ",non-directive
"<p>Every effort will be made to avoid introducing additional\n backwards incompatibilities; however, sometimes there is no\n other alternative.\n\n ",directive
"@param	version use ProtocolVersion from java.io.ObjectStreamConstants.\n ",directive
"@see java.io.ObjectStreamConstants#PROTOCOL_VERSION_1\n ",non-directive
"@see java.io.ObjectStreamConstants#PROTOCOL_VERSION_2\n ",non-directive
"@since	1.2\n",non-directive
" Put the value of the named double field into the persistent field.\n\n ",non-directive
"@param  name the name of the serializable field\n ",non-directive
"@param  val the value to assign to the field\n ",non-directive
" Writes an array of bytes. ",non-directive
"This method will block until the bytes\n are actually written.\n ",directive
"@param b	the data to be written\n ",non-directive
" Reads the persistent fields from the stream and makes them available by\n name.\n \n",non-directive
"@return	the <code>GetField</code> object representing the persistent\n 		fields of the object being deserialized\n ",non-directive
"@since 1.2\n",non-directive
" Reads up to <code>len</code> bytes of data from this input stream \n into an array of bytes. ",non-directive
"This method blocks until some input is available.\n ",directive
"<p>\n The <code>read</code> method of \n <code>LineNumberInputStream</code> repeatedly calls the \n <code>read</code> method of zero arguments to fill in the byte array.\n\n ",non-directive
"@param      b     the buffer into which the data is read.\n ",non-directive
"@param      off   the start offset of the data.\n ",non-directive
"@param      len   the maximum number of bytes read.\n ",non-directive
"@return     the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end of\n             this stream has been reached.\n ",directive
"@see        java.io.LineNumberInputStream#read()\n",non-directive
" Reads characters into a portion of an array.\n\n ",non-directive
"@param      cbuf     Destination buffer\n ",non-directive
"@param      offset   Offset at which to start storing characters\n ",non-directive
"@param      length   Maximum number of characters to read\n\n ",non-directive
"@return     The number of characters read, or -1 if the end of the \n             stream has been reached\n\n ",non-directive
" Creates an InputStreamReader that uses the given charset decoder.  ",non-directive
"</p>\n\n ",non-directive
"@param  in       An InputStream\n ",non-directive
"@param  dec      A charset decoder\n\n ",non-directive
"@since 1.4\n @spec JSR-51\n",non-directive
" Constructs a FileWriter object given a file name with a boolean\n indicating whether or not to append the data written.\n\n ",non-directive
"@param fileName  String The system-dependent filename.\n ",non-directive
"@param append    boolean if <code>true</code>, then data will be written\n                  to the end of the file rather than the beginning.\n ",non-directive
" Returns the unique {@link java.nio.channels.FileChannel FileChannel}\n object associated with this file output stream. ",non-directive
"</p>\n\n <p> The initial {@link java.nio.channels.FileChannel#position()\n </code>position<code>} of the returned channel will be equal to the\n number of bytes written to the file so far unless this stream is in\n append mode, in which case it will be equal to the size of the file.\n ",directive
"Writing bytes to this stream will increment the channel's position\n accordingly.  ",non-directive
"Changing the channel's position, either explicitly or by\n writing, will change this stream's file position.\n\n ",non-directive
"@return  the file channel associated with this file output stream\n\n ",non-directive
"@since 1.4\n @spec JSR-51\n",non-directive
" Creates an output file stream to write to the specified file \n descriptor, which represents an existing connection to an actual \n file in the file system.\n ",non-directive
"<p>\n First, if there is a security manager, its <code>checkWrite</code> \n method is called with the file descriptor <code>fdObj</code> \n argument as its argument.\n\n ",directive
"@param      fdObj   the file descriptor to be opened for writing\n ",non-directive
"@see        java.lang.SecurityManager#checkWrite(java.io.FileDescriptor)\n",non-directive
" Skips over and discards <code>n</code> bytes of data from the\n input stream.\n\n ",non-directive
"<p>The <code>skip</code> method may, for a variety of\n reasons, end up skipping over some smaller number of bytes,\n possibly <code>0</code>. ",directive
"If <code>n</code> is negative, an\n <code>IOException</code> is thrown, even though the <code>skip</code>\n method of the {@link InputStream} superclass does nothing in this case.\n ",directive
"The actual number of bytes skipped is returned.\n\n ",non-directive
"<p>This method may skip more bytes than are remaining in the backing\n file. ",directive
"This produces no exception and the number of bytes skipped\n may include some number of bytes that were beyond the EOF of the\n backing file. ",directive
"Attempting to read from the stream after skipping past\n the end will result in -1 indicating the end of the file.\n\n ",directive
"@param      n   the number of bytes to be skipped.\n ",non-directive
"@return     the actual number of bytes skipped.\n ",non-directive
" Creates a new <code>File</code> instance from a parent pathname string\n and a child pathname string.\n\n ",non-directive
"<p> If <code>parent</code> is <code>null</code> then the new\n <code>File</code> instance is created as if by invoking the\n single-argument <code>File</code> constructor on the given\n <code>child</code> pathname string.\n\n ",directive
"<p> Otherwise the <code>parent</code> pathname string is taken to denote\n a directory, and the <code>child</code> pathname string is taken to\n denote either a directory or a file.  ",directive
"If the <code>child</code> pathname\n string is absolute then it is converted into a relative pathname in a\n system-dependent way.  ",non-directive
"If <code>parent</code> is the empty string then\n the new <code>File</code> instance is created by converting\n <code>child</code> into an abstract pathname and resolving the result\n against a system-dependent default directory.  ",directive
"Otherwise each pathname\n string is converted into an abstract pathname and the child abstract\n pathname is resolved against the parent.\n\n ",non-directive
"@param   parent  The parent pathname string\n ",non-directive
"@param   child   The child pathname string\n ",non-directive
" Writes to the output stream the eight\n low-order bits of the argument <code>b</code>.\n ",non-directive
"The 24 high-order  bits of <code>b</code>\n are ignored.\n\n ",directive
"@param      b   the byte to be written.\n ",non-directive
" Writes a string to the output stream.\n ",non-directive
"For every character in the string\n <code>s</code>,  taken in order, one byte\n is written to the output stream.  ",non-directive
"If\n <code>s</code> is <code>null</code>, a <code>NullPointerException</code>\n is thrown.<p>  If <code>s.length</code>\n is zero, then no bytes are written. ",directive
"Otherwise,\n the character <code>s[0]</code> is written\n first, then <code>s[1]</code>, and so on;\n the last character written is <code>s[s.length-1]</code>.\n ",non-directive
"For each character, one byte is written,\n the low-order byte, in exactly the manner\n of the <code>writeByte</code> method . ",non-directive
"The\n high-order eight bits of each character\n in the string are ignored.\n\n ",directive
"@param      s   the string of bytes to be written.\n ",non-directive
" Writes every character in the string <code>s</code>,\n to the output stream, in order,\n two bytes per character. ",non-directive
"If <code>s</code>\n is <code>null</code>, a <code>NullPointerException</code>\n is thrown.  ",directive
"If <code>s.length</code>\n is zero, then no characters are written.\n ",non-directive
"Otherwise, the character <code>s[0]</code>\n is written first, then <code>s[1]</code>,\n and so on; the last character written is\n <code>s[s.length-1]</code>. ",non-directive
"For each character,\n two bytes are actually written, high-order\n byte first, in exactly the manner of the\n <code>writeChar</code> method.\n\n ",directive
"@param      s   the string value to be written.\n ",non-directive
" Reads some number of bytes from the contained input stream and \n stores them into the buffer array <code>b</code>. ",non-directive
"The number of \n bytes actually read is returned as an integer. ",non-directive
"This method blocks \n until input data is available, end of file is detected, or an \n exception is thrown. \n \n",directive
" <p>If <code>b</code> is null, a <code>NullPointerException</code> is \n thrown. ",directive
"If the length of <code>b</code> is zero, then no bytes are \n read and <code>0</code> is returned; otherwise, there is an attempt \n to read at least one byte. ",directive
"If no byte is available because the \n stream is at end of file, the value <code>-1</code> is returned;\n otherwise, at least one byte is read and stored into <code>b</code>. \n \n",directive
" <p>The first byte read is stored into element <code>b[0]</code>, the \n next one into <code>b[1]</code>, and so on. ",non-directive
"The number of bytes read \n is, at most, equal to the length of <code>b</code>. ",non-directive
"Let <code>k</code> \n be the number of bytes actually read; these bytes will be stored in \n elements <code>b[0]</code> through <code>b[k-1]</code>, leaving \n elements <code>b[k]</code> through <code>b[b.length-1]</code> \n unaffected. \n \n",non-directive
" <p>The <code>read(b)</code> method has the same effect as: \n <blockquote><pre>\n read(b, 0, b.length) \n </pre></blockquote>\n\n ",directive
"@param      b   the buffer into which the data is read.\n ",non-directive
"@return     the total number of bytes read into the buffer, or\n             <code>-1</code> if there is no more data because the end\n             of the stream has been reached.\n ",directive
"@see        java.io.FilterInputStream#in\n ",non-directive
"@see        java.io.InputStream#read(byte[], int, int)\n",non-directive
" See the general contract of the <code>readShort</code>\n method of <code>DataInput</code>.\n ",directive
"<p>\n Bytes\n for this operation are read from the contained\n input stream.\n\n ",non-directive
"@return     the next two bytes of this input stream, interpreted as a\n             signed 16-bit number.\n ",non-directive
"@see        java.io.FilterInputStream#in\n",non-directive
" See the general contract of the <code>readLong</code>\n method of <code>DataInput</code>.\n ",directive
"<p>\n Bytes\n for this operation are read from the contained\n input stream.\n\n ",non-directive
"@return     the next eight bytes of this input stream, interpreted as a\n             <code>long</code>.\n ",non-directive
"@see        java.io.FilterInputStream#in\n",non-directive
" A convenience method to write a formatted string to this console's\n output stream using the specified format string and arguments.\n\n ",non-directive
"<p> An invocation of this method of the form <tt>con.printf(format,\n args)</tt> behaves in exactly the same way as the invocation of\n <pre>con.format(format, args)</pre>.\n\n ",directive
"@param  format\n         A format string as described in <a\n         href=\"../util/Formatter.html#syntax\">Format string syntax</a>.\n\n ",directive
"@param  args\n         Arguments referenced by the format specifiers in the format\n         string.  ",directive
"If there are more arguments than format specifiers, the\n         extra arguments are ignored.  ",directive
"The number of arguments is\n         variable and may be zero.  ",directive
"The maximum number of arguments is\n         limited by the maximum dimension of a Java array as defined by\n         the <a href=\"http://java.sun.com/docs/books/vmspec/\">Java\n         Virtual Machine Specification</a>.  ",directive
"The behaviour on a\n         <tt>null</tt> argument depends on the <a\n         href=\"../util/Formatter.html#syntax\">conversion</a>.\n\n ",directive
"For specification of all possible\n          formatting errors, see the <a\n          href=\"../util/Formatter.html#detail\">Details</a> section of the\n          formatter class specification.\n\n ",directive
"@return  This console\n",non-directive
" Constructs an <code>UnknownHostException</code> with the specified\n detail message.\n\n ",non-directive
"@param s the detail message\n ",non-directive
"@since JDK1.1\n",non-directive
" Constructs a <code>NotBoundException</code> with the specified\n detail message.\n\n ",non-directive
"@param s the detail message\n ",non-directive
"@since JDK1.1\n",non-directive
" Returns a new copy of the contained marshalledobject.  ",non-directive
"The internal\n representation is deserialized with the semantics used for\n unmarshaling paramters for RMI calls.\n\n ",directive
"@return a copy of the contained object\n ",non-directive
"could not be found\n ",non-directive
"@since 1.2\n",non-directive
" Constructs a <code>ConnectException</code> with the specified\n detail message.\n\n ",non-directive
"@param s the detail message\n ",non-directive
"@since JDK1.1\n",non-directive
" Returns the group's property-override list.\n ",non-directive
"@return the property-override list, or <code>null</code>\n ",non-directive
"@since 1.2\n",non-directive
" Returns the group's command-environment control object.\n ",non-directive
"@return the command-environment object, or <code>null</code>\n ",directive
"@since 1.2\n",non-directive
" Fetch the configured path-qualified java command name.\n\n ",non-directive
"@return the configured name, or <code>null</code> if configured to\n accept the default\n ",directive
"@since 1.2\n",non-directive
" Compares two command environments for content equality.\n\n ",non-directive
"@param	obj	the Object to compare with\n ",non-directive
"@return	true if these Objects are equal; false otherwise.\n ",non-directive
"@see		java.util.Hashtable\n ",non-directive
"@since 1.2\n",non-directive
" Returns the object's activation identifier.  ",non-directive
"The method is\n protected so that only subclasses can obtain an object's\n identifier.\n ",directive
"@return the object's activation identifier\n ",non-directive
"@since 1.2\n",non-directive
" Creates a \"well-known\" <code>UID</code>.\n\n ",non-directive
"There are 2<sup>16</sup> possible such well-known ids.\n\n ",non-directive
"<p>A <code>UID</code> created via this constructor will not\n clash with any <code>UID</code>s generated via the no-arg\n constructor.\n\n ",directive
"@param	num number for well-known <code>UID</code>\n",non-directive
" Returns the handler for socket creation failure set by the\n <code>setFailureHandler</code> method.\n ",non-directive
"@return the failure handler\n ",non-directive
"@see #setFailureHandler(RMIFailureHandler)\n ",non-directive
"@since JDK1.1\n",non-directive
" Returns the string representation of the operation.\n ",non-directive
"@deprecated no replacement\n ",directive
"@since JDK1.1\n",non-directive
" Compares the specified object with this <code>ObjID</code> for\n equality.\n\n ",non-directive
"This method returns <code>true</code> if and only if the\n specified object is an <code>ObjID</code> instance with the same\n object number and address space identifier as this one.\n\n ",directive
"@param	obj the object to compare this <code>ObjID</code> to\n\n ",non-directive
"@return	<code>true</code> if the given object is equivalent to\n this one, and <code>false</code> otherwise\n",non-directive
" Loads a class from the location specified by the\n <code>java.rmi.server.codebase</code> property.\n\n ",non-directive
"@param  name the name of the class to load\n ",non-directive
"@return the <code>Class</code> object representing the loaded class\n ",non-directive
"@since JDK1.1\n ",non-directive
"@deprecated no replacement\n",directive
" Constructs a <tt>TypeNotPresentException</tt> for the named type\n with the specified cause.\n\n ",non-directive
"@param typeName the fully qualified name of the unavailable type\n ",non-directive
"@param cause the exception that was thrown when the system attempted to\n    load the named type, or <tt>null</tt> if unavailable or inapplicable\n",directive
" Prints this throwable and its backtrace to the specified\n print writer.\n\n ",non-directive
"@param s <code>PrintWriter</code> to use for output\n ",non-directive
"@since   JDK1.1\n",non-directive
" Constructs a new throwable with the specified detail message and\n cause.  ",non-directive
"<p>Note that the detail message associated with\n <code>cause</code> is <i>not</i> automatically incorporated in\n this throwable's detail message.\n\n ",directive
"<p>The {@link #fillInStackTrace()} method is called to initialize\n the stack trace data in the newly created throwable.\n\n ",directive
"@param  message the detail message (which is saved for later retrieval\n         by the {@link #getMessage()} method).\n ",directive
"@param  cause the cause (which is saved for later retrieval by the\n         {@link #getCause()} method).  ",directive
"(A <tt>null</tt> value is\n         permitted, and indicates that the cause is nonexistent or\n         unknown.)\n ",directive
"@since  1.4\n",non-directive
" Forces the thread to stop executing.\n ",non-directive
"<p>\n If there is a security manager installed, the <code>checkAccess</code>\n method of this thread is called, which may result in a \n <code>SecurityException</code> being raised (in the current thread). \n ",directive
"<p>\n If this thread is different from the current thread (that is, the current\n thread is trying to stop a thread other than itself) or\n <code>obj</code> is not an instance of <code>ThreadDeath</code>, the\n security manager's <code>checkPermission</code> method (with the\n <code>RuntimePermission(\"stopThread\")</code> argument) is called in\n addition.\n ",directive
"Again, this may result in throwing a \n <code>SecurityException</code> (in the current thread). \n ",directive
"<p>\n If the argument <code>obj</code> is null, a \n <code>NullPointerException</code> is thrown (in the current thread). \n ",directive
"<p>\n The thread represented by this thread is forced to stop \n whatever it is doing abnormally and to throw the \n <code>Throwable</code> object <code>obj</code> as an exception. ",non-directive
"This \n is an unusual action to take; normally, the <code>stop</code> method \n that takes no arguments should be used. \n ",directive
"<p>\n It is permitted to stop a thread that has not yet been started. \n ",directive
"If the thread is eventually started, it immediately terminates. \n\n ",non-directive
"@param      obj   the Throwable object to be thrown.\n ",non-directive
"@see        #interrupt()\n ",non-directive
"@see        #checkAccess()\n ",non-directive
"@see        #run()\n ",non-directive
"@see        #start()\n ",non-directive
"@see        #stop()\n ",non-directive
"@see        SecurityManager#checkAccess(Thread)\n ",non-directive
"@see        SecurityManager#checkPermission\n ",non-directive
"@deprecated This method is inherently unsafe.  ",directive
"See {@link #stop()}\n        for details.  ",directive
"An additional danger of this\n        method is that it may be used to generate exceptions that the\n        target thread is unprepared to handle (including checked\n        exceptions that the thread could not possibly throw, were it\n        not for this method).\n        ",directive
"For more information, see \n        <a href=\"{@docRoot}/../technotes/guides/concurrency/threadPrimitiveDeprecation.html\">Why \n        are Thread.stop, Thread.suspend and Thread.resume Deprecated?</a>.\n",directive
" Counts the number of stack frames in this thread. ",non-directive
"The thread must \n be suspended. \n\n ",directive
"@return     the number of stack frames in this thread.\n ",non-directive
"@deprecated The definition of this call depends on {@link #suspend},\n		   which is deprecated.  ",directive
"Further, the results of this call\n		   were never well-defined.\n",directive
" Allocates a new <code>Thread</code> object so that it has \n <code>target</code> as its run object, has the specified \n <code>name</code> as its name, and belongs to the thread group \n referred to by <code>group</code>.\n ",non-directive
"<p>\n If <code>group</code> is <code>null</code> and there is a \n security manager, the group is determined by the security manager's \n <code>getThreadGroup</code> method. ",directive
"If <code>group</code> is \n <code>null</code> and there is not a security manager, or the\n security manager's <code>getThreadGroup</code> method returns \n <code>null</code>, the group is set to be the same ThreadGroup \n as the thread that is creating the new thread.\n \n",directive
" <p>If there is a security manager, its <code>checkAccess</code> \n method is called with the ThreadGroup as its argument.\n ",directive
"<p>In addition, its <code>checkPermission</code>\n method is called with the\n <code>RuntimePermission(\"enableContextClassLoaderOverride\")</code>\n permission when invoked directly or indirectly by the constructor\n of a subclass which overrides the <code>getContextClassLoader</code>\n or <code>setContextClassLoader</code> methods.\n ",directive
"This may result in a SecurityException.\n\n ",directive
"<p>\n If the <code>target</code> argument is not <code>null</code>, the \n <code>run</code> method of the <code>target</code> is called when \n this thread is started. ",directive
"If the target argument is \n <code>null</code>, this thread's <code>run</code> method is called \n when this thread is started. \n ",directive
"<p>\n The priority of the newly created thread is set equal to the \n priority of the thread creating it, that is, the currently running \n thread. ",non-directive
"The method <code>setPriority</code> may be used to \n change the priority to a new value. \n ",directive
"<p>\n The newly created thread is initially marked as being a daemon \n thread if and only if the thread creating it is currently marked \n as a daemon thread. ",directive
"The method <code>setDaemon </code> may be used \n to change whether or not a thread is a daemon. \n\n ",directive
"@param      group     the thread group.\n ",non-directive
"@param      target   the object whose <code>run</code> method is called.\n ",non-directive
"@param      name     the name of the new thread.\n ",non-directive
"@see        Runnable#run()\n ",non-directive
"@see        #run()\n ",non-directive
"@see        #setDaemon(boolean)\n ",non-directive
"@see        #setPriority(int)\n ",non-directive
"@see        ThreadGroup#checkAccess()\n ",non-directive
"@see        SecurityManager#checkAccess\n",non-directive
" Returns the same hash code for the given object as\n would be returned by the default method hashCode(),\n whether or not the given object's class overrides\n hashCode().\n ",non-directive
"The hash code for the null reference is zero.\n\n ",directive
"@param x object for which the hashCode is to be calculated\n ",non-directive
"@return  the hashCode\n ",non-directive
"@since   JDK1.1\n",non-directive
" Copies characters from this string into the destination character\n array.\n ",non-directive
"<p>\n The first character to be copied is at index <code>srcBegin</code>;\n the last character to be copied is at index <code>srcEnd-1</code>\n (thus the total number of characters to be copied is\n <code>srcEnd-srcBegin</code>). ",non-directive
"The characters are copied into the\n subarray of <code>dst</code> starting at index <code>dstBegin</code>\n and ending at index:\n <p><blockquote><pre>\n     dstbegin + (srcEnd-srcBegin) - 1\n </pre></blockquote>\n\n ",non-directive
"@param      srcBegin   index of the first character in the string\n                        to copy.\n ",non-directive
"@param      srcEnd     index after the last character in the string\n                        to copy.\n ",non-directive
"@param      dst        the destination array.\n ",non-directive
"@param      dstBegin   the start offset in the destination array.\n ",non-directive
"-- <code>srcBegin</code> is negative.\n            ",directive
"-- <code>srcBegin</code> is greater than <code>srcEnd</code>\n            ",non-directive
"-- <code>srcEnd</code> is greater than the length of this\n                string\n            ",non-directive
"-- <code>dstBegin</code> is negative\n            ",non-directive
"-- <code>dstBegin+(srcEnd-srcBegin)</code> is larger than\n                <code>dst.length</code>\n",non-directive
" Tests if two string regions are equal.\n ",non-directive
"<p>\n A substring of this <tt>String</tt> object is compared to a substring\n of the argument <tt>other</tt>. ",non-directive
"The result is <tt>true</tt> if these\n substrings represent character sequences that are the same, ignoring\n case if and only if <tt>ignoreCase</tt> is true. ",non-directive
"The substring of\n this <tt>String</tt> object to be compared begins at index\n <tt>toffset</tt> and has length <tt>len</tt>. ",non-directive
"The substring of\n <tt>other</tt> to be compared begins at index <tt>ooffset</tt> and\n has length <tt>len</tt>. ",non-directive
"The result is <tt>false</tt> if and only if\n at least one of the following is true:\n ",non-directive
"-- <tt>toffset</tt> is negative.\n ",non-directive
"-- <tt>ooffset</tt> is negative.\n ",non-directive
"-- <tt>toffset+len</tt> is greater than the length of this\n <tt>String</tt> object.\n ",non-directive
"-- <tt>ooffset+len</tt> is greater than the length of the other\n argument.\n ",non-directive
"-- <tt>ignoreCase</tt> is <tt>false</tt> and there is some nonnegative\n integer <i>k</i> less than <tt>len</tt> such that:\n <blockquote><pre>\n this.charAt(toffset+k) != other.charAt(ooffset+k)\n </pre></blockquote>\n ",non-directive
"-- <tt>ignoreCase</tt> is <tt>true</tt> and there is some nonnegative\n integer <i>k</i> less than <tt>len</tt> such that:\n <blockquote><pre>\n Character.toLowerCase(this.charAt(toffset+k)) !=\n               Character.toLowerCase(other.charAt(ooffset+k))\n </pre></blockquote>\n and:\n <blockquote><pre>\n Character.toUpperCase(this.charAt(toffset+k)) !=\n         Character.toUpperCase(other.charAt(ooffset+k))\n </pre></blockquote>\n \n\n ",non-directive
"@param   ignoreCase   if <code>true</code>, ignore case when comparing\n                       characters.\n ",non-directive
"@param   toffset      the starting offset of the subregion in this\n                       string.\n ",non-directive
"@param   other        the string argument.\n ",non-directive
"@param   ooffset      the starting offset of the subregion in the string\n                       argument.\n ",non-directive
"@param   len          the number of characters to compare.\n ",non-directive
"@return  <code>true</code> if the specified subregion of this string\n          matches the specified subregion of the string argument;\n          <code>false</code> otherwise. ",non-directive
"Whether the matching is exact\n          or case insensitive depends on the <code>ignoreCase</code>\n          argument.\n",non-directive
" Returns the index within this string of the first occurrence of the\n specified character, starting the search at the specified index.\n ",non-directive
"<p>\n If a character with value <code>ch</code> occurs in the\n character sequence represented by this <code>String</code>\n object at an index no smaller than <code>fromIndex</code>, then\n the index of the first such occurrence is returned. ",non-directive
"For values\n of <code>ch</code> in the range from 0 to 0xFFFF (inclusive),\n this is the smallest value <i>k</i> such that:\n <blockquote><pre>\n (this.charAt(<i>k</i>) == ch) && (<i>k</i> &gt;= fromIndex)\n </pre></blockquote>\n is true. ",non-directive
"For other values of <code>ch</code>, it is the\n smallest value <i>k</i> such that:\n <blockquote><pre>\n (this.codePointAt(<i>k</i>) == ch) && (<i>k</i> &gt;= fromIndex)\n </pre></blockquote>\n is true. ",non-directive
"In either case, if no such character occurs in this\n string at or after position <code>fromIndex</code>, then\n <code>-1</code> is returned.\n\n ",non-directive
"<p>\n There is no restriction on the value of <code>fromIndex</code>. ",non-directive
"If it\n is negative, it has the same effect as if it were zero: this entire\n string may be searched. ",non-directive
"If it is greater than the length of this\n string, it has the same effect as if it were equal to the length of\n this string: <code>-1</code> is returned.\n\n ",non-directive
"<p>All indices are specified in <code>char</code> values\n (Unicode code units).\n\n ",non-directive
"@param   ch          a character (Unicode code point).\n ",non-directive
"@param   fromIndex   the index to start the search from.\n ",non-directive
"@return  the index of the first occurrence of the character in the\n          character sequence represented by this object that is greater\n          than or equal to <code>fromIndex</code>, or <code>-1</code>\n          if the character does not occur.\n",non-directive
" Replaces the first substring of this string that matches the given <a\n href=\"../util/regex/Pattern.html#sum\">regular expression</a> with the\n given replacement.\n\n ",non-directive
"<p> An invocation of this method of the form\n <i>str</i><tt>.replaceFirst(</tt><i>regex</i><tt>,</tt> <i>repl</i><tt>)</tt>\n yields exactly the same result as the expression\n\n <blockquote><tt>\n {@link java.util.regex.Pattern}.{@link java.util.regex.Pattern#compile\n compile}(</tt><i>regex</i><tt>).{@link\n java.util.regex.Pattern#matcher(java.lang.CharSequence)\n matcher}(</tt><i>str</i><tt>).{@link java.util.regex.Matcher#replaceFirst\n replaceFirst}(</tt><i>repl</i><tt>)</tt></blockquote>\n\n<p>\n Note that backslashes (<tt>\</tt>) and dollar signs (<tt>$</tt>) in the\n replacement string may cause the results to be different than if it were\n being treated as a literal replacement string; see\n {@link java.util.regex.Matcher#replaceFirst}.\n ",directive
"Use {@link java.util.regex.Matcher#quoteReplacement} to suppress the special\n meaning of these characters, if desired.\n\n ",directive
"@param   regex\n          the regular expression to which this string is to be matched\n ",non-directive
"@param   replacement\n          the string to be substituted for the first match\n\n ",non-directive
"@return  The resulting <tt>String</tt>\n\n ",non-directive
"@see java.util.regex.Pattern\n\n ",non-directive
"@since 1.4\n @spec JSR-51\n",non-directive
" Returns the smaller of two <code>int</code> values. ",non-directive
"That is,\n the result the argument closer to the value of\n <code>Integer.MIN_VALUE</code>.  ",non-directive
"If the arguments have the same\n value, the result is that same value.\n\n ",non-directive
"@param   a   an argument.\n ",non-directive
"@param   b   another argument.\n ",non-directive
"@return  the smaller of <code>a</code> and <code>b</code>.\n ",non-directive
"@see     java.lang.Long#MIN_VALUE\n",non-directive
" Returns the floating-point value adjacent to {@code d} in\n the direction of positive infinity.  ",non-directive
"This method is\n semantically equivalent to {@code nextAfter(d,\n Double.POSITIVE_INFINITY)}; however, a {@code nextUp}\n implementation may run faster than its equivalent\n {@code nextAfter} call.\n\n ",directive
"<p>Special Cases:\n \n ",non-directive
"--  If the argument is NaN, the result is NaN.\n\n ",non-directive
"--  If the argument is positive infinity, the result is\n positive infinity.\n\n ",non-directive
"--  If the argument is zero, the result is\n {@link Double#MIN_VALUE}\n\n \n\n ",non-directive
"@param d starting floating-point value\n ",non-directive
"@return The adjacent floating-point value closer to positive\n infinity.\n ",non-directive
"@since 1.6\n",non-directive
" Compares this object to the specified object.  ",non-directive
"The result is\n <code>true</code> if and only if the argument is not\n <code>null</code> and is a <code>Short</code> object that\n contains the same <code>short</code> value as this object.\n\n ",non-directive
"@param obj	the object to compare with\n ",non-directive
"@return 		<code>true</code> if the objects are the same;\n			<code>false</code> otherwise.\n",non-directive
" Creates a <code>SecurityException</code> with the specified\n detail message and cause.\n\n ",non-directive
"@param message the detail message (which is saved for later retrieval\n        by the {@link #getMessage()} method).\n ",non-directive
"@param cause the cause (which is saved for later retrieval by the\n        {@link #getCause()} method).  ",non-directive
"(A <tt>null</tt> value is permitted,\n        and indicates that the cause is nonexistent or unknown.)\n ",directive
"@since 1.5\n",non-directive
" Returns the number of processors available to the Java virtual machine.\n\n ",non-directive
"<p> This value may change during a particular invocation of the virtual\n machine.  ",directive
"Applications that are sensitive to the number of available\n processors should therefore occasionally poll this property and adjust\n their resource usage appropriately. ",directive
"</p>\n\n ",non-directive
"@return  the maximum number of processors available to the virtual\n          machine; never smaller than one\n ",directive
"@since 1.4\n",non-directive
" Returns the amount of free memory in the Java Virtual Machine.\n ",non-directive
"Calling the \n <code>gc</code> method may result in increasing the value returned \n by <code>freeMemory.</code>\n\n ",directive
"@return  an approximation to the total amount of memory currently\n          available for future allocated objects, measured in bytes.\n",non-directive
" Constructs a process builder with the specified operating\n system program and arguments.  ",non-directive
"This constructor does <i>not</i>\n make a copy of the <code>command</code> list.  ",directive
"Subsequent\n updates to the list will be reflected in the state of the\n process builder.  ",directive
"It is not checked whether\n <code>command</code> corresponds to a valid operating system\n command.</p>\n\n ",directive
"@param   command  The list containing the program and its arguments\n\n ",non-directive
" Compare this package's specification version with a\n desired version. ",non-directive
"It returns true if\n this packages specification version number is greater than or equal\n to the desired version number. ",directive
"<p>\n\n Version numbers are compared by sequentially comparing corresponding\n components of the desired and specification strings.\n ",non-directive
"Each component is converted as a decimal integer and the values\n compared.\n ",non-directive
"If the specification value is greater than the desired\n value true is returned. ",non-directive
"If the value is less false is returned.\n ",non-directive
"If the values are equal the period is skipped and the next pair of\n components is compared.\n\n ",non-directive
"@param desired the version string of the desired version.\n ",non-directive
"@return true if this package's version number is greater\n 		than or equal to the desired version number\n\n ",non-directive
" Returns the string representation of this Package.\n ",non-directive
"Its value is the string \"package \" and the package name.\n ",non-directive
"If the package title is defined it is appended.\n ",non-directive
"If the package version is defined it is appended.\n ",non-directive
"@return the string representation of the package.\n",non-directive
" Returns the size of an ulp of the argument.  ",non-directive
"An ulp of a\n <code>float</code> value is the positive distance between this\n floating-point value and the <code>float</code> value next\n larger in magnitude.  ",non-directive
"Note that for non-NaN <i>x</i>,\n <code>ulp(-<i>x</i>) == ulp(<i>x</i>)</code>.\n \n",directive
" <p>Special Cases:\n \n ",non-directive
"--  If the argument is NaN, then the result is NaN.\n ",directive
"--  If the argument is positive or negative infinity, then the\n result is positive infinity.\n ",non-directive
"--  If the argument is positive or negative zero, then the result is\n <code>Float.MIN_VALUE</code>.\n ",non-directive
"--  If the argument is &plusmn;<code>Float.MAX_VALUE</code>, then\n the result is equal to 2<sup>104</sup>.\n ",non-directive
"\n\n ",non-directive
"@param f the floating-point value whose ulp is to be returned\n ",non-directive
"@return the size of an ulp of the argument\n ",non-directive
"@author Joseph D. ",non-directive
"Darcy\n ",non-directive
"@since 1.5\n",non-directive
" Returns the unbiased exponent used in the representation of a\n {@code float}.  ",non-directive
"Special cases:\n\n \n ",non-directive
"-- If the argument is NaN or infinite, then the result is\n {@link Float#MAX_EXPONENT} + 1.\n ",directive
"-- If the argument is zero or subnormal, then the result is\n {@link Float#MIN_EXPONENT} -1.\n ",non-directive
"\n ",non-directive
"@param f a {@code float} value\n ",non-directive
"@return the unbiased exponent of the argument\n ",non-directive
"@since 1.6\n",non-directive
" Returns a <tt>long</tt> value with at most a single one-bit, in the\n position of the lowest-order (\"rightmost\") one-bit in the specified\n <tt>long</tt> value.  ",non-directive
"Returns zero if the specified value has no\n one-bits in its two's complement binary representation, that is, if it\n is equal to zero.\n\n ",non-directive
"@return a <tt>long</tt> value with a single one-bit, in the position\n     of the lowest-order one-bit in the specified value, or zero if\n     the specified value is itself equal to zero.\n ",non-directive
"@since 1.5\n",non-directive
" Returns the number of zero bits following the lowest-order (\"rightmost\")\n one-bit in the two's complement binary representation of the specified\n <tt>long</tt> value.  ",non-directive
"Returns 64 if the specified value has no\n one-bits in its two's complement representation, in other words if it is\n equal to zero.\n\n ",non-directive
"@return the number of zero bits following the lowest-order (\"rightmost\")\n     one-bit in the two's complement binary representation of the\n     specified <tt>long</tt> value, or 64 if the value is equal\n     to zero.\n ",non-directive
"@since 1.5\n",non-directive
" Constructs a newly allocated <code>Long</code> object that\n represents the <code>long</code> value indicated by the\n <code>String</code> parameter. ",non-directive
"The string is converted to a\n <code>long</code> value in exactly the manner used by the\n <code>parseLong</code> method for radix 10.\n\n ",directive
"@param      s   the <code>String</code> to be converted to a \n		   <code>Long</code>.\n ",non-directive
"@see        java.lang.Long#parseLong(java.lang.String, int)\n",non-directive
" Returns a <code>String</code> object representing this\n <code>Integer</code>'s value. ",non-directive
"The value is converted to signed\n decimal representation and returned as a string, exactly as if\n the integer value were given as an argument to the {@link\n java.lang.Integer#toString(int)} method.\n\n ",directive
"@return  a string representation of the value of this object in\n          base&nbsp;10.\n",non-directive
" Returns the number of one-bits in the two's complement binary\n representation of the specified <tt>int</tt> value.  ",non-directive
"This function is\n sometimes referred to as the <i>population count</i>.\n\n ",non-directive
"@return the number of one-bits in the two's complement binary\n     representation of the specified <tt>int</tt> value.\n ",non-directive
"@since 1.5\n",non-directive
" Returns the value obtained by reversing the order of the bytes in the\n two's complement representation of the specified <tt>int</tt> value.\n\n ",non-directive
"@return the value obtained by reversing the bytes in the specified\n     <tt>int</tt> value.\n ",non-directive
"@since 1.5\n",non-directive
" Returns a hash code for this <code>Float</code> object. ",non-directive
"The\n result is the integer bit representation, exactly as produced\n by the method {@link #floatToIntBits(float)}, of the primitive\n <code>float</code> value represented by this <code>Float</code>\n object.\n\n ",non-directive
"@return a hash code value for this object.  \n",non-directive
" Returns a representation of the specified floating-point value\n according to the IEEE 754 floating-point \"single format\" bit\n layout, preserving Not-a-Number (NaN) values.\n ",directive
"<p>\n Bit 31 (the bit that is selected by the mask \n <code>0x80000000</code>) represents the sign of the floating-point \n number. \n ",non-directive
"Bits 30-23 (the bits that are selected by the mask \n <code>0x7f800000</code>) represent the exponent. \n ",non-directive
"Bits 22-0 (the bits that are selected by the mask \n <code>0x007fffff</code>) represent the significand (sometimes called \n the mantissa) of the floating-point number. \n ",non-directive
"<p>If the argument is positive infinity, the result is \n <code>0x7f800000</code>. \n ",directive
"<p>If the argument is negative infinity, the result is \n <code>0xff800000</code>.\n ",directive
"<p>\n If the argument is NaN, the result is the integer representing\n the actual NaN value.  ",directive
"Unlike the <code>floatToIntBits</code>\n method, <code>floatToRawIntBits</code> does not collapse all the\n bit patterns encoding a NaN to a single &quot;canonical&quot;\n NaN value.\n ",directive
"<p>\n In all cases, the result is an integer that, when given to the\n {@link #intBitsToFloat(int)} method, will produce a\n floating-point value the same as the argument to\n <code>floatToRawIntBits</code>.\n ",non-directive
"@param   value   a floating-point number.\n ",non-directive
"@return the bits that represent the floating-point number.\n ",non-directive
"@since 1.3\n",non-directive
" Constructs an ExceptionInInitializerError with the specified detail \n message string.  ",non-directive
"A detail message is a String that describes this \n particular exception. ",non-directive
"The detail message string is saved for later \n retrieval by the {@link Throwable#getMessage()} method. ",non-directive
"There is no \n saved throwable object. \n\n\n ",directive
"@param s the detail message\n",non-directive
" Constructs a newly allocated <code>Double</code> object that\n represents the floating-point value of type <code>double</code>\n represented by the string. ",non-directive
"The string is converted to a\n <code>double</code> value as if by the <code>valueOf</code> method.\n\n ",directive
"@param      s   a string to be converted to a <code>Double</code>.\n ",non-directive
"@see        java.lang.Double#valueOf(java.lang.String)\n",non-directive
" Returns the <code>Class</code> object associated with the class or\n interface with the given string name, using the given class loader.\n ",non-directive
"Given the fully qualified name for a class or interface (in the same\n format returned by <code>getName</code>) this method attempts to\n locate, load, and link the class or interface.  ",non-directive
"The specified class\n loader is used to load the class or interface.  ",non-directive
"If the parameter\n <code>loader</code> is null, the class is loaded through the bootstrap\n class loader.  ",directive
"The class is initialized only if the\n <code>initialize</code> parameter is <code>true</code> and if it has\n not been initialized earlier.\n\n ",directive
"<p> If <code>name</code> denotes a primitive type or void, an attempt\n will be made to locate a user-defined class in the unnamed package whose\n name is <code>name</code>. ",directive
"Therefore, this method cannot be used to\n obtain any of the <code>Class</code> objects representing primitive\n types or void.\n\n ",directive
"<p> If <code>name</code> denotes an array class, the component type of\n the array class is loaded but not initialized.\n\n ",directive
"<p> For example, in an instance method the expression:\n\n <blockquote><pre>\n  Class.forName(\"Foo\")\n </pre></blockquote>\n\n is equivalent to:\n\n <blockquote><pre>\n  Class.forName(\"Foo\", true, this.getClass().getClassLoader())\n </pre></blockquote>\n\n Note that this method throws errors related to loading, linking or\n initializing as specified in Sections 12.2, 12.3 and 12.4 of <em>The\n Java Language Specification</em>.\n ",directive
"Note that this method does not check whether the requested class \n is accessible to its caller.\n\n ",directive
"<p> If the <code>loader</code> is <code>null</code>, and a security\n manager is present, and the caller's class loader is not null, then this\n method calls the security manager's <code>checkPermission</code> method\n with a <code>RuntimePermission(\"getClassLoader\")</code> permission to\n ensure it's ok to access the bootstrap class loader.\n\n ",directive
"@param name       fully qualified name of the desired class\n ",non-directive
"@param initialize whether the class must be initialized\n ",non-directive
"@param loader     class loader from which the class must be loaded\n ",non-directive
"@return           class object representing the desired class\n \n ",non-directive
"@see 	  java.lang.Class#forName(String) \n ",non-directive
"@see 	  java.lang.ClassLoader\n ",non-directive
"@since 	  1.2\n",non-directive
" Returns <tt>true</tt> if this class is a synthetic class;\n returns <tt>false</tt> otherwise.\n ",non-directive
"@return <tt>true</tt> if and only if this class is a synthetic class as\n         defined by the Java Language Specification.\n ",non-directive
"@since 1.5\n",non-directive
" Returns the  name of the entity (class, interface, array class,\n primitive type, or void) represented by this <tt>Class</tt> object,\n as a <tt>String</tt>.\n \n",non-directive
" <p> If this class object represents a reference type that is not an\n array type then the binary name of the class is returned, as specified\n by the Java Language Specification, Second Edition.\n\n ",directive
"<p> If this class object represents a primitive type or void, then the\n name returned is a <tt>String</tt> equal to the Java language\n keyword corresponding to the primitive type or void.\n \n",directive
" <p> If this class object represents a class of arrays, then the internal\n form of the name consists of the name of the element type preceded by\n one or more '<tt>[</tt>' characters representing the depth of the array\n nesting.  ",directive
"The encoding of element type names is as follows:\n\n <blockquote><table summary=\"Element types and encodings\">\n <tr><th> Element Type <th> &nbsp;&nbsp;&nbsp; <th> Encoding\n <tr><td> boolean      <td> &nbsp;&nbsp;&nbsp; <td align=center> Z\n <tr><td> byte         <td> &nbsp;&nbsp;&nbsp; <td align=center> B\n <tr><td> char         <td> &nbsp;&nbsp;&nbsp; <td align=center> C\n <tr><td> class or interface  \n                       <td> &nbsp;&nbsp;&nbsp; <td align=center> L<i>classname</i>;\n <tr><td> double       <td> &nbsp;&nbsp;&nbsp; <td align=center> D\n <tr><td> float        <td> &nbsp;&nbsp;&nbsp; <td align=center> F\n <tr><td> int          <td> &nbsp;&nbsp;&nbsp; <td align=center> I\n <tr><td> long         <td> &nbsp;&nbsp;&nbsp; <td align=center> J\n <tr><td> short        <td> &nbsp;&nbsp;&nbsp; <td align=center> S\n </table></blockquote>\n\n <p> The class or interface name <i>classname</i> is the binary name of\n the class specified above.\n\n ",directive
"<p> Examples:\n <blockquote><pre>\n String.class.getName()\n     returns \"java.lang.String\"\n byte.class.getName()\n     returns \"byte\"\n (new Object[3]).getClass().getName()\n     returns \"[Ljava.lang.Object;\"\n (new int[3][4][5][6][7][8][9]).getClass().getName()\n     returns \"[[[[[[[I\"\n </pre></blockquote>\n\n ",non-directive
"@return  the name of the class or interface\n          represented by this object.\n",non-directive
" Returns the class loader for the class.  ",non-directive
"Some implementations may use\n null to represent the bootstrap class loader. ",directive
"This method will return\n null in such implementations if this class was loaded by the bootstrap\n class loader.\n\n ",directive
"<p> If a security manager is present, and the caller's class loader is\n not null and the caller's class loader is not the same as or an ancestor of\n the class loader for the class whose class loader is requested, then\n this method calls the security manager's <code>checkPermission</code> \n method with a <code>RuntimePermission(\"getClassLoader\")</code> \n permission to ensure it's ok to access the class loader for the class.\n \n",directive
" <p>If this object\n represents a primitive type or void, null is returned.\n\n ",directive
"@return  the class loader that loaded the class or interface\n          represented by this object.\n ",non-directive
"@see java.lang.ClassLoader\n ",non-directive
"@see SecurityManager#checkPermission\n ",non-directive
"@see java.lang.RuntimePermission\n",non-directive
" Casts an object to the class or interface represented\n by this <tt>Class</tt> object.\n\n ",non-directive
"@param obj the object to be cast\n ",non-directive
"@return the object after casting, or null if obj is null\n\n ",directive
"@since 1.5\n",non-directive
" Determines if the specified character (Unicode code point) is a\n lowercase character.\n ",non-directive
"<p>\n A character is lowercase if its general category type, provided\n by {@link Character#getType getType(codePoint)}, is\n <code>LOWERCASE_LETTER</code>.\n ",non-directive
"<p>\n The following are examples of lowercase characters:\n <p><blockquote><pre>\n a b c d e f g h i j k l m n o p q r s t u v w x y z\n '&#92;u00DF' '&#92;u00E0' '&#92;u00E1' '&#92;u00E2' '&#92;u00E3' '&#92;u00E4' '&#92;u00E5' '&#92;u00E6' \n '&#92;u00E7' '&#92;u00E8' '&#92;u00E9' '&#92;u00EA' '&#92;u00EB' '&#92;u00EC' '&#92;u00ED' '&#92;u00EE'\n '&#92;u00EF' '&#92;u00F0' '&#92;u00F1' '&#92;u00F2' '&#92;u00F3' '&#92;u00F4' '&#92;u00F5' '&#92;u00F6'\n '&#92;u00F8' '&#92;u00F9' '&#92;u00FA' '&#92;u00FB' '&#92;u00FC' '&#92;u00FD' '&#92;u00FE' '&#92;u00FF'\n </pre></blockquote>\n <p> Many other Unicode characters are lowercase too.\n\n ",non-directive
"@param   codePoint the character (Unicode code point) to be tested.\n ",non-directive
"@return  <code>true</code> if the character is lowercase;\n          <code>false</code> otherwise.\n ",non-directive
"@see     java.lang.Character#isLowerCase(int)\n ",non-directive
"@see     java.lang.Character#isTitleCase(int)\n ",non-directive
"@see     java.lang.Character#toLowerCase(int)\n ",non-directive
"@see     java.lang.Character#getType(int)\n ",non-directive
"@since   1.5\n",non-directive
" Determines if the specified character is a letter or digit.\n ",non-directive
"<p>\n A character is considered to be a letter or digit if either\n <code>Character.isLetter(char ch)</code> or\n <code>Character.isDigit(char ch)</code> returns\n <code>true</code> for the character.\n\n ",non-directive
"<p><b>Note:</b> This method cannot handle <a\n href=\"#supplementary\"> supplementary characters</a>. ",directive
"To support\n all Unicode characters, including supplementary characters, use\n the {@link #isLetterOrDigit(int)} method.\n\n ",directive
"@param   ch   the character to be tested.\n ",non-directive
"@return  <code>true</code> if the character is a letter or digit;\n          <code>false</code> otherwise.\n ",non-directive
"@see     java.lang.Character#isDigit(char)\n ",non-directive
"@see     java.lang.Character#isJavaIdentifierPart(char)\n ",non-directive
"@see     java.lang.Character#isJavaLetter(char)\n ",non-directive
"@see     java.lang.Character#isJavaLetterOrDigit(char)\n ",non-directive
"@see     java.lang.Character#isLetter(char)\n ",non-directive
"@see     java.lang.Character#isUnicodeIdentifierPart(char)\n ",non-directive
"@since   1.0.2\n",non-directive
" Determines if the specified character may be part of a Java\n identifier as other than the first character.\n ",non-directive
"<p>\n A character may be part of a Java identifier if any of the following\n are true:\n \n ",non-directive
"--   it is a letter\n ",directive
"--   it is a currency symbol (such as <code>'$'</code>)\n ",non-directive
"--   it is a connecting punctuation character (such as <code>'_'</code>)\n ",non-directive
"--   it is a digit\n ",non-directive
"--   it is a numeric letter (such as a Roman numeral character)\n ",non-directive
"--   it is a combining mark\n ",non-directive
"--   it is a non-spacing mark\n ",non-directive
"--  <code>isIdentifierIgnorable</code> returns\n <code>true</code> for the character\n \n\n ",non-directive
"<p><b>Note:</b> This method cannot handle <a\n href=\"#supplementary\"> supplementary characters</a>. ",directive
"To support\n all Unicode characters, including supplementary characters, use\n the {@link #isJavaIdentifierPart(int)} method.\n\n ",directive
"@param   ch      the character to be tested.\n ",non-directive
"@return <code>true</code> if the character may be part of a\n          Java identifier; <code>false</code> otherwise.\n ",non-directive
"@see     java.lang.Character#isIdentifierIgnorable(char)\n ",non-directive
"@see     java.lang.Character#isJavaIdentifierStart(char)\n ",non-directive
"@see     java.lang.Character#isLetterOrDigit(char)\n ",non-directive
"@see     java.lang.Character#isUnicodeIdentifierPart(char)\n ",non-directive
"@see     javax.lang.model.SourceVersion#isIdentifier(CharSequence)\n ",non-directive
"@since   1.1\n",non-directive
" Determines if the character (Unicode code point) may be part of a Java\n identifier as other than the first character.\n ",non-directive
"<p>\n A character may be part of a Java identifier if any of the following\n are true:\n \n ",non-directive
"--   it is a letter\n ",non-directive
"--   it is a currency symbol (such as <code>'$'</code>)\n ",non-directive
"--   it is a connecting punctuation character (such as <code>'_'</code>)\n ",non-directive
"--   it is a digit\n ",non-directive
"--   it is a numeric letter (such as a Roman numeral character)\n ",non-directive
"--   it is a combining mark\n ",non-directive
"--   it is a non-spacing mark\n ",non-directive
"--  {@link #isIdentifierIgnorable(int)\n isIdentifierIgnorable(codePoint)} returns <code>true</code> for\n the character\n \n\n ",non-directive
"@param   codePoint the character (Unicode code point) to be tested.\n ",non-directive
"@return <code>true</code> if the character may be part of a\n          Java identifier; <code>false</code> otherwise.\n ",non-directive
"@see     java.lang.Character#isIdentifierIgnorable(int)\n ",non-directive
"@see     java.lang.Character#isJavaIdentifierStart(int)\n ",non-directive
"@see     java.lang.Character#isLetterOrDigit(int)\n ",non-directive
"@see     java.lang.Character#isUnicodeIdentifierPart(int)\n ",non-directive
"@see     javax.lang.model.SourceVersion#isIdentifier(CharSequence)\n ",non-directive
"@since   1.5\n",non-directive
" Determines if the specified character is permissible as the\n first character in a Unicode identifier.\n ",non-directive
"<p>\n A character may start a Unicode identifier if and only if\n one of the following conditions is true:\n \n ",non-directive
"--  {@link #isLetter(char) isLetter(ch)} returns <code>true</code>\n ",non-directive
"--  {@link #getType(char) getType(ch)} returns \n      <code>LETTER_NUMBER</code>.\n ",non-directive
"\n\n ",non-directive
"<p><b>Note:</b> This method cannot handle <a\n href=\"#supplementary\"> supplementary characters</a>. ",directive
"To support\n all Unicode characters, including supplementary characters, use\n the {@link #isUnicodeIdentifierStart(int)} method.\n\n ",directive
"@param   ch      the character to be tested.\n ",non-directive
"@return  <code>true</code> if the character may start a Unicode \n          identifier; <code>false</code> otherwise.\n ",non-directive
"@see     java.lang.Character#isJavaIdentifierStart(char)\n ",non-directive
"@see     java.lang.Character#isLetter(char)\n ",non-directive
"@see     java.lang.Character#isUnicodeIdentifierPart(char)\n ",non-directive
"@since   1.1\n",non-directive
" Determines if the specified character (Unicode code point) is\n white space according to Java.  ",non-directive
"A character is a Java\n whitespace character if and only if it satisfies one of the\n following criteria:\n \n ",non-directive
"--  It is a Unicode space character ({@link #SPACE_SEPARATOR},\n      {@link #LINE_SEPARATOR}, or {@link #PARAGRAPH_SEPARATOR}) \n      but is not also a non-breaking space (<code>'&#92;u00A0'</code>,\n      <code>'&#92;u2007'</code>, <code>'&#92;u202F'</code>).\n ",non-directive
"--  It is <code>'&#92;u0009'</code>, HORIZONTAL TABULATION.\n ",non-directive
"--  It is <code>'&#92;u000A'</code>, LINE FEED.\n ",non-directive
"--  It is <code>'&#92;u000B'</code>, VERTICAL TABULATION.\n ",non-directive
"--  It is <code>'&#92;u000C'</code>, FORM FEED.\n ",non-directive
"--  It is <code>'&#92;u000D'</code>, CARRIAGE RETURN.\n ",non-directive
"--  It is <code>'&#92;u001C'</code>, FILE SEPARATOR.\n ",non-directive
"--  It is <code>'&#92;u001D'</code>, GROUP SEPARATOR.\n ",non-directive
"--  It is <code>'&#92;u001E'</code>, RECORD SEPARATOR.\n ",non-directive
"--  It is <code>'&#92;u001F'</code>, UNIT SEPARATOR.\n ",non-directive
"\n ",non-directive
"<p>\n\n ",non-directive
"@param   codePoint the character (Unicode code point) to be tested.\n ",non-directive
"@return  <code>true</code> if the character is a Java whitespace\n          character; <code>false</code> otherwise.\n ",non-directive
"@see     java.lang.Character#isSpaceChar(int)\n ",non-directive
"@since   1.5\n",non-directive
" Returns a value indicating a character's general category.\n\n ",non-directive
"@param   codePoint the character (Unicode code point) to be tested.\n ",non-directive
"@return  a value of type <code>int</code> representing the \n          character's general category.\n ",non-directive
"@see     Character#COMBINING_SPACING_MARK COMBINING_SPACING_MARK\n ",non-directive
"@see     Character#CONNECTOR_PUNCTUATION CONNECTOR_PUNCTUATION\n ",non-directive
"@see     Character#CONTROL CONTROL\n ",non-directive
"@see     Character#CURRENCY_SYMBOL CURRENCY_SYMBOL\n ",non-directive
"@see     Character#DASH_PUNCTUATION DASH_PUNCTUATION\n ",non-directive
"@see     Character#DECIMAL_DIGIT_NUMBER DECIMAL_DIGIT_NUMBER\n ",non-directive
"@see     Character#ENCLOSING_MARK ENCLOSING_MARK\n ",non-directive
"@see     Character#END_PUNCTUATION END_PUNCTUATION\n ",non-directive
"@see     Character#FINAL_QUOTE_PUNCTUATION FINAL_QUOTE_PUNCTUATION\n ",non-directive
"@see     Character#FORMAT FORMAT\n ",non-directive
"@see     Character#INITIAL_QUOTE_PUNCTUATION INITIAL_QUOTE_PUNCTUATION\n ",non-directive
"@see     Character#LETTER_NUMBER LETTER_NUMBER\n ",non-directive
"@see     Character#LINE_SEPARATOR LINE_SEPARATOR\n ",non-directive
"@see     Character#LOWERCASE_LETTER LOWERCASE_LETTER\n ",non-directive
"@see     Character#MATH_SYMBOL MATH_SYMBOL\n ",non-directive
"@see     Character#MODIFIER_LETTER MODIFIER_LETTER\n ",non-directive
"@see     Character#MODIFIER_SYMBOL MODIFIER_SYMBOL\n ",non-directive
"@see     Character#NON_SPACING_MARK NON_SPACING_MARK\n ",non-directive
"@see     Character#OTHER_LETTER OTHER_LETTER\n ",non-directive
"@see     Character#OTHER_NUMBER OTHER_NUMBER\n ",non-directive
"@see     Character#OTHER_PUNCTUATION OTHER_PUNCTUATION\n ",non-directive
"@see     Character#OTHER_SYMBOL OTHER_SYMBOL\n ",non-directive
"@see     Character#PARAGRAPH_SEPARATOR PARAGRAPH_SEPARATOR\n ",non-directive
"@see     Character#PRIVATE_USE PRIVATE_USE\n ",non-directive
"@see     Character#SPACE_SEPARATOR SPACE_SEPARATOR\n ",non-directive
"@see     Character#START_PUNCTUATION START_PUNCTUATION\n ",non-directive
"@see     Character#SURROGATE SURROGATE\n ",non-directive
"@see     Character#TITLECASE_LETTER TITLECASE_LETTER\n ",non-directive
"@see     Character#UNASSIGNED UNASSIGNED\n ",non-directive
"@see     Character#UPPERCASE_LETTER UPPERCASE_LETTER\n ",non-directive
"@since   1.5\n",non-directive
" Returns a <code>Boolean</code> with a value represented by the\n specified string.  ",non-directive
"The <code>Boolean</code> returned represents a\n true value if the string argument is not <code>null</code>\n and is equal, ignoring case, to the string {@code \"true\"}.\n\n ",directive
"@param   s   a string.\n ",non-directive
"@return  the <code>Boolean</code> value represented by the string.\n",non-directive
" Removes the next reference object in this queue, blocking until either\n one becomes available or the given timeout period expires.\n\n ",non-directive
"<p> This method does not offer real-time guarantees: It schedules the\n timeout as if by invoking the {@link Object#wait(long)} method.\n\n ",directive
"@param  timeout  If positive, block for up to <code>timeout</code>\n                  milliseconds while waiting for a reference to be\n                  added to this queue.  ",directive
"If zero, block indefinitely.\n\n ",directive
"@return  A reference object, if one was available within the specified\n          timeout period, otherwise <code>null</code>\n\n ",directive
" Constructs an AnnotationTypeMismatchException for the specified\n annotation type element and found data type.\n\n ",non-directive
"@param element the <tt>Method</tt> object for the annotation element\n ",non-directive
"@param foundType the (erroneous) type of data found in the annotation.\n        ",non-directive
"This string may, but is not required to, contain the value\n        as well.  ",directive
"The exact format of the string is unspecified.\n",directive
" Return <tt>true</tt> if the integer argument includes the\n <tt>protected</tt> modifier, <tt>false</tt> otherwise.\n\n ",non-directive
"@param 	mod a set of modifiers\n ",non-directive
"@return <tt>true</tt> if <code>mod</code> includes the\n <tt>protected</tt> modifier; <tt>false</tt> otherwise.\n",non-directive
" Return <tt>true</tt> if the integer argument includes the\n <tt>strictfp</tt> modifier, <tt>false</tt> otherwise.\n\n ",non-directive
"@param 	mod a set of modifiers\n ",non-directive
"@return <tt>true</tt> if <code>mod</code> includes the\n <tt>strictfp</tt> modifier; <tt>false</tt> otherwise.\n",non-directive
" Returns the default value for the annotation member represented by\n this <tt>Method</tt> instance.  ",non-directive
"If the member is of a primitive type,\n an instance of the corresponding wrapper type is returned. ",directive
"Returns\n null if no default is associated with the member, or if the method\n instance does not represent a declared member of an annotation type.\n\n ",directive
"@return the default value for the annotation member represented\n     by this <tt>Method</tt> instance.\n ",non-directive
"@since  1.5\n",non-directive
" Returns <tt>true</tt> if this member was introduced by\n the compiler; returns <tt>false</tt> otherwise.\n\n ",non-directive
"@return true if and only if this member was introduced by\n the compiler.\n ",non-directive
"@since 1.5\n",non-directive
" Sets the field represented by this <code>Field</code> object on the\n specified object argument to the specified new value. ",non-directive
"The new\n value is automatically unwrapped if the underlying field has a\n primitive type.\n\n ",directive
"<p>The operation proceeds as follows:\n\n <p>If the underlying field is static, the <code>obj</code> argument is\n ignored; it may be null.\n\n ",non-directive
"<p>Otherwise the underlying field is an instance field.  ",non-directive
"If the\n specified object argument is null, the method throws a\n <code>NullPointerException</code>.  ",non-directive
"If the specified object argument is not\n an instance of the class or interface declaring the underlying\n field, the method throws an <code>IllegalArgumentException</code>.\n\n ",non-directive
"<p>If this <code>Field</code> object enforces Java language access control, and\n the underlying field is inaccessible, the method throws an\n <code>IllegalAccessException</code>.\n\n ",non-directive
"<p>If the underlying field is final, the method throws an\n <code>IllegalAccessException</code> unless\n <code>setAccessible(true)</code> has succeeded for this field\n and this field is non-static. ",non-directive
"Setting a final field in this way\n is meaningful only during deserialization or reconstruction of\n instances of classes with blank final fields, before they are\n made available for access by other parts of a program. ",directive
"Use in\n any other context may have unpredictable effects, including cases\n in which other parts of a program continue to use the original\n value of this field.\n\n ",directive
"<p>If the underlying field is of a primitive type, an unwrapping\n conversion is attempted to convert the new value to a value of\n a primitive type.  ",non-directive
"If this attempt fails, the method throws an\n <code>IllegalArgumentException</code>.\n\n ",non-directive
"<p>If, after possible unwrapping, the new value cannot be\n converted to the type of the underlying field by an identity or\n widening conversion, the method throws an\n <code>IllegalArgumentException</code>.\n\n ",directive
"<p>If the underlying field is static, the class that declared the\n field is initialized if it has not already been initialized.\n\n ",non-directive
"<p>The field is set to the possibly unwrapped and widened new value.\n\n ",non-directive
"<p>If the field is hidden in the type of <code>obj</code>,\n the field's value is set according to the preceding rules.\n\n ",non-directive
"@param obj the object whose field should be modified\n ",directive
"@param value the new value for the field of <code>obj</code>\n being modified\n \n ",non-directive
" Returns an array of <code>Class</code> objects that represent the types\n of exceptions declared to be thrown by the underlying constructor\n represented by this <code>Constructor</code> object.  ",non-directive
"Returns an array of\n length 0 if the constructor declares no exceptions in its <code>throws</code> clause.\n\n ",non-directive
"@return the exception types declared as being thrown by the\n constructor this object represents\n",non-directive
" Returns <tt>true</tt> if this constructor was declared to take\n a variable number of arguments; returns <tt>false</tt>\n otherwise.\n\n ",non-directive
"@return <tt>true</tt> if an only if this constructor was declared to\n take a variable number of arguments.\n ",non-directive
"@since 1.5\n",non-directive
" Returns the value of the indexed component in the specified\n array object, as a <code>char</code>.\n\n ",non-directive
"@param array the array\n ",non-directive
"@param index the index\n ",non-directive
"@return the value of the indexed component in the specified array\n ",non-directive
"@see Array#get\n",non-directive
" Returns the value of the indexed component in the specified\n array object, as a <code>short</code>.\n\n ",non-directive
"@param array the array\n ",non-directive
"@param index the index\n ",non-directive
"@return the value of the indexed component in the specified array\n ",non-directive
"@see Array#get\n",non-directive
" Returns the value of the indexed component in the specified\n array object, as a <code>long</code>.\n\n ",non-directive
"@param array the array\n ",non-directive
"@param index the index\n ",non-directive
"@return the value of the indexed component in the specified array\n ",non-directive
"@see Array#get\n",non-directive
" Returns true if an annotation for the specified type\n is present on this element, else false.  ",non-directive
"This method\n is designed primarily for convenient access to marker annotations.\n\n ",directive
"@param annotationClass the Class object corresponding to the\n        annotation type\n ",non-directive
"@return true if an annotation for the specified annotation\n     type is present on this element, else false\n ",non-directive
"@since 1.5\n",non-directive
" Returns the Java virtual machine specification vendor. \n ",non-directive
"This method is equivalent to {@link System#getProperty \n System.getProperty(\"java.vm.specification.vendor\")}.\n\n ",directive
"@return the Java virtual machine specification vendor.\n\n ",non-directive
"@see java.lang.SecurityManager#checkPropertyAccess(java.lang.String)\n ",non-directive
"@see java.lang.System#getProperty\n",non-directive
"\n Returns the maximum amount of memory in bytes that can be \n used for memory management.  ",non-directive
"This method returns <tt>-1</tt> \n if the maximum memory size is undefined.\n\n ",directive
"<p> This amount of memory is not guaranteed to be available \n for memory management if it is greater than the amount of \n committed memory.  ",directive
"The Java virtual machine may fail to allocate \n memory even if the amount of used memory does not exceed this \n maximum size.\n \n",directive
"@return the maximum amount of memory in bytes; \n <tt>-1</tt> if undefined.\n",non-directive
"\n Returns the current memory usage of the heap that\n is used for object allocation.  ",non-directive
"The heap consists \n of one or more memory pools.  ",non-directive
"The <tt>used</tt>\n and <tt>committed</tt> size of the returned memory\n usage is the sum of those values of all heap memory pools\n whereas the <tt>init</tt> and <tt>max</tt> size of the\n returned memory usage represents the setting of the heap\n memory which may not be the sum of those of all heap\n memory pools.\n ",non-directive
"<p>\n The amount of used memory in the returned memory usage\n is the amount of memory occupied by both live objects\n and garbage objects that have not been collected, if any.\n\n ",non-directive
"<p>\n <b>MBeanServer access</b>:<br>\n The mapped type of <tt>MemoryUsage</tt> is\n <tt>CompositeData</tt> with attributes as specified in \n {@link MemoryUsage#from MemoryUsage}.\n\n ",directive
"@return a {@link MemoryUsage} object representing \n the heap memory usage.\n",non-directive
" Returns an integer number format for the current default locale. ",non-directive
"The\n returned number format is configured to round floating point numbers\n to the nearest integer using half-even rounding (see {@link\n java.math.RoundingMode#HALF_EVEN RoundingMode.HALF_EVEN}) for formatting,\n and to parse only the integer part of an input string (see {@link\n #isParseIntegerOnly isParseIntegerOnly}).\n\n ",directive
"@see #getRoundingMode()\n ",non-directive
"@return a number format for integer values\n ",non-directive
"@since 1.4\n",non-directive
" Formats an object to produce a string. ",non-directive
"This is equivalent to\n <blockquote>\n {@link #format(Object, StringBuffer, FieldPosition) format}<code>(obj,\n         new StringBuffer(), new FieldPosition(0)).toString();</code>\n </blockquote>\n\n ",non-directive
"@param obj    The object to format\n ",non-directive
"@return       Formatted string.\n ",non-directive
" Parses text from a string to produce an object.\n ",non-directive
"<p>\n The method attempts to parse text starting at the index given by\n <code>pos</code>.\n ",non-directive
"If parsing succeeds, then the index of <code>pos</code> is updated\n to the index after the last character used (parsing does not necessarily\n use all characters up to the end of the string), and the parsed\n object is returned. ",non-directive
"The updated <code>pos</code> can be used to\n indicate the starting point for the next call to this method.\n ",directive
"If an error occurs, then the index of <code>pos</code> is not\n changed, the error index of <code>pos</code> is set to the index of\n the character where the error occurred, and null is returned.\n\n ",directive
"@param source A <code>String</code>, part of which should be parsed.\n ",non-directive
"@param pos A <code>ParsePosition</code> object with index and error\n            index information as described above.\n ",non-directive
"@return An <code>Object</code> parsed from the string. ",non-directive
"In case of\n         error, returns null.\n ",directive
" Parses text from the beginning of the given string to produce an object.\n ",non-directive
"The method may not use the entire text of the given string.\n\n ",directive
"@param source A <code>String</code> whose beginning should be parsed.\n ",non-directive
"@return An <code>Object</code> parsed from the string.\n ",non-directive
" Set the grouping size. ",non-directive
"Grouping size is the number of digits between\n grouping separators in the integer portion of a number.  ",non-directive
"For example,\n in the number \"123,456.78\", the grouping size is 3.\n <br>\n",directive
" The value passed in is converted to a byte, which may lose information.\n ",directive
"@see #getGroupingSize\n ",non-directive
"@see java.text.NumberFormat#setGroupingUsed\n ",non-directive
"@see java.text.DecimalFormatSymbols#setGroupingSeparator\n",non-directive
" Creates a DecimalFormat using the given pattern and the symbols\n for the default locale. ",non-directive
"This is a convenient way to obtain a\n DecimalFormat when internationalization is not the main concern.\n ",directive
"<p>\n To obtain standard formats for a given locale, use the factory methods\n on NumberFormat such as getNumberInstance. ",directive
"These factories will\n return the most appropriate sub-class of NumberFormat for a given\n locale.\n\n ",non-directive
"@param pattern A non-localized pattern string.\n ",non-directive
"@see java.text.NumberFormat#getInstance\n ",non-directive
"@see java.text.NumberFormat#getNumberInstance\n ",non-directive
"@see java.text.NumberFormat#getCurrencyInstance\n ",non-directive
"@see java.text.NumberFormat#getPercentInstance\n",non-directive
" Gets localized date-time pattern characters. ",non-directive
"For example: 'u', 't', etc.\n ",non-directive
"@return the localized date-time pattern characters.\n",non-directive
" Gets the date formatter with the given formatting style\n for the default locale.\n ",non-directive
"@param style the given formatting style. ",non-directive
"For example,\n SHORT for \"M/d/yy\" in the US locale.\n ",non-directive
"@return a date formatter.\n",non-directive
" Set the calendar to be used by this date format.  ",non-directive
"Initially, the default\n calendar for the specified or default locale is used.\n ",directive
"@param newCalendar the new Calendar to be used by the date format\n",non-directive
" Compare this CollationKey to the target CollationKey. ",non-directive
"The collation rules of the\n Collator object which created these keys are applied. ",non-directive
"<strong>Note:</strong>\n CollationKeys created by different Collators can not be compared.\n ",directive
"@param target target CollationKey\n ",non-directive
"@return Returns an integer value. ",non-directive
"Value is less than zero if this is less\n than target, value is zero if this and target are equal and value is greater than\n zero if this is greater than target.\n ",non-directive
"@see java.text.Collator#compare\n",non-directive
" Get the previous collation element in the string.  ",non-directive
"<p>This iterator iterates\n over a sequence of collation elements that were built from the string.\n ",non-directive
"Because there isn't necessarily a one-to-one mapping from characters to\n collation elements, this doesn't mean the same thing as \"return the\n collation element [or ordering priority] of the previous character in the\n string\".</p>\n <p>This function updates the iterator's internal pointer to point to the\n collation element preceding the one it's currently pointing to and then\n returns that element, while next() returns the current element and then\n updates the pointer.  ",directive
"This means that when you change direction while\n iterating (i.e., call next() and then call previous(), or call previous()\n and then call next()), you'll get back the same element twice.</p>\n ",directive
"@since 1.2\n",non-directive
" Returns the first boundary following the specified character offset. ",non-directive
"If the \n specified offset equals to the last text boundary, it returns \n <code>BreakIterator.DONE</code> and the iterator's current position is unchanged. \n ",directive
"Otherwise, the iterator's current position is set to the returned boundary. \n ",non-directive
"The value returned is always greater than the offset or the value \n <code>BreakIterator.DONE</code>.\n ",directive
"@param offset the character offset to begin scanning.\n ",non-directive
"@return The first boundary after the specified offset or \n <code>BreakIterator.DONE</code> if the last text boundary is passed in \n as the offset.\n ",non-directive
" Set a new text string to be scanned.  ",non-directive
"The current scan\n position is reset to first().\n ",directive
"@param newText new text to scan.\n",non-directive
" Return the level of the nth logical run in this line.\n ",non-directive
"@param run the index of the run, between 0 and <code>getRunCount()</code>\n ",non-directive
"@return the level of the run\n",non-directive
" Return the index of the character past the end of the nth logical run in this line, as \n an offset from the start of the line.  ",non-directive
"For example, this will return the length\n of the line for the last run on the line.\n ",non-directive
"@param run the index of the run, between 0 and <code>getRunCount()</code>\n ",non-directive
"@return limit the limit of the run\n",non-directive
" Adds the given SQL command to the current list of commmands for this\n <code>Statement</code> object. ",non-directive
"The commands in this list can be\n executed as a batch by calling the method <code>executeBatch</code>.\n ",directive
"<P>\n\n ",non-directive
"@param sql typically this is a SQL <code>INSERT</code> or \n <code>UPDATE</code> statement\n ",directive
"@see #executeBatch\n ",non-directive
"@see DatabaseMetaData#supportsBatchUpdates\n ",non-directive
"@since 1.2\n",non-directive
" Retrieves whether this <code>Statement</code> object has been closed. ",non-directive
"A <code>Statement</code> is closed if the\n method close has been called on it, or if it is automatically closed.\n ",directive
"@return true if this <code>Statement</code> object is closed; false if it is still open\n ",non-directive
"@since 1.6\n",non-directive
" Constructs a  <code>SQLWarning</code> object.\n ",non-directive
"The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n ",directive
"The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n ",directive
"<p>\n",non-directive
" Constructs a <code>SQLTransientConnectionException</code> object \n with a given\n <code>reason</code> and  <code>cause</code>.  \n ",non-directive
"The <code>SQLState</code> is  initialized to <code>null</code>\n and the vendor code is initialized to 0.\n ",directive
"<p>\n ",non-directive
"@param reason a description of the exception. \n ",non-directive
"@param cause the underlying reason for this <code>SQLException</code>(which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n ",directive
"@since 1.6\n",non-directive
" Constructs a <code>SQLSyntaxErrorException</code> object \n   with a given  <code>cause</code>.\n ",non-directive
"The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n ",directive
"The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n ",directive
"<p>\n ",non-directive
"@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval bythe <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n ",directive
"@since 1.6\n",non-directive
" Writes the next attribute to the stream as a stream of ASCII characters.\n\n ",non-directive
"@param x the value to pass to the database\n ",non-directive
"@since 1.2\n",non-directive
" Constructs a <code>SQLNonTransientConnectionException</code> object\n  with a given <code>reason</code>. ",non-directive
"The <code>SQLState</code> \n is initialized to <code>null</code> and the vender code is initialized \n to 0.\n\n ",directive
"The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n ",directive
"<p>\n ",non-directive
"@param reason a description of the exception\n ",non-directive
"@since 1.6\n",non-directive
" Constructs a <code>SQLIntegrityConstraintViolationException</code> object.\n ",non-directive
"The <code>reason</code>, <code>SQLState</code> are initialized\n to <code>null</code> and the vendor code is initialized to 0.\n\n ",directive
"The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.\n ",directive
"<p>\n ",non-directive
"@since 1.6\n",non-directive
" Constructs an <code>SQLIntegrityConstraintViolationException</code> object with\n  a given  <code>cause</code>.\n ",non-directive
"The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n ",directive
"The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n ",non-directive
"<p>\n ",non-directive
"@param cause the underlying reason for this <code>SQLException</code> (which is saved for later retrieval by the <code>getCause()</code>  method); may be null indicating\n     the cause is non-existent or unknown.\n ",directive
"@since 1.6\n",non-directive
" Reads the next attribute in the stream and returns it as a <code>boolean</code> \n in the Java programming language.\n\n ",non-directive
"@return the attribute; if the value is SQL <code>NULL</code>, returns <code>false</code>\n ",directive
"@since 1.2\n",non-directive
" Reads the next attribute in the stream and returns it as a <code>byte</code> \n in the Java programming language.\n\n ",non-directive
"@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n ",directive
"@since 1.2\n",non-directive
" Reads the next attribute in the stream and returns it as a <code>long</code> \n in the Java programming language.\n\n ",non-directive
"@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n ",directive
"@since 1.2\n",non-directive
" Reads the next attribute in the stream and returns it as a <code>double</code> \n in the Java programming language.\n\n ",non-directive
"@return the attribute; if the value is SQL <code>NULL</code>, returns <code>0</code>\n ",directive
"@since 1.2\n",non-directive
" Reads an SQL <code>REF</code> value from the stream and returns it as a\n <code>Ref</code> object in the Java programming language.\n\n ",non-directive
"@return a <code>Ref</code> object representing the SQL <code>REF</code> value\n at the head of the stream; <code>null</code> if the value read is \n SQL <code>NULL</code>\n ",directive
"@since 1.2\n",non-directive
" Constructs a <code>SQLFeatureNotSupportedException</code> object \n with a given\n <code>reason</code>, <code>SQLState</code> and  <code>cause</code>.  \n ",non-directive
"The vendor code is initialized to 0.\n ",directive
"<p>\n ",non-directive
"@param reason a description of the exception. \n ",non-directive
"@param SQLState an XOPEN or SQL:2003 code identifying the exception \n ",non-directive
"@param cause the (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n     the cause is non-existent or unknown.\n ",directive
"@since 1.6\n",non-directive
" Compares this <code>RowId</code> to the specified object. ",non-directive
"The result is \n <code>true</code> if and only if the argument is not null and is a RowId \n object that represents the same ROWID as  this object. \n ",non-directive
"<p>\n It is important \n to consider both the origin and the valid lifetime of a <code>RowId</code>\n when comparing it to another <code>RowId</code>. ",directive
"If both are valid, and \n both are from the same table on the same data source, then if they are equal\n they identify \n the same row; if one or more is no longer guaranteed to be valid, or if \n they originate from different data sources, or different tables on the\n same data source, they  may be equal but still\n not identify the same row. \n \n",directive
"@param obj the <code>Object</code> to compare this <code>RowId</code> object\n     against.\n ",non-directive
"@return true if the <code>RowId</code>s are equal; false otherwise\n ",non-directive
"@since 1.6\n",non-directive
" Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a\n <code>java.math.BigDecimal</code> with full precision.\n\n ",non-directive
"@param columnLabel the label for the column specified with the SQL AS clause.  ",non-directive
"If the SQL AS clause was not specified, then the label is the name of the column\n ",non-directive
"@return the column value (full precision);\n if the value is SQL <code>NULL</code>, the value returned is\n <code>null</code> in the Java programming language.\n ",directive
"@since 1.2\n\n",non-directive
" Retrieves whether the cursor is on the first row of\n this <code>ResultSet</code> object.\n ",non-directive
"<p>\n <strong>Note:</strong>Support for the <code>isFirst</code> method \n is optional for <code>ResultSet</code>s with a result \n set type of <code>TYPE_FORWARD_ONLY</code>\n\n ",directive
"@return <code>true</code> if the cursor is on the first row;\n <code>false</code> otherwise   \n ",non-directive
"@since 1.2\n",non-directive
" Moves the cursor to the last row in\n this <code>ResultSet</code> object.\n\n ",non-directive
"@return <code>true</code> if the cursor is on a valid row;\n <code>false</code> if there are no rows in the result set\n ",non-directive
"@since 1.2\n",non-directive
" Retrieves whether the current row has had an insertion.\n ",non-directive
"The value returned depends on whether or not this\n <code>ResultSet</code> object can detect visible inserts.\n ",directive
"<p>\n <strong>Note:</strong> Support for the <code>rowInserted</code> method is optional with a result set \n concurrency of <code>CONCUR_READ_ONLY</code>\n ",directive
"@return <code>true</code> if the current row is detected to \n have been inserted; <code>false</code> otherwise\n ",non-directive
"@see DatabaseMetaData#insertsAreDetected\n ",non-directive
"@since 1.2\n",non-directive
" Updates the designated column with a <code>java.sql.Date</code> value.\n ",non-directive
"The updater methods are used to update column values in the\n current row or the insert row.  ",non-directive
"The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n ",directive
"@param columnLabel the label for the column specified with the SQL AS clause.  ",non-directive
"If the SQL AS clause was not specified, then the label is the name of the column\n ",directive
"@param x the new column value\n ",non-directive
"@since 1.2\n",non-directive
" Refreshes the current row with its most recent value in \n the database.  ",non-directive
"This method cannot be called when\n the cursor is on the insert row.\n\n ",directive
"<P>The <code>refreshRow</code> method provides a way for an \n application to \n explicitly tell the JDBC driver to refetch a row(s) from the\n database.  ",non-directive
"An application may want to call <code>refreshRow</code> when \n caching or prefetching is being done by the JDBC driver to\n fetch the latest value of a row from the database.  ",directive
"The JDBC driver \n may actually refresh multiple rows at once if the fetch size is \n greater than one.\n \n",directive
" <P> All values are refetched subject to the transaction isolation \n level and cursor sensitivity.  ",non-directive
"If <code>refreshRow</code> is called after\n calling an updater method, but before calling\n the method <code>updateRow</code>, then the\n updates made to the row are lost.  ",directive
"Calling the method\n <code>refreshRow</code> frequently will likely slow performance.\n\n ",directive
"@since 1.2\n",non-directive
" Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>Blob</code> object\n in the Java programming language.\n\n ",non-directive
"@param columnLabel the label for the column specified with the SQL AS clause.  ",non-directive
"If the SQL AS clause was not specified, then the label is the name of the column\n ",non-directive
"@return a <code>Blob</code> object representing the SQL <code>BLOB</code> \n         value in the specified column\n ",non-directive
"@since 1.2\n",non-directive
" Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as a <code>java.net.URL</code>\n object in the Java programming language.\n \n",non-directive
"@param columnLabel the label for the column specified with the SQL AS clause.  ",non-directive
"If the SQL AS clause was not specified, then the label is the name of the column\n ",non-directive
"@return the column value as a <code>java.net.URL</code> object;\n if the value is SQL <code>NULL</code>,\n the value returned is <code>null</code> in the Java programming language\n ",directive
"@since 1.4\n",non-directive
" Updates the designated column with a <code>java.sql.SQLXML</code> value.\n ",non-directive
"The updater\n methods are used to update column values in the current row or the insert\n row. ",non-directive
"The updater methods do not update the underlying database; instead \n the <code>updateRow</code> or <code>insertRow</code> methods are called \n to update the database.\n ",directive
"<p>\n\n ",non-directive
"@param columnIndex the first column is 1, the second 2, ...\n ",non-directive
"@param xmlObject the value for the column to be updated\n ",non-directive
"The <code>getCause</code> method \n  of the exception may provide a more detailed exception, for example, if the \n  stream does not contain valid XML.\n ",directive
"@since 1.6\n",non-directive
" Retrieves the value of the designated column in the current row\n of this <code>ResultSet</code> object as\n a <code>String</code> in the Java programming language.\n ",non-directive
"It is intended for use when\n accessing  <code>NCHAR</code>,<code>NVARCHAR</code>\n and <code>LONGNVARCHAR</code> columns.\n\n ",directive
"@param columnLabel the label for the column specified with the SQL AS clause.  ",non-directive
"If the SQL AS clause was not specified, then the label is the name of the column\n ",non-directive
"@return the column value; if the value is SQL <code>NULL</code>, the\n value returned is <code>null</code>\n ",directive
"@since 1.6\n",non-directive
"\n Updates the designated column using the given input stream, which\n will have the specified number of bytes.\n \n",non-directive
" <p>\n The updater methods are used to update column values in the\n current row or the insert row.  ",non-directive
"The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n ",directive
"@param columnLabel the label for the column specified with the SQL AS clause.  ",non-directive
"If the SQL AS clause was not specified, then the label is the name of the column\n ",directive
"@param inputStream An object that contains the data to set the parameter\n value to.\n ",non-directive
"@param length the number of bytes in the parameter data.\n ",non-directive
"@since 1.6\n",non-directive
" Updates the designated column using the given <code>Reader</code>\n object, which is the given number of characters long.\n ",non-directive
"When a very large UNICODE value is input to a <code>LONGVARCHAR</code>\n parameter, it may be more practical to send it via a\n <code>java.io.Reader</code> object. ",directive
"The JDBC driver will\n do any necessary conversion from UNICODE to the database char format.\n \n",non-directive
" <p>\n The updater methods are used to update column values in the\n current row or the insert row.  ",non-directive
"The updater methods do not \n update the underlying database; instead the <code>updateRow</code> or\n <code>insertRow</code> methods are called to update the database.\n\n ",directive
"@param columnIndex the first column is 1, the second 2, ...\n ",directive
"@param reader An object that contains the data to set the parameter value to.\n ",non-directive
"@param length the number of characters in the parameter data.\n ",non-directive
"@since 1.6\n",non-directive
" Sets the designated parameter to the given Java <code>float</code> value. \n ",non-directive
"The driver converts this\n to an SQL <code>REAL</code> value when it sends it to the database.\n\n ",directive
"@param parameterIndex the first parameter is 1, the second is 2, ...\n ",non-directive
"@param x the parameter value\n ",non-directive
" Sets the designated parameter to the given Java <code>String</code> value. \n ",non-directive
"The driver converts this\n to an SQL <code>VARCHAR</code> or <code>LONGVARCHAR</code> value\n (depending on the argument's\n size relative to the driver's limits on <code>VARCHAR</code> values)\n when it sends it to the database.\n\n ",directive
"@param parameterIndex the first parameter is 1, the second is 2, ...\n ",non-directive
"@param x the parameter value\n ",non-directive
" Sets the designated parameter to the given <code>java.sql.Date</code> value\n using the default time zone of the virtual machine that is running\n the application. \n ",non-directive
"The driver converts this\n to an SQL <code>DATE</code> value when it sends it to the database.\n\n ",directive
"@param parameterIndex the first parameter is 1, the second is 2, ...\n ",non-directive
"@param x the parameter value\n ",non-directive
" Retrieves whether null values are allowed in the designated parameter.\n\n ",non-directive
"@param param the first parameter is 1, the second is 2, ...\n ",non-directive
"@return the nullability status of the given parameter; one of \n        <code>ParameterMetaData.parameterNoNulls</code>, \n        <code>ParameterMetaData.parameterNullable</code>, or \n        <code>ParameterMetaData.parameterNullableUnknown</code>\n ",directive
"@since 1.4\n",non-directive
" Retrieves a comma-separated list of system functions available with\n this database.  ",non-directive
"These are the  Open Group CLI system function names used \n in the JDBC function escape clause.\n\n ",directive
"@return a list of system functions supported by this database\n ",non-directive
" Retrieves whether this database supports the JDBC scalar function \n <code>CONVERT</code> for the conversion of one JDBC type to another.\n ",non-directive
"The JDBC types are the generic SQL data types defined \n in <code>java.sql.Types</code>.\n\n ",non-directive
"@return <code>true</code> if so; <code>false</code> otherwise\n ",non-directive
" Retrieves whether inserts made by others are visible.\n\n ",non-directive
"@param type the <code>ResultSet</code> type; one of\n        <code>ResultSet.TYPE_FORWARD_ONLY</code>,\n        <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n        <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n ",directive
"@return <code>true</code> if inserts made by others\n         are visible for the given result set type;\n         <code>false</code> otherwise\n ",non-directive
"@since 1.2\n",non-directive
" Retrieves whether this database supports statement pooling.\n\n ",non-directive
"@return <code>true</code> if so; <code>false</code> otherwise\n ",non-directive
"@since 1.4\n",non-directive
" Creates a savepoint with the given name in the current transaction\n and returns the new <code>Savepoint</code> object that represents it.\n\n ",non-directive
"<p> if setSavepoint is invoked outside of an active transaction, a transaction will be started at this newly created \nsavepoint.\n\n ",directive
"@param name a <code>String</code> containing the name of the savepoint\n ",non-directive
"@return the new <code>Savepoint</code> object\n ",non-directive
"@see Savepoint\n ",non-directive
"@since 1.4\n",non-directive
" Creates a <code>CallableStatement</code> object that will generate\n <code>ResultSet</code> objects with the given type and concurrency.\n ",non-directive
"This method is the same as the <code>prepareCall</code> method\n above, but it allows the default result set\n type, result set concurrency type and holdability to be overridden.\n\n ",directive
"@param sql a <code>String</code> object that is the SQL statement to\n            be sent to the database; may contain on or more '?' parameters\n ",non-directive
"@param resultSetType one of the following <code>ResultSet</code> \n        constants:\n         <code>ResultSet.TYPE_FORWARD_ONLY</code>, \n         <code>ResultSet.TYPE_SCROLL_INSENSITIVE</code>, or\n         <code>ResultSet.TYPE_SCROLL_SENSITIVE</code>\n ",directive
"@param resultSetConcurrency one of the following <code>ResultSet</code> \n        constants:\n         <code>ResultSet.CONCUR_READ_ONLY</code> or\n         <code>ResultSet.CONCUR_UPDATABLE</code>\n ",directive
"@param resultSetHoldability one of the following <code>ResultSet</code> \n        constants:\n         <code>ResultSet.HOLD_CURSORS_OVER_COMMIT</code> or\n         <code>ResultSet.CLOSE_CURSORS_AT_COMMIT</code>\n ",directive
"@return a new <code>CallableStatement</code> object, containing the\n         pre-compiled SQL statement, that will generate\n         <code>ResultSet</code> objects with the given type,\n         concurrency, and holdability\n ",non-directive
"@see ResultSet\n ",non-directive
"@since 1.4\n",non-directive
" Constructs an object that implements the <code>Blob</code> interface. ",non-directive
"The object\n returned initially contains no data.  ",non-directive
"The <code>setBinaryStream</code> and\n <code>setBytes</code> methods of the <code>Blob</code> interface may be used to add data to\n the <code>Blob</code>.\n ",directive
"@return  An object that implements the <code>Blob</code> interface\n ",non-directive
"@since 1.6\n",non-directive
" Constructs an object that implements the <code>SQLXML</code> interface. ",non-directive
"The object\n returned initially contains no data. ",non-directive
"The <code>createXmlStreamWriter</code> object and\n <code>setString</code> method of the <code>SQLXML</code> interface may be used to add data to the <code>SQLXML</code>\n object.\n ",directive
"@return An object that implements the <code>SQLXML</code> interface\n ",non-directive
"@since 1.6\n",non-directive
" Sets the value of the connection's client info properties.  ",non-directive
"The \n <code>Properties</code> object contains the names and values of the client info \n properties to be set.  ",non-directive
"The set of client info properties contained in \n the properties list replaces the current set of client info properties \n on the connection.  ",non-directive
"If a property that is currently set on the \n connection is not present in the properties list, that property is \n cleared.  ",directive
"Specifying an empty properties list will clear all of the \n properties on the connection.  ",directive
"See <code>setClientInfo (String, String)</code> for \n more information.\n ",directive
"<p>  \n If an error occurs in setting any of the client info properties, a \n <code>SQLClientInfoException</code> is thrown. ",directive
"The <code>SQLClientInfoException</code>\n contains information indicating which client info properties were not set. \n ",directive
"The state of the client information is unknown because \n some databases do not allow multiple client info properties to be set \n atomically.  ",directive
"For those databases, one or more properties may have been \n set before the error occurred.\n ",directive
"<p>\n \n ",non-directive
"@param properties		the list of client info properties to set\n <p>\n ",non-directive
"@see java.sql.Connection#setClientInfo(String, String) setClientInfo(String, String)\n ",non-directive
"@since 1.6\n <p>\n ",non-directive
"\n Retrieves the character position at which the specified  \n <code>Clob</code> object <code>searchstr</code> appears in this \n <code>Clob</code> object.  ",non-directive
"The search begins at position \n <code>start</code>.\n\n ",non-directive
"@param searchstr the <code>Clob</code> object for which to search\n ",non-directive
"@param start the position at which to begin searching; the first\n              position is 1\n ",non-directive
"@return the position at which the <code>Clob</code> object appears \n              or -1 if it is not present; the first position is 1\n ",directive
"@since 1.2\n",non-directive
" Retrieves the value of the designated JDBC <code>FLOAT</code> parameter \n as a <code>float</code> in the Java programming language.\n\n ",non-directive
"@param parameterIndex the first parameter is 1, the second is 2, \n        and so on\n ",non-directive
"@return the parameter value.  ",non-directive
"If the value is SQL <code>NULL</code>, the result \n         is <code>0</code>.\n ",directive
"@see #setFloat\n",non-directive
" Retrieves the value of the designated JDBC <code>TIME</code> parameter as a \n <code>java.sql.Time</code> object.\n\n ",non-directive
"@param parameterIndex the first parameter is 1, the second is 2, \n        and so on\n ",directive
"@return the parameter value.  ",non-directive
"If the value is SQL <code>NULL</code>, the result \n         is <code>null</code>.\n ",directive
"@see #setTime\n",non-directive
" Retrieves the value of the designated JDBC <code>TIMESTAMP</code> parameter as a\n <code>java.sql.Timestamp</code> object, using\n the given <code>Calendar</code> object to construct\n the <code>Timestamp</code> object.\n ",non-directive
"With a <code>Calendar</code> object, the driver\n can calculate the timestamp taking into account a custom timezone and locale.\n ",directive
"If no <code>Calendar</code> object is specified, the driver uses the\n default timezone and locale.\n\n\n ",directive
"@param parameterIndex the first parameter is 1, the second is 2, \n and so on\n ",non-directive
"@param cal the <code>Calendar</code> object the driver will use\n            to construct the timestamp\n ",non-directive
"@return the parameter value.  ",non-directive
"If the value is SQL <code>NULL</code>, the result \n         is <code>null</code>.\n ",directive
"@see #setTimestamp\n ",non-directive
"@since 1.2\n",non-directive
" Sets the designated parameter to the given Java <code>boolean</code> value.\n ",non-directive
"The driver converts this\n to an SQL <code>BIT</code> or <code>BOOLEAN</code> value when it sends it to the database.\n\n ",directive
"@param parameterName the name of the parameter\n ",non-directive
"@param x the parameter value\n ",non-directive
"@see #getBoolean\n ",non-directive
"@since 1.4\n",non-directive
" Sets the designated parameter to the given Java <code>byte</code> value.  \n ",non-directive
"The driver converts this\n to an SQL <code>TINYINT</code> value when it sends it to the database.\n\n ",directive
"@param parameterName the name of the parameter\n ",non-directive
"@param x the parameter value\n ",non-directive
"@see #getByte\n ",non-directive
"@since 1.4\n",non-directive
" Sets the value of the designated parameter with the given object.\n ",non-directive
"This method is like the method <code>setObject</code>\n above, except that it assumes a scale of zero.\n\n ",directive
"@param parameterName the name of the parameter\n ",non-directive
"@param x the object containing the input parameter value\n ",non-directive
"@param targetSqlType the SQL type (as defined in java.sql.Types) to be \n                      sent to the database\n ",directive
"@see #getObject\n ",non-directive
"@since 1.4\n",non-directive
" Sets the designated parameter to the given <code>java.sql.Date</code> value,\n using the given <code>Calendar</code> object.  ",non-directive
"The driver uses\n the <code>Calendar</code> object to construct an SQL <code>DATE</code> value,\n which the driver then sends to the database.  ",non-directive
"With a\n a <code>Calendar</code> object, the driver can calculate the date\n taking into account a custom timezone.  ",non-directive
"If no\n <code>Calendar</code> object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application.\n\n ",directive
"@param parameterName the name of the parameter\n ",non-directive
"@param x the parameter value\n ",non-directive
"@param cal the <code>Calendar</code> object the driver will use\n            to construct the date\n ",non-directive
"@see #getDate\n ",non-directive
"@since 1.4\n",non-directive
" Sets the designated parameter to the given <code>java.sql.Time</code> value,\n using the given <code>Calendar</code> object.  ",non-directive
"The driver uses\n the <code>Calendar</code> object to construct an SQL <code>TIME</code> value,\n which the driver then sends to the database.  ",non-directive
"With a\n a <code>Calendar</code> object, the driver can calculate the time\n taking into account a custom timezone.  ",non-directive
"If no\n <code>Calendar</code> object is specified, the driver uses the default\n timezone, which is that of the virtual machine running the application.\n\n ",directive
"@param parameterName the name of the parameter\n ",non-directive
"@param x the parameter value\n ",non-directive
"@param cal the <code>Calendar</code> object the driver will use\n            to construct the time\n ",non-directive
"@see #getTime\n ",non-directive
"@since 1.4\n",non-directive
" Retrieves the value of a JDBC <code>ARRAY</code> parameter as an\n {@link java.sql.Array} object in the Java programming language.\n\n ",non-directive
"@param parameterName the name of the parameter\n ",non-directive
"@return the parameter value as an <code>Array</code> object in\n         Java programming language.  ",non-directive
"If the value was SQL <code>NULL</code>, \n         the value <code>null</code> is returned.\n ",directive
"@since 1.4\n",non-directive
" Sets the designated parameter to a <code>java.sql.NClob</code> object. ",non-directive
"The object\n implements the <code>java.sql.NClob</code> interface. ",non-directive
"This <code>NClob</code>\n object maps to a SQL <code>NCLOB</code>.\n ",directive
"@param parameterName the name of the parameter to be set\n ",non-directive
"@param value the parameter value\n ",non-directive
"@since 1.6\n",non-directive
" Constructs a <code>BatchUpdateException</code> object initialized with a given\n <code>reason</code> and <code>updateCounts</code>.\n ",non-directive
"The <code>cause</code> is not initialized, and may subsequently be\n initialized by a call to the \n {@link Throwable#initCause(java.lang.Throwable)} method.  ",directive
"The \n <code>SQLState</code> is initialized to <code>null</code>\n and the vender code is initialized to 0.\n ",directive
"<p>\n\n\n ",non-directive
"@param reason a description of the exception \n ",non-directive
"@param updateCounts an array of <code>int</code>, with each element\n indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or\n <code>Statement.EXECUTE_FAILED</code> for each SQL command in \n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n <code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure\n ",directive
"@since 1.2\n",non-directive
" Constructs a <code>BatchUpdateException</code> object initialized with a\n given <code>cause</code> and <code>updateCounts</code>.\n ",non-directive
"The <code>SQLState</code> is initialized\n to <code>null</code> and the vendor code is initialized to 0. \n ",directive
"The <code>reason</code>  is initialized to <code>null</code> if \n <code>cause==null</code> or to <code>cause.toString()</code> if \n <code>cause!=null</code>.\n\n ",directive
"@param updateCounts an array of <code>int</code>, with each element\n indicating the update count, <code>Statement.SUCCESS_NO_INFO</code> or\n <code>Statement.EXECUTE_FAILED</code> for each SQL command in \n the batch for JDBC drivers that continue processing\n after a command failure; an update count or\n <code>Statement.SUCCESS_NO_INFO</code> for each SQL command in the batch\n prior to the failure for JDBC drivers that stop processing after a command\n failure\n ",directive
"@param cause the underlying reason for this <code>SQLException</code>\n (which is saved for later retrieval by the <code>getCause()</code> method); may be null indicating\n the cause is non-existent or unknown.\n ",directive
"@since 1.6\n",non-directive
" Gets the base URL. ",non-directive
"This is the URL of the directory which contains the applet.\n\n ",non-directive
"@return  the base {@link java.net.URL} of\n          the directory which contains the applet.\n ",non-directive
"@see     java.applet.AppletStub#getDocumentBase()\n",non-directive
" Creates an audio clip.\n\n ",non-directive
"@param   url   an absolute URL giving the location of the audio clip.\n ",non-directive
"@return  the audio clip at the specified URL.\n",non-directive
" Finds all the keys of the streams in this applet context.\n ",non-directive
"<p>\n For security reasons, mapping of streams and keys exists for each \n codebase. ",directive
"In other words, applet from one codebase cannot access \n the streams created by an applet from a different codebase\n <p>\n ",directive
"@return  an Iterator of all the names of the streams in this applet \n          context.\n ",non-directive
"@since 1.4\n",non-directive
" Called by the browser or applet viewer to inform\n this applet that it has been loaded into the system. ",non-directive
"It is always\n called before the first time that the <code>start</code> method is\n called.\n ",directive
"<p>\n A subclass of <code>Applet</code> should override this method if\n it has initialization to perform. ",directive
"For example, an applet with\n threads would use the <code>init</code> method to create the\n threads and the <code>destroy</code> method to kill them.\n ",non-directive
"<p>\n The implementation of this method provided by the\n <code>Applet</code> class does nothing.\n\n ",non-directive
"@see     java.applet.Applet#destroy()\n ",non-directive
"@see     java.applet.Applet#start()\n ",non-directive
"@see     java.applet.Applet#stop()\n",non-directive
" Compares the host components of two URLs.\n ",non-directive
"@param u1 the URL of the first host to compare \n ",non-directive
"@param u2 the URL of the second host to compare \n ",non-directive
"@return	<tt>true</tt> if and only if they \n are equal, <tt>false</tt> otherwise.\n ",non-directive
"@since 1.3\n",non-directive
" Loads filename map (a mimetable) from a data file. ",non-directive
"It will\n first try to load the user-specific table, defined\n by &quot;content.types.user.table&quot; property. ",non-directive
"If that fails,\n it tries to load the default built-in table at \n lib/content-types.properties under java home.\n\n ",non-directive
"@return the FileNameMap\n ",non-directive
"@since 1.2\n ",non-directive
"@see #setFileNameMap(java.net.FileNameMap)\n",non-directive
" Returns setting for read timeout. ",non-directive
"0 return implies that the\n option is disabled (i.e., timeout of infinity).\n\n ",directive
"@return an <code>int</code> that indicates the read timeout\n         value in milliseconds\n\n ",non-directive
"@see #setReadTimeout(int)\n ",non-directive
"@see InputStream#read()\n ",non-directive
"@since 1.5\n",non-directive
" Returns the value of this <code>URLConnection</code>'s\n <code>doOutput</code> flag.\n\n ",non-directive
"@return  the value of this <code>URLConnection</code>'s\n          <code>doOutput</code> flag.\n ",non-directive
"@see     #setDoOutput(boolean)\n",non-directive
" Sets the default value of the <code>useCaches</code> field to the \n specified value. \n\n ",non-directive
"@param   defaultusecaches   the new value.\n ",non-directive
"@see     #getDefaultUseCaches()\n",non-directive
" Gets the path part of this <code>URL</code>.\n\n ",non-directive
"@return  the path part of this <code>URL</code>, or an\n empty string if one does not exist\n ",non-directive
"@since 1.3\n",non-directive
" Gets the host name of this <code>URL</code>, if applicable.\n ",non-directive
"The format of the host conforms to RFC 2732, i.e. ",non-directive
"for a\n literal IPv6 address, this method will return the IPv6 address\n enclosed in square brackets (<tt>'['</tt> and <tt>']'</tt>).\n\n ",non-directive
"@return  the host name of this <code>URL</code>.\n",non-directive
" Normalizes this URI's path.\n\n ",non-directive
"<p> If this URI is opaque, or if its path is already in normal form,\n then this URI is returned.  ",non-directive
"Otherwise a new URI is constructed that is\n identical to this URI except that its path is computed by normalizing\n this URI's path in a manner consistent with <a\n href=\"http://www.ietf.org/rfc/rfc2396.txt\">RFC&nbsp;2396</a>,\n section&nbsp;5.2, step&nbsp;6, sub-steps&nbsp;c through&nbsp;f; that is:\n </p>\n\n \n\n   ",directive
"-- <p> All <tt>\".\"</tt> segments are removed. ",non-directive
"</p>\n\n   ",non-directive
"-- <p> If a <tt>\"..\"</tt> segment is preceded by a non-<tt>\"..\"</tt>\n   segment then both of these segments are removed.  ",non-directive
"This step is\n   repeated until it is no longer applicable. ",non-directive
"</p>\n\n   ",non-directive
"-- <p> If the path is relative, and if its first segment contains a\n   colon character (<tt>':'</tt>), then a <tt>\".\"</tt> segment is\n   prepended.  ",non-directive
"This prevents a relative URI with a path such as\n   <tt>\"a:b/c/d\"</tt> from later being re-parsed as an opaque URI with a\n   scheme of <tt>\"a\"</tt> and a scheme-specific part of <tt>\"b/c/d\"</tt>.\n   ",non-directive
"<b><i>(Deviation from RFC&nbsp;2396)</i></b> </p>\n\n \n\n ",directive
"<p> A normalized path will begin with one or more <tt>\"..\"</tt> segments\n if there were insufficient non-<tt>\"..\"</tt> segments preceding them to\n allow their removal.  ",non-directive
"A normalized path will begin with a <tt>\".\"</tt>\n segment if one was inserted by step 3 above.  ",non-directive
"Otherwise, a normalized\n path will not contain any <tt>\".\"</tt> or <tt>\"..\"</tt> segments. ",non-directive
"</p>\n\n ",non-directive
"@return  A URI equivalent to this URI,\n          but whose path is in normal form\n",non-directive
" Tells whether or not this URI is opaque.\n\n ",non-directive
"<p> A URI is opaque if, and only if, it is absolute and its\n scheme-specific part does not begin with a slash character ('/').\n ",directive
"An opaque URI has a scheme, a scheme-specific part, and possibly\n a fragment; all other components are undefined. ",directive
"</p>\n\n ",non-directive
"@return  <tt>true</tt> if, and only if, this URI is opaque\n",non-directive
" Returns the content of this URI as a US-ASCII string.\n\n ",non-directive
"<p> If this URI does not contain any characters in the <i>other</i>\n category then an invocation of this method will return the same value as\n an invocation of the {@link #toString() toString} method.  ",directive
"Otherwise\n this method works as if by invoking that method and then <a\n href=\"#encode\">encoding</a> the result.  ",directive
"</p>\n\n ",non-directive
"@return  The string form of this URI, encoded as needed\n          so that it only contains characters in the US-ASCII\n          charset\n",non-directive
" Connects this socket to the specified port on the named host. \n\n ",non-directive
"@param      host   the name of the remote host.\n ",non-directive
"@param      port   the port number.\n ",non-directive
" Places the input stream for this socket at \"end of stream\".\n ",non-directive
"Any data sent to this socket is acknowledged and then\n silently discarded.\n\n ",directive
"If you read from a socket input stream after invoking \n shutdownInput() on the socket, the stream will return EOF.\n\n ",directive
"@see java.net.Socket#shutdownOutput()\n ",non-directive
"@see java.net.Socket#close()\n ",non-directive
"@see java.net.Socket#setSoLinger(boolean, int)\n ",non-directive
"@since 1.3\n",non-directive
" Returns the unique {@link java.nio.channels.SocketChannel SocketChannel}\n object associated with this socket, if any.\n\n ",non-directive
"<p> A socket will have a channel if, and only if, the channel itself was\n created via the {@link java.nio.channels.SocketChannel#open\n SocketChannel.open} or {@link\n java.nio.channels.ServerSocketChannel#accept ServerSocketChannel.accept}\n methods.\n\n ",directive
"@return  the socket channel associated with this socket,\n          or <tt>null</tt> if this socket was not created\n          for a channel\n\n ",directive
"@since 1.4\n @spec JSR-51\n",non-directive
" Returns an output stream for this socket.\n\n ",non-directive
"<p> If this socket has an associated channel then the resulting output\n stream delegates all of its operations to the channel.  ",directive
"If the channel\n is in non-blocking mode then the output stream's <tt>write</tt>\n operations will throw an {@link\n java.nio.channels.IllegalBlockingModeException}.\n\n ",directive
"<p> Closing the returned {@link java.io.OutputStream OutputStream}\n will close the associated socket.\n\n ",directive
"@return     an output stream for writing bytes to this socket.\n ",non-directive
"@revised 1.4\n @spec JSR-51\n",non-directive
" Enable/disable TCP_NODELAY (disable/enable Nagle's algorithm).\n\n ",non-directive
"@param on <code>true</code> to enable TCP_NODELAY, \n <code>false</code> to disable.\n\n ",non-directive
"@since   JDK1.1\n\n ",non-directive
"@see #getTcpNoDelay()\n",non-directive
" Returns setting for SO_LINGER. ",non-directive
"-1 returns implies that the\n option is disabled.\n\n ",directive
"The setting only affects socket close.\n\n ",directive
"@return the setting for SO_LINGER.\n ",non-directive
"@since   JDK1.1\n ",non-directive
"@see #setSoLinger(boolean, int)\n",non-directive
" Sets the client socket implementation factory for the\n application. ",non-directive
"The factory can be specified only once.\n ",directive
"<p>\n When an application creates a new client socket, the socket\n implementation factory's <code>createSocketImpl</code> method is\n called to create the actual socket implementation.\n ",directive
"<p>\n Passing <code>null</code> to the method is a no-op unless the factory\n was already set.\n ",directive
"<p>If there is a security manager, this method first calls\n the security manager's <code>checkSetFactory</code> method \n to ensure the operation is allowed. \n ",directive
"This could result in a SecurityException.\n\n ",directive
"@param      fac   the desired factory.\n ",non-directive
"@see        java.net.SocketImplFactory#createSocketImpl()\n ",non-directive
"@see        SecurityManager#checkSetFactory\n",non-directive
" Get an Enumeration with all the subinterfaces (also known as virtual\n interfaces) attached to this network interface.\n ",non-directive
"<p>\n For instance eth0:1 will be a subinterface to eth0.\n\n ",non-directive
"@return an Enumeration object with all of the subinterfaces\n of this network interface\n ",non-directive
"@since 1.6\n",non-directive
" Create a multicast socket.\n \n",non-directive
" <p>If there is a security manager, \n its <code>checkListen</code> method is first called\n with 0 as its argument to ensure the operation is allowed. \n ",directive
"This could result in a SecurityException.\n ",directive
"<p>\n When the socket is created the \n {@link DatagramSocket#setReuseAddress(boolean)} method is \n called to enable the SO_REUSEADDR socket option. \n\n ",directive
"@see SecurityManager#checkListen\n ",non-directive
"@see java.net.DatagramSocket#setReuseAddress(boolean) \n",non-directive
" Creates a socket address where the IP address is the wildcard address\n and the port number a specified value.\n ",non-directive
"<p>\n A valid port value is between 0 and 65535.\n ",directive
"A port number of <code>zero</code> will let the system pick up an\n ephemeral port in a <code>bind</code> operation.\n ",directive
"<p>\n ",non-directive
"@param	port	The port number\n ",non-directive
" Utility routine to check if the multicast address has node scope.\n\n ",non-directive
"@return a <code>boolean</code> indicating if the address has \n         is a multicast address of node-local scope, false if it is not \n         of node-local scope or it is not a multicast address\n ",non-directive
"@since 1.4\n",non-directive
" Create an Inet6Address in the exact manner of {@link InetAddress#getByAddress(String,byte[])}\n except that the IPv6 scope_id is set to the given numeric value.\n ",non-directive
"The scope_id is not checked to determine if it corresponds to any interface on the system.\n ",directive
"See <a href=\"Inet6Address.html#scoped\">here</a> for a description of IPv6\n scoped addresses.\n\n ",directive
"@param host the specified host\n ",non-directive
"@param addr the raw IP address in network byte order\n ",non-directive
"@param scope_id the numeric scope_id for the address.\n ",non-directive
"@return  an Inet6Address object created from the raw IP address.\n ",non-directive
"@since 1.5\n",non-directive
" Utility routine to check if the multicast address has link scope.\n\n ",non-directive
"@return a <code>boolean</code> indicating if the address has \n         is a multicast address of link-local scope, false if it is not \n         of link-local scope or it is not a multicast address\n ",non-directive
"@since 1.4\n",non-directive
" Utility routine to check if the multicast address has node scope.\n\n ",non-directive
"@return a <code>boolean</code> indicating if the address has \n         is a multicast address of node-local scope, false if it is not \n         of node-local scope or it is not a multicast address\n ",non-directive
"@since 1.4\n",non-directive
" Returns the raw IP address of this <code>InetAddress</code>\n object. ",non-directive
"The result is in network byte order: the highest order\n byte of the address is in <code>getAddress()[0]</code>.\n\n ",directive
"@return  the raw IP address of this object.\n",non-directive
" Compares this object against the specified object.\n ",non-directive
"The result is <code>true</code> if and only if the argument is\n not <code>null</code> and it represents the same IP address as\n this object.\n ",non-directive
"<p>\n Two instances of <code>InetAddress</code> represent the same IP\n address if the length of the byte arrays returned by\n <code>getAddress</code> is the same for both, and each of the\n array components is the same for the byte arrays.\n\n ",non-directive
"@param   obj   the object to compare against.\n ",non-directive
"@return  <code>true</code> if the objects are the same;\n          <code>false</code> otherwise.\n ",non-directive
"@see     java.net.InetAddress#getAddress()\n",non-directive
" Gets the HTTP response message, if any, returned along with the\n response code from a server.  ",non-directive
"From responses like:\n <PRE>\n HTTP/1.0 200 OK\n HTTP/1.0 404 Not Found\n </PRE>\n Extracts the Strings \"OK\" and \"Not Found\" respectively.\n ",non-directive
"Returns null if none could be discerned from the responses \n (the result was not valid HTTP).\n ",directive
"@return the HTTP response message, or <code>null</code>\n",directive
" Set the TTL (time-to-live) option.\n ",non-directive
"@param ttl an <tt>int</tt> specifying the time-to-live value\n ",non-directive
"@see #getTimeToLive()\n",non-directive
" Gets traffic class or type-of-service in the IP datagram \n header for packets sent from this DatagramSocket.\n ",non-directive
"<p>\n As the underlying network implementation may ignore the\n traffic class or type-of-service set using {@link #setTrafficClass(int)}\n this method may return a different value than was previously\n set using the {@link #setTrafficClass(int)} method on this \n DatagramSocket.\n\n ",directive
"@return the traffic class or type-of-service already set\n ",non-directive
"@since 1.4\n ",non-directive
"@see #setTrafficClass(int)\n",non-directive
" Constructs a datagram socket and binds it to the specified port\n on the local host machine.  ",non-directive
"The socket will be bound to the wildcard\n address, an IP address chosen by the kernel.\n \n",directive
" <p>If there is a security manager, \n its <code>checkListen</code> method is first called\n with the <code>port</code> argument\n as its argument to ensure the operation is allowed. \n ",directive
"This could result in a SecurityException.\n\n ",directive
"@param      port port to use.\n ",non-directive
"@see SecurityManager#checkListen\n",non-directive
" Returns the offset of the data to be sent or the offset of the\n data received.\n\n ",non-directive
"@return  the offset of the data to be sent or the offset of the\n          data received.\n\n ",non-directive
"@since 1.2\n",non-directive
" Sets the port number on the remote host to which this datagram\n is being sent.\n ",non-directive
"@param iport the port number\n ",non-directive
"@since   JDK1.1\n ",non-directive
"@see #getPort()\n",non-directive
" Remove a cookie from store.\n\n ",non-directive
"@param uri       the uri this cookie associated with.\n                  ",non-directive
"if <tt>null</tt>, the cookie to be removed is not associated\n                  with an URI when added; if not <tt>null</tt>, the cookie\n                  to be removed is associated with the given URI when added.\n ",directive
"@param cookie    the cookie to remove\n\n ",non-directive
"@return          <tt>true</tt> if this store contained the specified cookie\n\n ",non-directive
" Gets the <code>hostname</code> of the\n site or proxy requesting authentication, or <code>null</code>\n if not available.\n \n",directive
"@return the hostname of the connection requiring authentication, or null\n		if it's not available.\n ",directive
"@since 1.4\n",non-directive
" Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n ",non-directive
"<p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key==null ? k==null :\n key.equals(k))}, then this method returns {@code v}; otherwise\n it returns {@code null}.  ",directive
"(There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <i>necessarily</i>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n ",directive
"The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.\n\n ",directive
"@see #put(Object, Object)\n",non-directive
" Returns <tt>true</tt> if this map maps one or more keys to the\n specified value.\n\n ",non-directive
"@param value value whose presence in this map is to be tested\n ",non-directive
"@return <tt>true</tt> if this map maps one or more keys to the\n         specified value\n",non-directive
" Constructs a new <tt>WeakHashMap</tt> with the same mappings as the\n specified map.  ",non-directive
"The <tt>WeakHashMap</tt> is created with the default\n load factor (0.75) and an initial capacity sufficient to hold the\n mappings in the specified map.\n\n ",directive
"@param   m the map whose mappings are to be placed in this map\n ",non-directive
"@since	1.3\n",non-directive
" Returns {@code true} if this vector contains the specified element.\n ",non-directive
"More formally, returns {@code true} if and only if this vector\n contains at least one element {@code e} such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n\n ",non-directive
"@param o element whose presence in this vector is to be tested\n ",non-directive
"@return {@code true} if this vector contains the specified element\n",non-directive
" Adds the specified component to the end of this vector,\n increasing its size by one. ",non-directive
"The capacity of this vector is\n increased if its size becomes greater than its capacity.\n\n ",non-directive
"<p>This method is identical in functionality to the\n {@link #add(Object) add(E)}\n method (which is part of the {@link List} interface).\n\n ",directive
"@param   obj   the component to be added\n",non-directive
" Removes the first occurrence of the specified element in this Vector\n If the Vector does not contain the element, it is unchanged.  ",non-directive
"More\n formally, removes the element with the lowest index i such that\n {@code (o==null ? get(i)==null : o.equals(get(i)))} (if such\n an element exists).\n\n ",non-directive
"@param o element to be removed from this Vector, if present\n ",non-directive
"@return true if the Vector contained the specified element\n ",non-directive
"@since 1.2\n",non-directive
" Gets the time zone offset, for current date, modified in case of\n daylight savings. ",non-directive
"This is the offset to add to UTC to get local time.\n ",directive
"<p>\n This method returns a historically correct offset if an\n underlying <code>TimeZone</code> implementation subclass\n supports historical Daylight Saving Time schedule and GMT\n offset changes.\n\n ",directive
"@param era the era of the given date.\n ",non-directive
"@param year the year in the given date.\n ",non-directive
"@param month the month in the given date.\n ",non-directive
"Month is 0-based. ",directive
"e.g., 0 for January.\n ",directive
"@param day the day-in-month of the given date.\n ",non-directive
"@param dayOfWeek the day-of-week of the given date.\n ",non-directive
"@param milliseconds the milliseconds in day in <em>standard</em>\n local time.\n\n ",non-directive
"@return the offset in milliseconds to add to GMT to get local time.\n\n ",non-directive
"@see Calendar#ZONE_OFFSET\n ",non-directive
"@see Calendar#DST_OFFSET\n",non-directive
" Tests if there are more tokens available from this tokenizer's string. \n ",non-directive
"If this method returns <tt>true</tt>, then a subsequent call to \n <tt>nextToken</tt> with no argument will successfully return a token.\n\n ",directive
"@return  <code>true</code> if and only if there is at least one token \n          in the string after the current position; <code>false</code> \n          otherwise.\n",non-directive
" Sets the daylight saving time start rule. ",non-directive
"For example, if daylight saving\n time starts on the first Sunday in April at 2 am in local wall clock\n time, you can set the start rule by calling:\n <pre><code>setStartRule(Calendar.APRIL, 1, Calendar.SUNDAY, 2*60*60*1000);</code></pre>\n\n ",directive
"@param startMonth      The daylight saving time starting month. ",non-directive
"Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. ",directive
"e.g., 0 for January).\n ",directive
"@param startDay        The day of the month on which the daylight saving time starts.\n                        ",non-directive
"See the class description for the special cases of this parameter.\n ",directive
"@param startDayOfWeek  The daylight saving time starting day-of-week.\n                        ",non-directive
"See the class description for the special cases of this parameter.\n ",directive
"@param startTime       The daylight saving time starting time in local wall clock\n                        time, which is local standard time in this case.\n ",non-directive
" Sets the daylight saving time end rule. ",non-directive
"For example, if daylight saving time\n ends on the last Sunday in October at 2 am in wall clock time,\n you can set the end rule by calling:\n <code>setEndRule(Calendar.OCTOBER, -1, Calendar.SUNDAY, 2*60*60*1000);</code>\n\n ",directive
"@param endMonth        The daylight saving time ending month. ",non-directive
"Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. ",directive
"e.g., 9 for October).\n ",directive
"@param endDay          The day of the month on which the daylight saving time ends.\n                        ",non-directive
"See the class description for the special cases of this parameter.\n ",directive
"@param endDayOfWeek    The daylight saving time ending day-of-week.\n                        ",non-directive
"See the class description for the special cases of this parameter.\n ",directive
"@param endTime         The daylight saving ending time in local wall clock time,\n                        (in milliseconds within the day) which is local daylight\n                        time in this case.\n ",non-directive
" Constructs a SimpleTimeZone with the given base time zone offset from\n GMT, time zone ID, and rules for starting and ending the daylight\n time.\n ",non-directive
"Both <code>startTime</code> and <code>endTime</code> are assumed to be\n represented in the wall clock time. ",directive
"This constructor is equivalent to:\n <pre><code>\n     SimpleTimeZone(rawOffset,\n                    ID,\n                    startMonth,\n                    startDay,\n                    startDayOfWeek,\n                    startTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    endMonth,\n                    endDay,\n                    endDayOfWeek,\n                    endTime,\n                    SimpleTimeZone.{@link #WALL_TIME},\n                    dstSavings)\n </code></pre>\n\n ",directive
"@param rawOffset       The given base time zone offset from GMT.\n ",non-directive
"@param ID              The time zone ID which is given to this object.\n ",non-directive
"@param startMonth      The daylight saving time starting month. ",non-directive
"Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. ",directive
"e.g., 0 for January).\n ",directive
"@param startDay        The day of the month on which the daylight saving time starts.\n                        ",non-directive
"See the class description for the special cases of this parameter.\n ",directive
"@param startDayOfWeek  The daylight saving time starting day-of-week.\n                        ",non-directive
"See the class description for the special cases of this parameter.\n ",directive
"@param startTime       The daylight saving time starting time in local wall clock\n                        time, which is local standard time in this case.\n ",non-directive
"@param endMonth        The daylight saving time ending month. ",non-directive
"Month is\n                        a {@link Calendar#MONTH MONTH} field\n                        value (0-based. ",directive
"e.g., 9 for October).\n ",directive
"@param endDay          The day of the month on which the daylight saving time ends.\n                        ",non-directive
"See the class description for the special cases of this parameter.\n ",directive
"@param endDayOfWeek    The daylight saving time ending day-of-week.\n                        ",non-directive
"See the class description for the special cases of this parameter.\n ",directive
"@param endTime         The daylight saving ending time in local wall clock time,\n                        which is local daylight time in this case.\n ",non-directive
"@param dstSavings      The amount of time in milliseconds saved during\n                        daylight saving time.\n ",non-directive
"@since 1.2\n",non-directive
" Returns the number of elements in this set (its cardinality).  ",non-directive
"If this\n set contains more than <tt>Integer.MAX_VALUE</tt> elements, returns\n <tt>Integer.MAX_VALUE</tt>.\n\n ",directive
"@return the number of elements in this set (its cardinality)\n",non-directive
" Clear this loader's provider cache so that all providers will be\n reloaded.\n\n ",non-directive
"<p> After invoking this method, subsequent invocations of the {@link\n #iterator() iterator} method will lazily look up and instantiate\n providers from scratch, just as is done by a newly-created loader.\n\n ",directive
"<p> This method is intended for use in situations in which new providers\n can be installed into a running Java virtual machine.\n",directive
" Returns true if the next token matches the pattern constructed from the \n specified string. ",non-directive
"The scanner does not advance past any input.\n\n ",directive
"<p> An invocation of this method of the form <tt>hasNext(pattern)</tt>\n behaves in exactly the same way as the invocation \n <tt>hasNext(Pattern.compile(pattern))</tt>.\n\n ",directive
"@param pattern a string specifying the pattern to scan\n ",non-directive
"@return true if and only if this scanner has another token matching\n         the specified pattern\n ",non-directive
" Returns the next token if it matches the pattern constructed from the \n specified string.  ",non-directive
"If the match is successful, the scanner advances \n past the input that matched the pattern.\n\n ",non-directive
"<p> An invocation of this method of the form <tt>next(pattern)</tt>\n behaves in exactly the same way as the invocation \n <tt>next(Pattern.compile(pattern))</tt>.\n\n ",directive
"@param pattern a string specifying the pattern to scan\n ",non-directive
"@return the next token\n ",non-directive
" Skips input that matches a pattern constructed from the specified\n string.\n\n ",non-directive
"<p> An invocation of this method of the form <tt>skip(pattern)</tt>\n behaves in exactly the same way as the invocation \n <tt>skip(Pattern.compile(pattern))</tt>.\n\n ",directive
"@param pattern a string specifying the pattern to skip over\n ",non-directive
"@return this scanner\n ",non-directive
" Returns true if the next token in this scanner's input can be\n interpreted as a boolean value using a case insensitive pattern \n created from the string \"true|false\".  ",non-directive
"The scanner does not\n advance past the input that matched.\n\n ",directive
"@return true if and only if this scanner's next token is a valid\n         boolean value\n ",non-directive
" Returns true if the next token in this scanner's input can be\n interpreted as an int value in the specified radix using the \n {@link #nextInt} method. ",non-directive
"The scanner does not advance past any input.\n\n ",non-directive
"@param radix the radix used to interpret the token as an int value\n ",non-directive
"@return true if and only if this scanner's next token is a valid\n         int value\n ",non-directive
" Scans the next token of the input as an <tt>int</tt>.\n ",non-directive
"This method will throw <code>InputMismatchException</code>\n if the next token cannot be translated into a valid int value as\n described below. ",directive
"If the translation is successful, the scanner advances\n past the input that matched.\n\n ",non-directive
"<p> If the next token matches the <a\n href=\"#Integer-regex\"><i>Integer</i></a> regular expression defined \n above then the token is converted into an <tt>int</tt> value as if by\n removing all locale specific prefixes, group separators, and locale\n specific suffixes, then mapping non-ASCII digits into ASCII\n digits via {@link Character#digit Character.digit}, prepending a\n negative sign (-) if the locale specific negative prefixes and suffixes\n were present, and passing the resulting string to\n {@link Integer#parseInt(String, int) Integer.parseInt} with the\n specified radix.\n\n ",directive
"@param radix the radix used to interpret the token as an int value\n ",non-directive
"@return the <tt>int</tt> scanned from the input\n ",non-directive
" Returns true if the next token in this scanner's input can be\n interpreted as a long value in the default radix using the \n {@link #nextLong} method. ",non-directive
"The scanner does not advance past any input.\n\n ",directive
"@return true if and only if this scanner's next token is a valid\n         long value\n ",non-directive
" Gets a resource bundle using the specified base name, the default locale,\n and the caller's class loader. ",non-directive
"Calling this method is equivalent to calling\n <blockquote>\n <code>getBundle(baseName, Locale.getDefault(), this.getClass().getClassLoader())</code>,\n </blockquote>\n except that <code>getClassLoader()</code> is run with the security\n privileges of <code>ResourceBundle</code>.\n ",directive
"See {@link #getBundle(String, Locale, ClassLoader) getBundle}\n for a complete description of the search and instantiation strategy.\n\n ",directive
"@param baseName the base name of the resource bundle, a fully qualified class name\n ",non-directive
"@return a resource bundle for the given base name and the default locale\n",non-directive
" Gets an object for the given key from this resource bundle.\n ",non-directive
"Returns null if this resource bundle does not contain an\n object for the given key.\n\n ",directive
"@param key the key for the desired object\n ",non-directive
"@return the object for the given key, or null\n",directive
" Returns a <code>Set</code> of the keys contained\n <em>only</em> in this <code>ResourceBundle</code>.\n\n ",non-directive
"@return a <code>Set</code> of the keys contained only in this\n         <code>ResourceBundle</code>\n ",non-directive
"@since 1.6\n ",non-directive
"@see #keySet()\n",non-directive
" Calls the <tt>Hashtable</tt> method <code>put</code>. ",non-directive
"Provided for\n parallelism with the <tt>getProperty</tt> method. ",directive
"Enforces use of\n strings for property keys and values. ",directive
"The value returned is the\n result of the <tt>Hashtable</tt> call to <code>put</code>.\n\n ",non-directive
"@param key the key to be placed into this property list.\n ",non-directive
"@param value the value corresponding to <tt>key</tt>.\n ",non-directive
"@return     the previous value of the specified key in this property\n             list, or <code>null</code> if it did not have one.\n ",directive
"@see #getProperty\n ",non-directive
"@since    1.2\n",non-directive
" Reads a property list (key and element pairs) from the input\n byte stream. ",non-directive
"The input stream is in a simple line-oriented\n format as specified in\n {@link #load(java.io.Reader) load(Reader)} and is assumed to use\n the ISO 8859-1 character encoding; that is each byte is one Latin1\n character. ",directive
"Characters not in Latin1, and certain special characters,\n are represented in keys and elements using\n <a href=\"http://java.sun.com/docs/books/jls/third_edition/html/lexical.html#3.3\">Unicode escapes</a>.\n ",directive
"<p>\n The specified stream remains open after this method returns.\n\n ",directive
"@param      inStream   the input stream.\n ",non-directive
"@since 1.2\n",non-directive
" Calls the <code>store(OutputStream out, String comments)</code> method\n and suppresses IOExceptions that were thrown.\n\n ",non-directive
"@deprecated This method does not throw an IOException if an I/O error\n occurs while saving the property list.  ",directive
"The preferred way to save a\n properties list is via the <code>store(OutputStream out, \n String comments)</code> method or the \n <code>storeToXML(OutputStream os, String comment)</code> method.\n\n ",directive
"@param   out      an output stream.\n ",non-directive
"@param   comments   a description of the property list.\n ",non-directive
" Writes this property list (key and element pairs) in this\n <code>Properties</code> table to the output character stream in a \n format suitable for using the {@link #load(java.io.Reader) load(Reader)}\n method.\n ",non-directive
"<p>\n Properties from the defaults table of this <code>Properties</code>\n table (if any) are <i>not</i> written out by this method.\n ",directive
"<p>\n If the comments argument is not null, then an ASCII <code>#</code>\n character, the comments string, and a line separator are first written\n to the output stream. ",non-directive
"Thus, the <code>comments</code> can serve as an\n identifying comment. ",non-directive
"Any one of a line feed ('\n'), a carriage\n return ('\r'), or a carriage return followed immediately by a line feed\n in comments is replaced by a line separator generated by the <code>Writer</code>\n and if the next character in comments is not character <code>#</code> or \n character <code>!</code> then an ASCII <code>#</code> is written out \n after that line separator.\n ",directive
"<p>\n Next, a comment line is always written, consisting of an ASCII\n <code>#</code> character, the current date and time (as if produced\n by the <code>toString</code> method of <code>Date</code> for the\n current time), and a line separator as generated by the <code>Writer</code>.\n ",non-directive
"<p>\n Then every entry in this <code>Properties</code> table is\n written out, one per line. ",non-directive
"For each entry the key string is\n written, then an ASCII <code>=</code>, then the associated\n element string. ",non-directive
"For the key, all space characters are\n written with a preceding <code>\</code> character.  ",directive
"For the\n element, leading space characters, but not embedded or trailing\n space characters, are written with a preceding <code>\</code>\n character. ",directive
"The key and element characters <code>#</code>,\n <code>!</code>, <code>=</code>, and <code>:</code> are written\n with a preceding backslash to ensure that they are properly loaded.\n ",directive
"<p>\n After the entries have been written, the output stream is flushed.  \n ",non-directive
"The output stream remains open after this method returns.\n ",directive
"<p>\n\n ",non-directive
"@param   writer      an output character stream writer.\n ",non-directive
"@param   comments   a description of the property list.\n ",non-directive
"@since 1.6\n",non-directive
" Returns a set of keys in this property list where\n the key and its corresponding value are strings,\n including distinct keys in the default property list if a key\n of the same name has not already been found from the main\n properties list.  ",non-directive
"Properties whose key or value is not \n of type <tt>String</tt> are omitted.\n ",directive
"<p>\n The returned set is not backed by the <tt>Properties</tt> object.\n ",directive
"Changes to this <tt>Properties</tt> are not reflected in the set,\n or vice versa.\n\n ",directive
"@return  a set of keys in this property list where\n          the key and its corresponding value are strings,\n          including the keys in the default property list.\n ",non-directive
"@see     java.util.Properties#defaults\n ",non-directive
"@since   1.6\n",non-directive
" Prints this property list out to the specified output stream.\n ",non-directive
"This method is useful for debugging.\n\n ",directive
"@param   out   an output stream.\n ",non-directive
"@since   JDK1.1\n",non-directive
" Tests if this object has changed. \n\n ",non-directive
"@return  <code>true</code> if and only if the <code>setChanged</code> \n          method has been called more recently than the \n          <code>clearChanged</code> method on this object; \n          <code>false</code> otherwise.\n ",non-directive
"@see     java.util.Observable#clearChanged()\n ",non-directive
"@see     java.util.Observable#setChanged()\n",non-directive
" Returns a reverse order view of the mappings contained in this map.\n ",non-directive
"The descending map is backed by this map, so changes to the map are\n reflected in the descending map, and vice-versa.  ",directive
"If either map is\n modified while an iteration over a collection view of either map\n is in progress (except through the iterator's own {@code remove}\n operation), the results of the iteration are undefined.\n\n ",directive
"<p>The returned map has an ordering equivalent to\n <tt>{@link Collections#reverseOrder(Comparator) Collections.reverseOrder}(comparator())</tt>.\n ",non-directive
"The expression {@code m.descendingMap().descendingMap()} returns a\n view of {@code m} essentially equivalent to {@code m}.\n\n ",non-directive
"@return a reverse order view of this map\n",non-directive
" Returns a {@link Collection} view of the values contained in this map.\n ",non-directive
"The collection is backed by the map, so changes to the map are\n reflected in the collection, and vice-versa.  ",directive
"If the map is\n modified while an iteration over the collection is in progress\n (except through the iterator's own <tt>remove</tt> operation),\n the results of the iteration are undefined.  ",directive
"The collection\n supports element removal, which removes the corresponding\n mapping from the map, via the <tt>Iterator.remove</tt>,\n <tt>Collection.remove</tt>, <tt>removeAll</tt>,\n <tt>retainAll</tt> and <tt>clear</tt> operations.  ",non-directive
"It does not\n support the <tt>add</tt> or <tt>addAll</tt> operations.\n\n ",directive
"@return a collection view of the values contained in this map\n",non-directive
" Gets the current value of the default locale for this instance\n of the Java Virtual Machine.\n ",non-directive
"<p>\n The Java Virtual Machine sets the default locale during startup\n based on the host environment. ",non-directive
"It is used by many locale-sensitive\n methods if no locale is explicitly specified.\n ",directive
"It can be changed using the\n {@link #setDefault(java.util.Locale) setDefault} method.\n\n ",directive
"@return the default locale for this instance of the Java Virtual Machine\n",non-directive
" Returns a name for the locale's country that is appropriate for display to the\n user.\n ",non-directive
"If possible, the name returned will be localized according to inLocale.\n ",non-directive
"For example, if the locale is fr_FR and inLocale\n is en_US, getDisplayCountry() will return \"France\"; if the locale is en_US and\n inLocale is fr_FR, getDisplayCountry() will return \"Etats-Unis\".\n ",non-directive
"If the name returned cannot be localized according to inLocale.\n ",directive
"(say, we don't have a Japanese name for Croatia),\n this function falls back on the English name, and finally\n on the ISO code as a last-resort value.  ",directive
"If the locale doesn't specify a country,\n this function returns the empty string.\n\n ",directive
" Returns a name for the locale that is appropriate for display to the\n user.  ",non-directive
"This will be the values returned by getDisplayLanguage(), getDisplayCountry(),\n and getDisplayVariant() assembled into a single string.  ",non-directive
"The display name will have\n one of the following forms:<p><blockquote>\n language (country, variant)<p>\n language (country)<p>\n language (variant)<p>\n country (variant)<p>\n language<p>\n country<p>\n variant<p></blockquote>\n depending on which fields are specified in the locale.  ",non-directive
"If the language, country,\n and variant fields are all empty, this function returns the empty string.\n\n ",non-directive
" Returns the element at the specified position in this list.\n\n ",non-directive
"@param index index of the element to return\n ",non-directive
"@return the element at the specified position in this list\n ",non-directive
" Retrieves, but does not remove, the head (first element) of this list.\n ",directive
"@return the head of this list, or <tt>null</tt> if this list is empty\n ",directive
"@since 1.5\n",non-directive
" Retrieves, but does not remove, the first element of this list,\n or returns <tt>null</tt> if this list is empty.\n\n ",directive
"@return the first element of this list, or <tt>null</tt>\n         if this list is empty\n ",directive
"@since 1.6\n",non-directive
" Constructs a new linked hash set with the same elements as the\n specified collection.  ",non-directive
"The linked hash set is created with an initial\n capacity sufficient to hold the elements in the specified collection\n and the default load factor (0.75).\n\n ",directive
"@param c  the collection whose elements are to be placed into\n           this set\n ",non-directive
" Removes the mapping for this key from this map if present.\n\n ",non-directive
"@param key key whose mapping is to be removed from the map\n ",non-directive
"@return the previous value associated with <tt>key</tt>, or\n         <tt>null</tt> if there was no mapping for <tt>key</tt>.\n         ",directive
"(A <tt>null</tt> return can also indicate that the map\n         previously associated <tt>null</tt> with <tt>key</tt>.)\n",directive
" Returns true if this hashtable maps one or more keys to this value.\n\n ",non-directive
"<p>Note that this method is identical in functionality to {@link\n #contains contains} (which predates the {@link Map} interface).\n\n ",directive
"@param value value whose presence in this hashtable is to be tested\n ",non-directive
"@return <tt>true</tt> if this map maps one or more keys to the\n         specified value\n ",non-directive
"@since 1.2\n",non-directive
" Tests if the specified object is a key in this hashtable.\n\n ",non-directive
"@param   key   possible key\n ",non-directive
"@return  <code>true</code> if and only if the specified object\n          is a key in this hashtable, as determined by the\n          <tt>equals</tt> method; <code>false</code> otherwise.\n ",directive
"@see     #contains(Object)\n",non-directive
" Removes the key (and its corresponding value) from this\n hashtable. ",non-directive
"This method does nothing if the key is not in the hashtable.\n\n ",directive
"@param   key   the key that needs to be removed\n ",non-directive
"@return  the value to which the key had been mapped in this hashtable,\n          or <code>null</code> if the key did not have a mapping\n ",directive
" Converts the time value (millisecond offset from the <a\n href=\"Calendar.html#Epoch\">Epoch</a>) to calendar field values.\n ",non-directive
"The time is <em>not</em>\n recomputed first; to recompute the time, then the fields, call the\n <code>complete</code> method.\n\n ",directive
"@see Calendar#complete\n",non-directive
" Constructs a new formatter with the specified locale.\n\n ",non-directive
"<p> The destination of the formatted output is a {@link StringBuilder}\n which may be retrieved by invoking {@link #out out()} and whose current\n content may be converted into a string by invoking {@link #toString\n toString()}.\n\n ",directive
"@param  l\n         The {@linkplain java.util.Locale locale} to apply during\n         formatting.  ",non-directive
"If <tt>l</tt> is <tt>null</tt> then no localization\n         is applied.\n",directive
" Formats the object using the provided {@link Formatter formatter}.\n\n ",non-directive
"@param  formatter\n         The {@link Formatter formatter}.  ",non-directive
"Implementing classes may call\n         {@link Formatter#out() formatter.out()} or {@link\n         Formatter#locale() formatter.locale()} to obtain the {@link\n         Appendable} or {@link Locale} used by this\n         <tt>formatter</tt> respectively. \n\n ",directive
"@param  flags\n         The flags modify the output format.  ",non-directive
"The value is interpreted as\n         a bitmask.  ",directive
"Any combination of the following flags may be set:\n         {@link FormattableFlags#LEFT_JUSTIFY}, {@link\n         FormattableFlags#UPPERCASE}, and {@link\n         FormattableFlags#ALTERNATE}.  ",directive
"If no flags are set, the default\n         formatting of the implementing class will apply.\n\n ",directive
"@param  width\n         The minimum number of characters to be written to the output.\n         ",non-directive
"If the length of the converted value is less than the\n         <tt>width</tt> then the output will be padded by\n         <tt>'&nbsp;&nbsp;'</tt> until the total number of characters\n         equals width.  ",directive
"The padding is at the beginning by default.  ",non-directive
"If\n         the {@link FormattableFlags#LEFT_JUSTIFY} flag is set then the\n         padding will be at the end.  ",non-directive
"If <tt>width</tt> is <tt>-1</tt>\n         then there is no minimum.\n\n ",non-directive
"@param  precision\n         The maximum number of characters to be written to the output.\n         ",non-directive
"The precision is applied before the width, thus the output will\n         be truncated to <tt>precision</tt> characters even if the\n         <tt>width</tt> is greater than the <tt>precision</tt>.  ",directive
"If\n         <tt>precision</tt> is <tt>-1</tt> then there is no explicit\n         limit on the number of characters.\n\n ",non-directive
"For specification of all\n          possible formatting errors, see the <a\n          href=\"../util/Formatter.html#detail\">Details</a> section of the\n          formatter class specification.\n",directive
" Returns the value to which the specified key is mapped,\n or {@code null} if this map contains no mapping for the key.\n\n ",directive
"<p>More formally, if this map contains a mapping from a key\n {@code k} to a value {@code v} such that {@code (key == k)},\n then this method returns {@code v}; otherwise it returns\n {@code null}.  ",directive
"(There can be at most one such mapping.)\n\n <p>A return value of {@code null} does not <i>necessarily</i>\n indicate that the map contains no mapping for the key; it's also\n possible that the map explicitly maps the key to {@code null}.\n ",directive
"The {@link #containsKey containsKey} operation may be used to\n distinguish these two cases.\n",directive
" Inserts the specified element at the front of this deque if it is\n possible to do so immediately without violating capacity restrictions.\n ",non-directive
"When using a capacity-restricted deque, it is generally preferable to\n use method {@link #offerFirst}.\n\n ",directive
"@param e the element to add\n ",non-directive
" Inserts the specified element at the front of this deque unless it would\n violate capacity restrictions.  ",non-directive
"When using a capacity-restricted deque,\n this method is generally preferable to the {@link #addFirst} method,\n which can fail to insert an element only by throwing an exception.\n\n ",directive
"@param e the element to add\n ",non-directive
"@return <tt>true</tt> if the element was added to this deque, else\n         <tt>false</tt>\n ",non-directive
" Sets the year of this <tt>Date</tt> object to be the specified \n value plus 1900. ",non-directive
"This <code>Date</code> object is modified so \n that it represents a point in time within the specified year, \n with the month, date, hour, minute, and second the same as \n before, as interpreted in the local time zone. ",non-directive
"(Of course, if \n the date was February 29, for example, and the year is set to a \n non-leap year, then the new date will be treated as if it were \n on March 1.)\n\n ",directive
"@param   year    the year value.\n ",non-directive
"@see     java.util.Calendar\n ",non-directive
"@deprecated As of JDK version 1.1,\n replaced by <code>Calendar.set(Calendar.YEAR, year + 1900)</code>.\n",directive
" Returns the offset, measured in minutes, for the local time zone \n relative to UTC that is appropriate for the time represented by \n this <code>Date</code> object. \n ",non-directive
"<p>\n For example, in Massachusetts, five time zones west of Greenwich:\n <blockquote><pre>\n new Date(96, 1, 14).getTimezoneOffset() returns 300</pre></blockquote>\n because on February 14, 1996, standard time (Eastern Standard Time) \n is in use, which is offset five hours from UTC; but:\n <blockquote><pre>\n new Date(96, 5, 1).getTimezoneOffset() returns 240</pre></blockquote>\n because on June 1, 1996, daylight saving time (Eastern Daylight Time) \n is in use, which is offset only four hours from UTC.<p>\n This method produces the same result as if it computed:\n <blockquote><pre>\n (this.getTime() - UTC(this.getYear(), \n                       this.getMonth(), \n                       this.getDate(),\n                       this.getHours(), \n                       this.getMinutes(), \n                       this.getSeconds())) / (60 * 1000)\n </pre></blockquote>\n\n ",directive
"@return  the time-zone offset, in minutes, for the current time zone.\n ",non-directive
"@see     java.util.Calendar#ZONE_OFFSET\n ",non-directive
"@see     java.util.Calendar#DST_OFFSET\n ",non-directive
"@see     java.util.TimeZone#getDefault\n ",non-directive
"@deprecated As of JDK version 1.1,\n replaced by <code>-(Calendar.get(Calendar.ZONE_OFFSET) +\n Calendar.get(Calendar.DST_OFFSET)) / (60 * 1000)</code>.\n",directive
" Gets the default number of fraction digits used with this currency.\n ",non-directive
"For example, the default number of fraction digits for the Euro is 2,\n while for the Japanese Yen it's 0.\n ",non-directive
"In the case of pseudo-currencies, such as IMF Special Drawing Rights,\n -1 is returned.\n\n ",directive
"@return the default number of fraction digits used with this currency\n",non-directive
" Returns an unmodifiable view of the specified collection.  ",non-directive
"This method\n allows modules to provide users with \"read-only\" access to internal\n collections.  ",directive
"Query operations on the returned collection \"read through\"\n to the specified collection, and attempts to modify the returned\n collection, whether direct or via its iterator, result in an\n <tt>UnsupportedOperationException</tt>.<p>\n\n The returned collection does <i>not</i> pass the hashCode and equals\n operations through to the backing collection, but relies on\n <tt>Object</tt>'s <tt>equals</tt> and <tt>hashCode</tt> methods.  ",directive
"This\n is necessary to preserve the contracts of these operations in the case\n that the backing collection is a set or a list.<p>\n\n The returned collection will be serializable if the specified collection\n is serializable.\n\n ",directive
"@param  c the collection for which an unmodifiable view is to be\n	       returned.\n ",non-directive
"@return an unmodifiable view of the specified collection.\n",non-directive
" Returns a dynamically typesafe view of the specified map.  ",non-directive
"Any attempt\n to insert a mapping whose key or value have the wrong type will result\n in an immediate <tt>ClassCastException</tt>.  ",non-directive
"Similarly, any attempt to\n modify the value currently associated with a key will result in an\n immediate <tt>ClassCastException</tt>, whether the modification is\n attempted directly through the map itself, or through a {@link\n Map.Entry} instance obtained from the map's {@link Map#entrySet()\n entry set} view.\n\n ",non-directive
"<p>Assuming a map contains no incorrectly typed keys or values\n prior to the time a dynamically typesafe view is generated, and\n that all subsequent access to the map takes place through the view\n (or one of its collection views), it is <i>guaranteed</i> that the\n map cannot contain an incorrectly typed key or value.\n\n ",directive
"<p>A discussion of the use of dynamically typesafe views may be\n found in the documentation for the {@link #checkedCollection checkedCollection}\n method.\n\n ",directive
"<p>The returned map will be serializable if the specified map is\n serializable.\n\n ",directive
"@param m the map for which a dynamically typesafe view is to be\n             returned\n ",non-directive
"@param keyType the type of key that <tt>m</tt> is permitted to hold\n ",non-directive
"@param valueType the type of value that <tt>m</tt> is permitted to hold\n ",non-directive
"@return a dynamically typesafe view of the specified map\n ",non-directive
"@since 1.5\n",non-directive
" Returns <tt>true</tt> if this collection contains the specified element.\n ",non-directive
"More formally, returns <tt>true</tt> if and only if this collection\n contains at least one element <tt>e</tt> such that\n <tt>(o==null&nbsp;?&nbsp;e==null&nbsp;:&nbsp;o.equals(e))</tt>.\n\n ",non-directive
"@param o element whose presence in this collection is to be tested\n ",non-directive
"@return <tt>true</tt> if this collection contains the specified\n         element\n ",non-directive
" Returns the index of the first bit that is set to <code>true</code>\n that occurs on or after the specified starting index. ",non-directive
"If no such\n bit exists then -1 is returned.\n\n ",directive
"To iterate over the <code>true</code> bits in a <code>BitSet</code>,\n use the following loop:\n\n <pre>\n for (int i = bs.nextSetBit(0); i >= 0; i = bs.nextSetBit(i+1)) {\n     // operate on index i here\n }</pre>\n\n ",directive
"@param   fromIndex the index to start checking from (inclusive).\n ",non-directive
"@return  the index of the next set bit.\n ",non-directive
"@since   1.4\n",non-directive
" Returns <tt>true</tt> if the two specified arrays of longs are\n <i>equal</i> to one another.  ",non-directive
"Two arrays are considered equal if both\n arrays contain the same number of elements, and all corresponding pairs\n of elements in the two arrays are equal.  ",non-directive
"In other words, two arrays\n are equal if they contain the same elements in the same order.  ",non-directive
"Also,\n two array references are considered equal if both are <tt>null</tt>.<p>\n\n ",non-directive
"@param a one array to be tested for equality\n ",non-directive
"@param a2 the other array to be tested for equality\n ",non-directive
"@return <tt>true</tt> if the two arrays are equal\n",non-directive
" Returns <tt>true</tt> if the two specified arrays of shorts are\n <i>equal</i> to one another.  ",non-directive
"Two arrays are considered equal if both\n arrays contain the same number of elements, and all corresponding pairs\n of elements in the two arrays are equal.  ",non-directive
"In other words, two arrays\n are equal if they contain the same elements in the same order.  ",non-directive
"Also,\n two array references are considered equal if both are <tt>null</tt>.<p>\n\n ",non-directive
"@param a one array to be tested for equality\n ",non-directive
"@param a2 the other array to be tested for equality\n ",non-directive
"@return <tt>true</tt> if the two arrays are equal\n",non-directive
" Returns <tt>true</tt> if the two specified arrays of bytes are\n <i>equal</i> to one another.  ",non-directive
"Two arrays are considered equal if both\n arrays contain the same number of elements, and all corresponding pairs\n of elements in the two arrays are equal.  ",non-directive
"In other words, two arrays\n are equal if they contain the same elements in the same order.  ",non-directive
"Also,\n two array references are considered equal if both are <tt>null</tt>.<p>\n\n ",non-directive
"@param a one array to be tested for equality\n ",non-directive
"@param a2 the other array to be tested for equality\n ",non-directive
"@return <tt>true</tt> if the two arrays are equal\n",non-directive
" Assigns the specified long value to each element of the specified\n range of the specified array of longs.  ",non-directive
"The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  ",directive
"(If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)\n\n ",non-directive
"@param a the array to be filled\n ",non-directive
"@param fromIndex the index of the first element (inclusive) to be\n        filled with the specified value\n ",directive
"@param toIndex the index of the last element (exclusive) to be\n        filled with the specified value\n ",directive
"@param val the value to be stored in all elements of the array\n ",non-directive
" Assigns the specified char value to each element of the specified\n range of the specified array of chars.  ",non-directive
"The range to be filled\n extends from index <tt>fromIndex</tt>, inclusive, to index\n <tt>toIndex</tt>, exclusive.  ",directive
"(If <tt>fromIndex==toIndex</tt>, the\n range to be filled is empty.)\n\n ",non-directive
"@param a the array to be filled\n ",non-directive
"@param fromIndex the index of the first element (inclusive) to be\n        filled with the specified value\n ",directive
"@param toIndex the index of the last element (exclusive) to be\n        filled with the specified value\n ",directive
"@param val the value to be stored in all elements of the array\n ",non-directive
" Assigns the specified boolean value to each element of the specified\n array of booleans.\n\n ",non-directive
"@param a the array to be filled\n ",non-directive
"@param val the value to be stored in all elements of the array\n",non-directive
" Copies the specified array, truncating or padding with nulls (if necessary)\n so the copy has the specified length.  ",non-directive
"For all indices that are\n valid in both the original array and the copy, the two arrays will\n contain identical values.  ",non-directive
"For any indices that are valid in the\n copy but not the original, the copy will contain <tt>null</tt>.\n ",directive
"Such indices will exist if and only if the specified length\n is greater than that of the original array.\n ",non-directive
"The resulting array is of exactly the same class as the original array.\n\n ",non-directive
"@param original the array to be copied\n ",non-directive
"@param newLength the length of the copy to be returned\n ",non-directive
"@return a copy of the original array, truncated or padded with nulls\n     to obtain the specified length\n ",non-directive
"@since 1.6\n",non-directive
" Returns a hash code based on the contents of the specified array.\n ",non-directive
"For any two <tt>byte</tt> arrays <tt>a</tt> and <tt>b</tt>\n such that <tt>Arrays.equals(a, b)</tt>, it is also the case that\n <tt>Arrays.hashCode(a) == Arrays.hashCode(b)</tt>.\n\n ",directive
"<p>The value returned by this method is the same value that would be\n obtained by invoking the {@link List#hashCode() <tt>hashCode</tt>}\n method on a {@link List} containing a sequence of {@link Byte}\n instances representing the elements of <tt>a</tt> in the same order.\n ",directive
"If <tt>a</tt> is <tt>null</tt>, this method returns 0.\n\n ",directive
"@param a the array whose hash value to compute\n ",non-directive
"@return a content-based hash code for <tt>a</tt>\n ",non-directive
"@since 1.5\n",non-directive
" Returns a string representation of the contents of the specified array.\n ",non-directive
"The string representation consists of a list of the array's elements,\n enclosed in square brackets (<tt>\"[]\"</tt>).  ",non-directive
"Adjacent elements are\n separated by the characters <tt>\", \"</tt> (a comma followed by a\n space).  ",non-directive
"Elements are converted to strings as by\n <tt>String.valueOf(long)</tt>.  ",non-directive
"Returns <tt>\"null\"</tt> if <tt>a</tt>\n is <tt>null</tt>.\n\n ",directive
"@param a the array whose string representation to return\n ",non-directive
"@return a string representation of <tt>a</tt>\n ",non-directive
"@since 1.5\n",non-directive
" Returns a string representation of the contents of the specified array.\n ",non-directive
"The string representation consists of a list of the array's elements,\n enclosed in square brackets (<tt>\"[]\"</tt>).  ",non-directive
"Adjacent elements\n are separated by the characters <tt>\", \"</tt> (a comma followed\n by a space).  ",non-directive
"Elements are converted to strings as by\n <tt>String.valueOf(byte)</tt>.  ",non-directive
"Returns <tt>\"null\"</tt> if\n <tt>a</tt> is <tt>null</tt>.\n\n ",directive
"@param a the array whose string representation to return\n ",non-directive
"@return a string representation of <tt>a</tt>\n ",non-directive
"@since 1.5\n",non-directive
" Removes the element at the specified position in this list (optional\n operation).  ",non-directive
"Shifts any subsequent elements to the left (subtracts one\n from their indices).  ",directive
"Returns the element that was removed from the\n list.\n\n ",non-directive
"<p>This implementation first gets a list iterator pointing to the\n indexed element (with <tt>listIterator(index)</tt>).  ",non-directive
"Then, it removes\n the element with <tt>ListIterator.remove</tt>.\n\n ",non-directive
"<p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the list iterator does not\n implement the <tt>remove</tt> operation.\n\n ",directive
" Inserts all of the elements in the specified collection into this\n list at the specified position (optional operation).  ",non-directive
"Shifts the\n element currently at that position (if any) and any subsequent\n elements to the right (increases their indices).  ",non-directive
"The new elements\n will appear in this list in the order that they are returned by the\n specified collection's iterator.  ",non-directive
"The behavior of this operation is\n undefined if the specified collection is modified while the\n operation is in progress.  ",directive
"(Note that this will occur if the specified\n collection is this list, and it's nonempty.)\n\n <p>This implementation gets an iterator over the specified collection and\n a list iterator over this list pointing to the indexed element (with\n <tt>listIterator(index)</tt>).  ",directive
"Then, it iterates over the specified\n collection, inserting the elements obtained from the iterator into this\n list, one at a time, using <tt>ListIterator.add</tt> followed by\n <tt>ListIterator.next</tt> (to skip over the added element).\n\n ",non-directive
"<p>Note that this implementation will throw an\n <tt>UnsupportedOperationException</tt> if the list iterator returned by\n the <tt>listIterator</tt> method does not implement the <tt>add</tt>\n operation.\n\n ",directive
" Return the header string for a set of XML formatted records.\n \n",non-directive
"@param   h  The target handler (can be null)\n ",non-directive
"@return  a valid XML string\n",non-directive
" Format and publish a <tt>LogRecord</tt>.\n ",non-directive
"<p>\n The <tt>StreamHandler</tt> first checks if there is an <tt>OutputStream</tt>\n and if the given <tt>LogRecord</tt> has at least the required log level.\n ",non-directive
"If not it silently returns.  ",directive
"If so, it calls any associated\n <tt>Filter</tt> to check if the record should be published.  ",non-directive
"If so,\n it calls its <tt>Formatter</tt> to format the record and then writes \n the result to the current output stream.\n ",non-directive
"<p>\n If this is the first <tt>LogRecord</tt> to be written to a given\n <tt>OutputStream</tt>, the <tt>Formatter</tt>'s \"head\" string is \n written to the stream before the <tt>LogRecord</tt> is written.\n\n ",directive
"@param  record  description of the log event. ",non-directive
"A null record is\n                 silently ignored and is not published\n",directive
" Create a <tt>StreamHandler</tt> with a given <tt>Formatter</tt>\n and output stream.\n ",non-directive
"<p>\n ",non-directive
"@param out         the target output stream\n ",non-directive
"@param formatter   Formatter to be used to format output\n",non-directive
" Format the given LogRecord.\n ",non-directive
"@param record the log record to be formatted.\n ",non-directive
"@return a formatted log record\n",non-directive
"\n Gets the name of the log level associated with the specified logger.\n ",non-directive
"If the specified logger does not exist, <tt>null</tt> \n is returned. \n ",directive
"This method first finds the logger of the given name and \n then returns the name of the log level by calling:\n <blockquote>\n   {@link Logger#getLevel Logger.getLevel()}.{@link Level#getName getName()};\n </blockquote>\n  \n <p>\n If the <tt>Level</tt> of the specified logger is <tt>null</tt>, \n which means that this logger's effective level is inherited \n from its parent, an empty string will be returned.\n \n",directive
"@param loggerName The name of the <tt>Logger</tt> to be retrieved.\n\n ",non-directive
"@return The name of the log level of the specified logger; or\n         an empty string if the log level of the specified logger\n         is <tt>null</tt>.  ",directive
"If the specified logger does not\n         exist, <tt>null</tt> is returned.\n\n ",directive
"@see Logger#getLevel\n",non-directive
" Retrieve the localization resource bundle for this\n logger for the current default locale.  ",non-directive
"Note that if\n the result is null, then the Logger will use a resource \n bundle inherited from its parent.\n\n ",directive
"@return localization bundle (may be null)\n",directive
" Set a filter to control output on this Logger.\n ",non-directive
"<P>\n After passing the initial \"level\" check, the Logger will\n call this Filter to check if a log record should really\n be published.\n\n ",non-directive
"@param   newFilter  a filter object (may be null)\n ",directive
" Log a message, specifying source class and method,\n with associated Throwable information.\n ",non-directive
"<p>\n If the logger is currently enabled for the given message \n level then the given arguments are stored in a LogRecord\n which is forwarded to all registered output handlers.\n ",non-directive
"<p>\n Note that the thrown argument is stored in the LogRecord thrown\n property, rather than the LogRecord parameters property.  ",directive
"Thus is it\n processed specially by output Formatters and is not treated\n as a formatting parameter to the LogRecord message property.\n ",directive
"<p>\n ",non-directive
"@param	level   One of the message level identifiers, e.g. ",non-directive
"SEVERE\n ",non-directive
"@param   sourceClass    name of class that issued the logging request\n ",non-directive
"@param   sourceMethod   name of method that issued the logging request\n ",non-directive
"@param   msg	The string message (or a key in the message catalog)\n ",non-directive
"@param   thrown  Throwable associated with log message.\n",non-directive
" Get the Handlers associated with this logger.\n ",non-directive
"<p>\n ",non-directive
"@return  an array of all registered Handlers\n",non-directive
" Reset the logging configuration.\n ",non-directive
"<p>\n For all named loggers, the reset operation removes and closes\n all Handlers and (except for the root logger) sets the level\n to null.  ",directive
"The root logger's level is set to Level.INFO.\n\n ",directive
" Return the character encoding for this <tt>Handler</tt>.\n\n ",non-directive
"@return  The encoding name.  ",non-directive
"May be null, which indicates the\n	    	default encoding should be used.\n",directive
" Set the log level specifying which message levels will be\n logged by this <tt>Handler</tt>.  ",non-directive
"Message levels lower than this\n value will be discarded. \n ",non-directive
"<p>\n The intention is to allow developers to turn on voluminous\n logging, but to limit the messages that are sent to certain\n <tt>Handlers</tt>.\n \n",directive
"@param newLevel   the new value for the log level\n ",non-directive
" Construct a default <tt>FileHandler</tt>.  ",non-directive
"This will be configured\n entirely from <tt>LogManager</tt> properties (or their default values).\n ",directive
"<p>\n ",non-directive
" Implements the <tt>put</tt> method as per the specification in\n {@link Preferences#put(String,String)}.\n\n ",non-directive
"<p>This implementation checks that the key and value are legal,\n obtains this preference node's lock, checks that the node\n has not been removed, invokes {@link #putSpi(String,String)}, and if\n there are any preference change listeners, enqueues a notification\n event for processing by the event dispatch thread.\n\n ",directive
"@param key key with which the specified value is to be associated.\n ",non-directive
"@param value value to be associated with the specified key.\n ",non-directive
" Implements the <tt>getInt</tt> method as per the specification in\n {@link Preferences#getInt(String,int)}.\n\n ",directive
"<p>This implementation invokes {@link #get(String,String) <tt>get(key,\n null)</tt>}.  ",directive
"If the return value is non-null, the implementation\n attempts to translate it to an <tt>int</tt> with\n {@link Integer#parseInt(String)}.  ",directive
"If the attempt succeeds, the return\n value is returned by this method.  ",non-directive
"Otherwise, <tt>def</tt> is returned.\n\n ",directive
"@param key key whose associated value is to be returned as an int.\n ",non-directive
"@param def the value to be returned in the event that this\n        preference node has no value associated with <tt>key</tt>\n        or the associated value cannot be interpreted as an int.\n ",directive
"@return the int value represented by the string associated with\n         <tt>key</tt> in this preference node, or <tt>def</tt> if the\n         associated value does not exist or cannot be interpreted as\n         an int.\n ",directive
" Implements the <tt>putLong</tt> method as per the specification in\n {@link Preferences#putLong(String,long)}.\n\n ",directive
"<p>This implementation translates <tt>value</tt> to a string with\n {@link Long#toString(long)} and invokes {@link #put(String,String)}\n on the result.\n\n ",directive
"@param key key with which the string form of value is to be associated.\n ",non-directive
"@param value value whose string form is to be associated with key.\n ",non-directive
" Implements the <tt>putDouble</tt> method as per the specification in\n {@link Preferences#putDouble(String,double)}.\n\n ",directive
"<p>This implementation translates <tt>value</tt> to a string with\n {@link Double#toString(double)} and invokes {@link #put(String,String)}\n on the result.\n\n ",directive
"@param key key with which the string form of value is to be associated.\n ",non-directive
"@param value value whose string form is to be associated with key.\n ",non-directive
" Implements the <tt>name</tt> method as per the specification in\n {@link Preferences#name()}.\n\n ",non-directive
"<p>This implementation merely returns the name that was\n passed to this node's constructor.\n\n ",non-directive
"@return this preference node's name, relative to its parent.\n",non-directive
" Returns the names of the children of this preference node.  ",non-directive
"(The\n returned array will be of size zero if this node has no children.)\n This method need not return the names of any nodes already cached,\n but may do so without harm.\n\n ",non-directive
"<p>This method is invoked with the lock on this node held.\n\n ",directive
"<p>If this node throws a <tt>BackingStoreException</tt>, the exception\n will propagate out beyond the enclosing {@link #childrenNames()}\n invocation.\n\n ",directive
"@return an array containing the names of the children of this\n         preference node.\n ",non-directive
" Returns true if this executor is in the process of terminating\n after <tt>shutdown</tt> or <tt>shutdownNow</tt> but has not\n completely terminated.  ",non-directive
"This method may be useful for\n debugging. ",directive
"A return of <tt>true</tt> reported a sufficient\n period after shutdown may indicate that submitted tasks have\n ignored or suppressed interruption, causing this executor not\n to properly terminate.\n ",directive
"@return true if terminating but not yet terminated\n",non-directive
" Sets a new handler for unexecutable tasks.\n\n ",non-directive
"@param handler the new handler\n ",non-directive
"@see #getRejectedExecutionHandler\n",non-directive
" Returns the thread keep-alive time, which is the amount of time\n that threads in excess of the core pool size may remain\n idle before being terminated.\n\n ",non-directive
"@param unit the desired time unit of the result\n ",non-directive
"@return the time limit\n ",non-directive
"@see #setKeepAliveTime\n",non-directive
" Executes task r in the caller's thread, unless the executor\n has been shut down, in which case the task is discarded.\n ",directive
"@param r the runnable task requested to be executed\n ",non-directive
"@param e the executor attempting to execute this task\n",non-directive
" Always returns <tt>false</tt>.\n ",directive
"A <tt>SynchronousQueue</tt> has no internal capacity.\n\n ",directive
"@param o the element\n ",non-directive
"@return <tt>false</tt>\n",non-directive
" Releases a permit, returning it to the semaphore.\n\n ",non-directive
"<p>Releases a permit, increasing the number of available permits by\n one.  ",non-directive
"If any threads are trying to acquire a permit, then one is\n selected and given the permit that was just released.  ",directive
"That thread\n is (re)enabled for thread scheduling purposes.\n\n ",directive
"<p>There is no requirement that a thread that releases a permit must\n have acquired that permit by calling {@link #acquire}.\n ",directive
"Correct usage of a semaphore is established by programming convention\n in the application.\n",directive
" Shrinks the number of available permits by the indicated\n reduction. ",non-directive
"This method can be useful in subclasses that use\n semaphores to track resources that become unavailable. ",directive
"This\n method differs from {@code acquire} in that it does not block\n waiting for permits to become available.\n\n ",directive
"@param reduction the number of permits to remove\n ",non-directive
" Inserts the specified element into this priority queue.\n\n ",non-directive
"@param e the element to add\n ",non-directive
"@return <tt>true</tt> (as specified by {@link Collection#add})\n ",non-directive
" Inserts the specified element into this priority queue. ",non-directive
"As the queue is\n unbounded this method will never block.\n\n ",directive
"@param e the element to add\n ",non-directive
" Returns an iterator over the elements in this queue in proper sequence.\n ",non-directive
"The returned <tt>Iterator</tt> is a \"weakly consistent\" iterator that\n will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.\n\n ",directive
"@return an iterator over the elements in this queue in proper sequence\n",non-directive
" Returns an iterator over the elements in this deque in reverse\n sequential order.  ",non-directive
"The elements will be returned in order from\n last (tail) to first (head).\n ",non-directive
"The returned <tt>Iterator</tt> is a \"weakly consistent\" iterator that\n will never throw {@link ConcurrentModificationException},\n and guarantees to traverse elements as they existed upon\n construction of the iterator, and may (but is not guaranteed to)\n reflect any modifications subsequent to construction.\n",directive
" Returns a {@link Callable} object that, when\n called, runs the given task and returns the given result.  ",non-directive
"This\n can be useful when applying methods requiring a\n <tt>Callable</tt> to an otherwise resultless action.\n ",directive
"@param task the task to run\n ",non-directive
"@param result the result to return\n ",non-directive
"@return a callable object\n ",non-directive
" Blocks until all tasks have completed execution after a shutdown\n request, or the timeout occurs, or the current thread is\n interrupted, whichever happens first.\n\n ",directive
"@param timeout the maximum time to wait\n ",non-directive
"@param unit the time unit of the timeout argument\n ",non-directive
"@return <tt>true</tt> if this executor terminated and\n         <tt>false</tt> if the timeout elapsed before termination\n ",directive
" Inserts the specified element into this delay queue.\n\n ",non-directive
"@param e the element to add\n ",non-directive
"@return <tt>true</tt>\n ",non-directive
" Retrieves, but does not remove, the head of this queue, or\n returns <tt>null</tt> if this queue is empty.  ",directive
"Unlike\n <tt>poll</tt>, if no expired elements are available in the queue,\n this method returns the element that will expire next,\n if one exists.\n\n ",directive
"@return the head of this queue, or <tt>null</tt> if this\n         queue is empty.\n",directive
" Waits until all {@linkplain #getParties parties} have invoked\n <tt>await</tt> on this barrier, or the specified waiting time elapses.\n\n ",non-directive
"<p>If the current thread is not the last to arrive then it is\n disabled for thread scheduling purposes and lies dormant until\n one of the following things happens:\n \n ",directive
"-- The last thread arrives; or\n ",non-directive
"-- The specified timeout elapses; or\n ",non-directive
"-- Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread; or\n ",directive
"-- Some other thread {@linkplain Thread#interrupt interrupts}\n one of the other waiting threads; or\n ",directive
"-- Some other thread times out while waiting for barrier; or\n ",directive
"-- Some other thread invokes {@link #reset} on this barrier.\n ",directive
"\n\n ",non-directive
"<p>If the current thread:\n \n ",directive
"-- has its interrupted status set on entry to this method; or\n ",non-directive
"-- is {@linkplain Thread#interrupt interrupted} while waiting\n \n ",directive
"then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n ",directive
"<p>If the specified waiting time elapses then {@link TimeoutException}\n is thrown. ",non-directive
"If the time is less than or equal to zero, the\n method will not wait at all.\n\n ",non-directive
"<p>If the barrier is {@link #reset} while any thread is waiting,\n or if the barrier {@linkplain #isBroken is broken} when\n <tt>await</tt> is invoked, or while any thread is waiting, then\n {@link BrokenBarrierException} is thrown.\n\n ",directive
"<p>If any thread is {@linkplain Thread#interrupt interrupted} while\n waiting, then all other waiting threads will throw {@link\n BrokenBarrierException} and the barrier is placed in the broken\n state.\n\n ",directive
"<p>If the current thread is the last thread to arrive, and a\n non-null barrier action was supplied in the constructor, then the\n current thread runs the action before allowing the other threads to\n continue.\n ",directive
"If an exception occurs during the barrier action then that exception\n will be propagated in the current thread and the barrier is placed in\n the broken state.\n\n ",directive
"@param timeout the time to wait for the barrier\n ",non-directive
"@param unit the time unit of the timeout parameter\n ",non-directive
"@return the arrival index of the current thread, where index\n         <tt>{@link #getParties()} - 1</tt> indicates the first\n         to arrive and zero indicates the last to arrive\n ",directive
" Causes the current thread to wait until the latch has counted down to\n zero, unless the thread is {@linkplain Thread#interrupt interrupted}.\n\n ",non-directive
"<p>If the current count is zero then this method returns immediately.\n\n ",directive
"<p>If the current count is greater than zero then the current\n thread becomes disabled for thread scheduling purposes and lies\n dormant until one of two things happen:\n \n ",non-directive
"-- The count reaches zero due to invocations of the\n {@link #countDown} method; or\n ",directive
"-- Some other thread {@linkplain Thread#interrupt interrupts}\n the current thread.\n ",directive
"\n\n ",non-directive
"<p>If the current thread:\n \n ",directive
"-- has its interrupted status set on entry to this method; or\n ",non-directive
"-- is {@linkplain Thread#interrupt interrupted} while waiting,\n \n ",directive
"then {@link InterruptedException} is thrown and the current thread's\n interrupted status is cleared.\n\n ",directive
" Returns a string identifying this latch, as well as its state.\n ",non-directive
"The state, in brackets, includes the String {@code \"Count =\"}\n followed by the current count.\n\n ",non-directive
"@return a string identifying this latch, as well as its state\n",non-directive
" Adds all of the elements in the specified collection to this set if\n they're not already present.  ",non-directive
"If the specified collection is also a\n set, the <tt>addAll</tt> operation effectively modifies this set so\n that its value is the <i>union</i> of the two sets.  ",directive
"The behavior of\n this operation is undefined if the specified collection is modified\n while the operation is in progress.\n\n ",directive
"@param  c collection containing elements to be added to this set\n ",non-directive
"@return <tt>true</tt> if this set changed as a result of the call\n ",non-directive
"@see #add(Object)\n",non-directive
" Retains only the elements in this list that are contained in the\n specified collection.  ",non-directive
"In other words, removes from this list all of\n its elements that are not contained in the specified collection.\n\n ",non-directive
"@param c collection containing elements to be retained in this list\n ",non-directive
"@return <tt>true</tt> if this list changed as a result of the call\n ",non-directive
"@see #remove(Object)\n",non-directive
" Returns an iterator over the elements in this list in proper sequence.\n\n ",non-directive
"<p>The returned iterator provides a snapshot of the state of the list\n when the iterator was constructed. ",directive
"No synchronization is needed while\n traversing the iterator. ",directive
"The iterator does <em>NOT</em> support the\n <tt>remove</tt> method.\n\n ",directive
"@return an iterator over the elements in this list in proper sequence\n",non-directive
" Replaces the entry for a key only if currently mapped to a given value.\n ",non-directive
"This is equivalent to\n <pre>\n   if (map.containsKey(key) &amp;&amp; map.get(key).equals(oldValue)) {\n       map.put(key, newValue);\n       return true;\n   } else return false;</pre>\n except that the action is performed atomically.\n\n ",directive
"@param key key with which the specified value is associated\n ",non-directive
"@param oldValue value expected to be associated with the specified key\n ",non-directive
"@param newValue value to be associated with the specified key\n ",non-directive
"@return <tt>true</tt> if the value was replaced\n ",non-directive
" Returns the number of key-value mappings in this map.  ",non-directive
"If the\n map contains more than <tt>Integer.MAX_VALUE</tt> elements, returns\n <tt>Integer.MAX_VALUE</tt>.\n\n ",non-directive
"@return the number of key-value mappings in this map\n",non-directive
" Returns an enumeration of the keys in this table.\n\n ",non-directive
"@return an enumeration of the keys in this table\n ",non-directive
"@see #keySet()\n",non-directive
" Retrieves and removes the head of this queue, waiting up to the\n specified wait time if necessary for an element to become available.\n\n ",non-directive
"@param timeout how long to wait before giving up, in units of\n        <tt>unit</tt>\n ",non-directive
"@param unit a <tt>TimeUnit</tt> determining how to interpret the\n        <tt>timeout</tt> parameter\n ",non-directive
"@return the head of this queue, or <tt>null</tt> if the\n         specified waiting time elapses before an element is available\n ",directive
" Removes the last occurrence of the specified element from this deque.\n ",non-directive
"If the deque does not contain the element, it is unchanged.\n ",non-directive
"More formally, removes the last element <tt>e</tt> such that\n <tt>o.equals(e)</tt> (if such an element exists).\n ",non-directive
"Returns <tt>true</tt> if this deque contained the specified element\n (or equivalently, if this deque changed as a result of the call).\n\n ",non-directive
"@param o element to be removed from this deque, if present\n ",non-directive
"@return <tt>true</tt> if an element was removed as a result of this call\n ",non-directive
" Returns <tt>true</tt> if this deque contains the specified element.\n ",non-directive
"More formally, returns <tt>true</tt> if and only if this deque contains\n at least one element <tt>e</tt> such that <tt>o.equals(e)</tt>.\n\n ",non-directive
"@param o object to be checked for containment in this deque\n ",non-directive
"@return <tt>true</tt> if this deque contains the specified element\n ",non-directive
" Removes a single instance of the specified element from this queue,\n if it is present.  ",non-directive
"More formally, removes an element <tt>e</tt> such\n that <tt>o.equals(e)</tt>, if this queue contains one or more such\n elements.\n ",non-directive
"Returns <tt>true</tt> if this queue contained the specified element\n (or equivalently, if this queue changed as a result of the call).\n\n ",non-directive
"@param o element to be removed from this queue, if present\n ",non-directive
"@return <tt>true</tt> if this queue changed as a result of the call\n",non-directive
" Atomically sets the element at position {@code i} to the given\n updated value if the current value {@code ==} the expected value.\n ",non-directive
"@param i the index\n ",non-directive
"@param expect the expected value\n ",non-directive
"@param update the new value\n ",non-directive
"@return true if successful. ",non-directive
"False return indicates that\n the actual value was not equal to the expected value.\n",directive
" Gets the current value at position {@code i}.\n\n ",non-directive
"@param i the index\n ",non-directive
"@return the current value\n",non-directive
" Atomically decrements by one the element at index {@code i}.\n\n ",non-directive
"@param i the index\n ",non-directive
"@return the updated value\n",non-directive
" Atomically adds the given value to the current value.\n\n ",non-directive
"@param delta the value to add\n ",non-directive
"@return the updated value\n",non-directive
" Returns an estimate of the number of threads waiting to acquire\n either the read or write lock.  ",non-directive
"The value is only an estimate\n because the number of threads may change dynamically while this\n method traverses internal data structures.  ",non-directive
"This method is\n designed for use in monitoring of the system state, not for\n synchronization control.\n\n ",directive
"@return the estimated number of threads waiting for this lock\n",non-directive
" Returns a string identifying this lock, as well as its lock state.\n ",non-directive
"The state, in brackets, includes the String {@code \"Read locks =\"}\n followed by the number of held read locks.\n\n ",non-directive
"@return a string identifying this lock, as well as its lock state\n",non-directive
" Acquires the lock.\n\n ",non-directive
"<p>Acquires the lock if it is not held by another thread and returns\n immediately, setting the lock hold count to one.\n\n ",directive
"<p>If the current thread already holds the lock then the hold\n count is incremented by one and the method returns immediately.\n\n ",directive
"<p>If the lock is held by another thread then the\n current thread becomes disabled for thread scheduling\n purposes and lies dormant until the lock has been acquired,\n at which time the lock hold count is set to one.\n",directive
" Returns a {@link Condition} instance for use with this\n {@link Lock} instance.\n\n ",non-directive
"<p>The returned {@link Condition} instance supports the same\n usages as do the {@link Object} monitor methods ({@link\n Object#wait() wait}, {@link Object#notify notify}, and {@link\n Object#notifyAll notifyAll}) when used with the built-in\n monitor lock.\n\n ",directive
"\n\n ",non-directive
"-- If this lock is not held when any of the {@link Condition}\n {@linkplain Condition#await() waiting} or {@linkplain\n Condition#signal signalling} methods are called, then an {@link\n IllegalMonitorStateException} is thrown.\n\n ",non-directive
"-- When the condition {@linkplain Condition#await() waiting}\n methods are called the lock is released and, before they\n return, the lock is reacquired and the lock hold count restored\n to what it was when the method was called.\n\n ",directive
"-- If a thread is {@linkplain Thread#interrupt interrupted}\n while waiting then the wait will terminate, an {@link\n InterruptedException} will be thrown, and the thread's\n interrupted status will be cleared.\n\n ",directive
"--  Waiting threads are signalled in FIFO order.\n\n ",directive
"-- The ordering of lock reacquisition for threads returning\n from waiting methods is the same as for threads initially\n acquiring the lock, which is in the default case not specified,\n but for <em>fair</em> locks favors those threads that have been\n waiting the longest.\n\n ",directive
"\n\n ",non-directive
"@return the Condition object\n",non-directive
" Queries if this lock is held by any thread. ",non-directive
"This method is\n designed for use in monitoring of the system state,\n not for synchronization control.\n\n ",directive
"@return {@code true} if any thread holds this lock and\n         {@code false} otherwise\n",non-directive
" Makes available the permit for the given thread, if it\n was not already available.  ",non-directive
"If the thread was blocked on\n {@code park} then it will unblock.  ",directive
"Otherwise, its next call\n to {@code park} is guaranteed not to block. ",directive
"This operation\n is not guaranteed to have any effect at all if the given\n thread has not been started.\n\n ",directive
"@param thread the thread to unpark, or {@code null}, in which case\n        this operation has no effect\n",directive
" Returns true if the given thread is currently queued.\n\n ",non-directive
"<p>This implementation traverses the queue to determine\n presence of the given thread.\n\n ",non-directive
"@param thread the thread\n ",non-directive
"@return {@code true} if the given thread is on the queue\n ",non-directive
" Queries whether the given ConditionObject\n uses this synchronizer as its lock.\n\n ",non-directive
"@param condition the condition\n ",non-directive
"@return <tt>true</tt> if owned\n ",non-directive
" Implements timed condition wait.\n ",non-directive
"\n ",non-directive
"--  If current thread is interrupted, throw InterruptedException\n ",non-directive
"--  Save lock state returned by {@link #getState}\n ",directive
"--  Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException  if it fails.\n ",directive
"--  Block until signalled, interrupted, or timed out\n ",non-directive
"--  Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n ",directive
"--  If interrupted while blocked in step 4, throw InterruptedException\n \n",non-directive
" Returns an estimate of the number of threads waiting on\n this condition.\n ",non-directive
"Implements {@link AbstractQueuedSynchronizer#getWaitQueueLength}.\n\n ",non-directive
"@return the estimated number of waiting threads\n ",non-directive
" Queries whether any threads are waiting to acquire. ",non-directive
"Note that\n because cancellations due to interrupts and timeouts may occur\n at any time, a {@code true} return does not guarantee that any\n other thread will ever acquire.\n\n ",directive
"<p>In this implementation, this operation returns in\n constant time.\n\n ",directive
"@return {@code true} if there may be other threads waiting to acquire\n",non-directive
" Returns a collection containing threads that may be waiting to\n acquire.  ",non-directive
"Because the actual set of threads may change\n dynamically while constructing this result, the returned\n collection is only a best-effort estimate.  ",directive
"The elements of the\n returned collection are in no particular order.  ",directive
"This method is\n designed to facilitate construction of subclasses that provide\n more extensive monitoring facilities.\n\n ",directive
"@return the collection of threads\n",non-directive
" Implements timed condition wait.\n ",non-directive
"\n ",non-directive
"--  If current thread is interrupted, throw InterruptedException\n ",directive
"--  Save lock state returned by {@link #getState}\n ",directive
"--  Invoke {@link #release} with\n      saved state as argument, throwing\n      IllegalMonitorStateException  if it fails.\n ",directive
"--  Block until signalled, interrupted, or timed out\n ",non-directive
"--  Reacquire by invoking specialized version of\n      {@link #acquire} with saved state as argument.\n ",directive
"--  If interrupted while blocked in step 4, throw InterruptedException\n \n",non-directive
" Returns a localized name for the given variant code and the given locale that \n is appropriate for display to the user.\n ",non-directive
"If the name returned cannot be localized according to <code>locale</code>,\n this method returns null.\n ",directive
"@param variant the variant string\n ",non-directive
"@param locale the desired locale\n ",non-directive
"@return the name of the given variant string for the specified locale, or null if it's not\n     available.\n ",directive
"@see java.util.Locale#getDisplayVariant(java.util.Locale)\n",non-directive
" Resets this matcher with a new input sequence.\n\n ",non-directive
"<p> Resetting a matcher discards all of its explicit state information\n and sets its append position to zero.  ",directive
"The matcher's region is set to\n the default region, which is its entire character sequence.  ",directive
"The \n anchoring and transparency of this matcher's region boundaries are \n unaffected.\n\n ",directive
"@param  input\n         The new input character sequence\n\n ",non-directive
"@return  This matcher\n",non-directive
" Returns a Map of the entries contained in this Manifest. ",non-directive
"Each entry\n is represented by a String name (key) and associated Attributes (value).\n ",non-directive
"The Map permits the {@code null} key, but no entry with a null key is\n created by {@link #read}, nor is such an entry written by using {@link\n #write}.\n\n ",directive
"@return a Map of the entries contained in this Manifest\n",non-directive
" Returns the uncompressed size of the entry data, or -1 if not known.\n ",directive
"@return the uncompressed size of the entry data, or -1 if not known\n ",directive
"@see #setSize(long)\n",non-directive
" Returns the size of the compressed entry data, or -1 if not known.\n ",directive
"In the case of a stored entry, the compressed size will be the same\n as the uncompressed size of the entry.\n ",directive
"@return the size of the compressed entry data, or -1 if not known\n ",directive
"@see #setCompressedSize(long)\n",non-directive
" Creates a new input stream with the specified decompressor and\n buffer size.\n ",non-directive
"@param in the input stream\n ",non-directive
"@param inf the decompressor (\"inflater\")\n ",non-directive
"@param size the input buffer size\n ",non-directive
" Creates a new input stream with the specified decompressor and a\n default buffer size.\n ",non-directive
"@param in the input stream\n ",non-directive
"@param inf the decompressor (\"inflater\")\n",non-directive
" Returns true if no data remains in the input buffer. ",non-directive
"This can\n be used to determine if #setInput should be called in order\n to provide more input.\n ",directive
"@return true if no data remains in the input buffer\n",non-directive
" Writes a byte to the compressed output stream. ",non-directive
"This method will\n block until the byte can be written.\n ",directive
"@param b the byte to be written\n ",non-directive
" Reads compressed data into a byte array.\n ",non-directive
"This method will block until some input can be read and compressed.\n\n ",directive
"@param b buffer into which the data is read\n ",non-directive
"@param off starting offset of the data within {@code b}\n ",non-directive
"@param len maximum number of compressed bytes to read into {@code b}\n ",non-directive
"@return the actual number of bytes read, or -1 if the end of the\n uncompressed input stream is reached\n ",directive
" Returns 0 after EOF has been reached, otherwise always return 1.\n ",non-directive
"<p>\n Programs should not count on this method to return the actual number\n of bytes that could be read without blocking\n ",directive
"@return zero after the end of the underlying input stream has been\n reached, otherwise always returns 1\n ",non-directive
" Creates an input stream using the specified Checksum.\n ",non-directive
"@param in the input stream\n ",non-directive
"@param cksum the Checksum\n",non-directive
" Returns a BigInteger whose value is {@code (this % val)}.\n\n ",non-directive
"@param  val value by which this BigInteger is to be divided, and the\n	       remainder computed.\n ",non-directive
"@return {@code this % val}\n ",non-directive
" Returns a BigInteger whose value is {@code (this ^ val)}.  ",non-directive
"(This method\n returns a negative BigInteger if and only if exactly one of this and\n val are negative.)\n\n ",directive
"@param val value to be XOR'ed with this BigInteger.\n ",non-directive
"@return {@code this ^ val}\n",non-directive
" Returns a BigInteger whose value is {@code (this & ~val)}.  ",non-directive
"This\n method, which is equivalent to {@code and(val.not())}, is provided as\n a convenience for masking operations.  ",non-directive
"(This method returns a negative\n BigInteger if and only if {@code this} is negative and {@code val} is\n positive.)\n\n ",directive
"@param val value to be complemented and AND'ed with this BigInteger.\n ",non-directive
"@return {@code this & ~val}\n",non-directive
" Returns a BigInteger whose value is equivalent to this BigInteger\n with the designated bit set.  ",non-directive
"(Computes {@code (this | (1<<n))}.)\n\n ",non-directive
"@param  n index of bit to set.\n ",non-directive
"@return {@code this | (1<<n)}\n ",non-directive
" Returns the minimum of this BigInteger and {@code val}.\n\n ",non-directive
"@param  val value with which the minimum is to be computed.\n ",non-directive
"@return the BigInteger whose value is the lesser of this BigInteger and \n	       {@code val}.  ",non-directive
"If they are equal, either may be returned.\n",directive
" Converts this BigInteger to a {@code long}.  ",non-directive
"This\n conversion is analogous to a <a\n href=\"http://java.sun.com/docs/books/jls/second_edition/html/conversions.doc.html#25363\"><i>narrowing\n primitive conversion</i></a> from {@code long} to\n {@code int} as defined in the <a\n href=\"http://java.sun.com/docs/books/jls/html/\">Java Language\n Specification</a>: if this BigInteger is too big to fit in a\n {@code long}, only the low-order 64 bits are returned.\n ",directive
"Note that this conversion can lose information about the\n overall magnitude of the BigInteger value as well as return a\n result with the opposite sign.\n\n ",directive
"@return this BigInteger converted to a {@code long}.\n",non-directive
" Translates a {@code long} value into a {@code BigDecimal}\n with a scale of zero.  ",non-directive
"This {@literal \"static factory method\"}\n is provided in preference to a ({@code long}) constructor\n because it allows for reuse of frequently used\n {@code BigDecimal} values.\n\n ",directive
"@param val value of the {@code BigDecimal}.\n ",non-directive
"@return a {@code BigDecimal} whose value is {@code val}.\n",non-directive
" Returns a {@code BigDecimal} whose value is {@code (this +\n augend)}, and whose scale is {@code max(this.scale(),\n augend.scale())}.\n\n ",non-directive
"@param  augend value to be added to this {@code BigDecimal}.\n ",non-directive
"@return {@code this + augend}\n",non-directive
" Returns a {@code BigDecimal} whose value is <tt>(this &times;\n multiplicand)</tt>, with rounding according to the context settings.\n\n ",non-directive
"@param  multiplicand value to be multiplied by this {@code BigDecimal}.\n ",non-directive
"@param  mc the context to use.\n ",non-directive
"@return {@code this * multiplicand}, rounded as necessary.\n ",non-directive
"@since  1.5\n",non-directive
" Returns a {@code BigDecimal} whose value is {@code (this /\n divisor)}, with rounding according to the context settings.\n\n ",non-directive
"@param  divisor value by which this {@code BigDecimal} is to be divided.\n ",non-directive
"@param  mc the context to use.\n ",non-directive
"@return {@code this / divisor}, rounded as necessary.\n ",non-directive
"@since  1.5\n",non-directive
" Returns a {@code BigDecimal} whose value is {@code (+this)},\n with rounding according to the context settings.\n \n",non-directive
" <p>The effect of this method is identical to that of the {@link\n #round(MathContext)} method.\n\n ",directive
"@param mc the context to use.\n ",non-directive
"@return {@code this}, rounded as necessary.  ",non-directive
"A zero result will\n         have a scale of 0.\n ",directive
"@see    #round(MathContext)\n ",non-directive
"@since  1.5\n",non-directive
" Translates a character array representation of a\n {@code BigDecimal} into a {@code BigDecimal}, accepting the\n same sequence of characters as the {@link #BigDecimal(String)}\n constructor, while allowing a sub-array to be specified.\n \n",non-directive
" <p>Note that if the sequence of characters is already available\n within a character array, using this constructor is faster than\n converting the {@code char} array to string and using the\n {@code BigDecimal(String)} constructor .\n\n ",directive
"@param  in {@code char} array that is the source of characters.\n ",non-directive
"@param  offset first character in the array to inspect.\n ",non-directive
"@param  len number of characters to consider.\n ",non-directive
"@since  1.5\n",non-directive
" Translates a {@code long} into a {@code BigDecimal}, with\n rounding according to the context settings.  ",non-directive
"The scale of the\n {@code BigDecimal}, before any rounding, is zero.\n \n",non-directive
"@param  val {@code long} value to be converted to {@code BigDecimal}.\n ",non-directive
"@param  mc the context to use.\n ",non-directive
"@since  1.5\n",non-directive
" Returns the canonical string representation of the actions,\n which currently is the empty string \"\", since there are no actions for \n an UnresolvedPermission. ",non-directive
"That is, the actions for the\n permission that will be created when this UnresolvedPermission\n is resolved may be non-null, but an UnresolvedPermission\n itself is never considered to have any actions.\n\n ",directive
"@return the empty string \"\".\n",non-directive
" Initializes this signature object with the specified\n private key and source of randomness for signing operations.\n\n ",non-directive
"<p>This concrete method has been added to this previously-defined\n abstract class. ",non-directive
"(For backwards compatibility, it cannot be abstract.)\n\n ",non-directive
"@param privateKey the private key of the identity whose signature\n will be generated.\n ",non-directive
"@param random the source of randomness\n\n ",non-directive
"\n Returns the signature bytes of all the data\n updated so far.    \n ",non-directive
"The format of the signature depends on the underlying \n signature scheme.\n\n ",directive
"@return the signature bytes of the signing operation's result.\n\n ",non-directive
" Initializes this object for verification. ",non-directive
"If this method is called\n again with a different argument, it negates the effect\n of this call.\n\n ",directive
"@param publicKey the public key of the identity whose signature is\n going to be verified.\n\n ",non-directive
" Initialize this object for signing. ",non-directive
"If this method is called\n again with a different argument, it negates the effect\n of this call.\n\n ",directive
"@param privateKey the private key of the identity whose signature\n is going to be generated.\n \n",non-directive
"@param random the source of randomness for this signature.\n \n",non-directive
" Returns a SecureRandom object that implements the specified\n Random Number Generator (RNG) algorithm. \n\n ",non-directive
"<p> A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the specified Provider\n object is returned.  ",non-directive
"Note that the specified Provider object\n does not have to be registered in the provider list.\n\n ",directive
"<p> The returned SecureRandom object has not been seeded.  ",directive
"To seed the\n returned object, call the <code>setSeed</code> method.\n ",directive
"If <code>setSeed</code> is not called, the first call to\n <code>nextBytes</code> will force the SecureRandom object to seed itself.\n ",directive
"This self-seeding will not occur if <code>setSeed</code> was\n previously called.\n\n ",directive
"@param algorithm the name of the RNG algorithm.\n ",non-directive
"See Appendix A in the <a href=\n \"../../../technotes/guides/security/crypto/CryptoSpec.html#AppA\">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard RNG algorithm names.\n\n ",directive
"@param provider the provider.\n\n ",non-directive
"@return the new SecureRandom object.\n\n ",non-directive
"@see Provider\n\n ",non-directive
"@since 1.4\n",non-directive
" Constructs a secure random number generator (RNG) implementing the\n default random number algorithm.\n ",non-directive
"The SecureRandom instance is seeded with the specified seed bytes.\n\n ",non-directive
"<p> This constructor traverses the list of registered security Providers,\n starting with the most preferred Provider.\n ",non-directive
"A new SecureRandom object encapsulating the\n SecureRandomSpi implementation from the first\n Provider that supports a SecureRandom (RNG) algorithm is returned.\n ",non-directive
"If none of the Providers support a RNG algorithm,\n then an implementation-specific default is returned.\n\n ",directive
"<p> Note that the list of registered providers may be retrieved via\n the {@link Security#getProviders() Security.getProviders()} method.\n\n ",directive
"<p> See Appendix A in the <a href=\n \"../../../technotes/guides/security/crypto/CryptoSpec.html#AppA\">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard RNG algorithm names.\n\n ",directive
"@param seed the seed.\n",non-directive
" Constructs a ProviderException with the specified detail\n message. ",non-directive
"A detail message is a String that describes this\n particular exception.  \n\n ",non-directive
"@param s the detail message.  \n",non-directive
" Checks two Permission objects for equality.\n ",non-directive
"<P>\n Do not use the <code>equals</code> method for making access control\n decisions; use the <code>implies</code> method.\n  \n",directive
"@param obj the object we are testing for equality with this object.\n\n ",non-directive
"@return true if both Permission objects are equivalent.\n",non-directive
" Completes the hash computation by performing final operations\n such as padding. ",non-directive
"The digest is reset after this call is made.\n\n ",directive
"@return the array of bytes for the resulting hash value.  \n",non-directive
" Creates a message digest with the specified algorithm name.\n \n",non-directive
"@param algorithm the standard name of the digest algorithm. \n ",non-directive
"See Appendix A in the <a href=\n \"../../../technotes/guides/security/crypto/CryptoSpec.html#AppA\">\n Java Cryptography Architecture API Specification &amp; Reference </a> \n for information about standard algorithm names.\n",directive
" Checks if the given alias exists in this keystore.\n\n ",non-directive
"@param alias the alias name\n\n ",non-directive
"@return true if the alias exists, false otherwise\n",non-directive
" Stores this keystore to the given output stream, and protects its\n integrity with the given password.\n\n ",non-directive
"@param stream the output stream to which this keystore is written.\n ",non-directive
"@param password the password to generate the keystore integrity check\n\n ",non-directive
" Creates a <code>KeyManagementException</code> with the specified cause\n and a detail message of <tt>(cause==null ? null : cause.toString())</tt>\n (which typically contains the class and detail message of\n <tt>cause</tt>).\n\n ",directive
"@param cause the cause (which is saved for later retrieval by the\n        {@link #getCause()} method).  ",non-directive
"(A <tt>null</tt> value is permitted,\n        and indicates that the cause is nonexistent or unknown.)\n ",directive
"@since 1.5\n",non-directive
" Returns this identity's public key.\n \n",non-directive
"@return the public key for this identity.\n \n",non-directive
"@see #setPublicKey\n",non-directive
"\n Constructs a DigestException with the specified detail\n message.  ",non-directive
"(A detail message is a String that describes this\n particular exception.)\n\n ",non-directive
"@param msg the detail message.  \n",non-directive
" Constructs a provider with the specified name, version number,\n and information.\n\n ",non-directive
"@param name the provider name.\n ",non-directive
"@param version the provider version number.\n ",non-directive
"@param info a description of the provider and its services.\n",non-directive
" Returns a (transparent) specification of this parameter object.\n ",non-directive
"<code>paramSpec</code> identifies the specification class in which \n the parameters should be returned. ",non-directive
"It could, for example, be\n <code>DSAParameterSpec.class</code>, to indicate that the\n parameters should be returned in an instance of the \n <code>DSAParameterSpec</code> class.\n\n ",non-directive
"@param paramSpec the specification class in which \n the parameters should be returned.\n\n ",non-directive
"@return the parameter specification.\n\n ",non-directive
"\n Returns an AlgorithmParameterGenerator object for generating\n a set of parameters to be used with the specified algorithm.\n\n ",non-directive
"<p> A new AlgorithmParameterGenerator object encapsulating the\n AlgorithmParameterGeneratorSpi implementation from the specified Provider\n object is returned.  ",non-directive
"Note that the specified Provider object\n does not have to be registered in the provider list.\n\n ",directive
"@param algorithm the string name of the algorithm this\n parameter generator is associated with.\n ",non-directive
"See Appendix A in the <a href=\n \"../../../technotes/guides/security/crypto/CryptoSpec.html#AppA\">\n Java Cryptography Architecture API Specification &amp; Reference </a>\n for information about standard algorithm names.\n\n ",directive
"@param provider the Provider object.\n\n ",non-directive
"@return the new AlgorithmParameterGenerator object.\n\n ",non-directive
"@see Provider\n\n ",non-directive
"@since 1.4\n",non-directive
" Initializes the key pair generator using the DSA family parameters\n (p,q and g) and an optional SecureRandom bit source. ",non-directive
"If a\n SecureRandom bit source is needed but not supplied, i.e. ",directive
"null, a \n default SecureRandom instance will be used.\n\n ",directive
"@param params the parameters to use to generate the keys.\n\n ",non-directive
"@param random the random bit source to use to generate key bits;\n can be null.\n\n ",directive
" Returns a copy of the otherPrimeInfo or null if there are \n only two prime factors (p and q).\n\n ",directive
"@return the otherPrimeInfo. ",non-directive
"Returns a new array each\n time this method is called.\n",directive
" Creates a new EncodedKeySpec with the given encoded key.\n\n ",non-directive
"@param encodedKey the encoded key. ",non-directive
"The contents of the \n array are copied to protect against subsequent modification.\n ",directive
" Compares this elliptic curve for equality with the\n specified object. \n ",non-directive
"@param obj the object to be compared.\n ",non-directive
"@return true if <code>obj</code> is an instance of\n EllipticCurve and the field, A, B, and seeding bytes \n match, false otherwise.\n",directive
" Creates a new ECPrivateKeySpec with the specified \n parameter values.\n ",non-directive
"@param s the private value.\n ",non-directive
"@param params the associated elliptic curve domain \n parameters.\n ",non-directive
" Creates an ECPoint from the specified affine x-coordinate\n <code>x</code> and affine y-coordinate <code>y</code>.\n ",non-directive
"@param x the affine x-coordinate.\n ",non-directive
"@param y the affine y-coordinate.\n ",non-directive
" Creates a parameter specification for EC parameter\n generation using a standard (or predefined) name\n <code>stdName</code> in order to generate the corresponding\n (precomputed) elliptic curve domain parameters. ",non-directive
"For the\n list of supported names, please consult the documentation \n of provider whose implementation will be used.\n ",directive
"@param stdName the standard name of the to-be-generated EC\n domain parameters.\n ",non-directive
" Creates a new DSAPrivateKeySpec with the specified parameter values.\n \n",non-directive
"@param x the private key.\n \n",non-directive
"@param p the prime.\n \n",non-directive
"@param q the sub-prime.\n \n",non-directive
"@param g the base.\n",non-directive
" Gets the <code>issuerUniqueID</code> value from the certificate.\n ",non-directive
"The issuer unique identifier is present in the certificate\n to handle the possibility of reuse of issuer names over time.\n ",directive
"RFC 2459 recommends that names not be reused and that\n conforming certificates not make use of unique identifiers.\n ",directive
"Applications conforming to that profile should be capable of\n parsing unique identifiers and making comparisons.\n \n",directive
" <p>The ASN.1 definition for this is:\n <pre>\n issuerUniqueID  [1]  IMPLICIT UniqueIdentifier OPTIONAL<p>\n UniqueIdentifier  ::=  BIT STRING\n </pre>\n\n ",non-directive
"@return the issuer unique identifier or null if it is not\n present in the certificate.\n",directive
" Sets the subjectPublicKeyAlgID criterion. ",non-directive
"The\n <code>X509Certificate</code> must contain a subject public key\n with the specified algorithm. ",directive
"If <code>null</code>, no\n subjectPublicKeyAlgID check will be done.\n \n",directive
"@param oid The object identifier (OID) of the algorithm to check\n            for (or <code>null</code>). ",directive
"An OID is represented by a\n            set of nonnegative integers separated by periods.\n ",directive
"@see #getSubjectPublicKeyAlgID\n",non-directive
" Enables/disables matching all of the subjectAlternativeNames \n specified in the {@link #setSubjectAlternativeNames\n setSubjectAlternativeNames} or {@link #addSubjectAlternativeName\n addSubjectAlternativeName} methods. ",non-directive
"If enabled, \n the <code>X509Certificate</code> must contain all of the \n specified subject alternative names. ",directive
"If disabled, the \n <code>X509Certificate</code> must contain at least one of the \n specified subject alternative names.\n\n ",directive
"<p>The matchAllNames flag is <code>true</code> by default.\n\n ",non-directive
"@param matchAllNames if <code>true</code>, the flag is enabled;\n if <code>false</code>, the flag is disabled.\n ",non-directive
"@see #getMatchAllSubjectAltNames\n",non-directive
" Sets the basic constraints constraint. ",non-directive
"If the value is greater than or\n equal to zero, <code>X509Certificates</code> must include a \n basicConstraints extension with\n a pathLen of at least this value. ",directive
"If the value is -2, only end-entity\n certificates are accepted. ",directive
"If the value is -1, no check is done.\n ",directive
"<p>\n This constraint is useful when building a certification path forward \n (from the target toward the trust anchor. ",directive
"If a partial path has been \n built, any candidate certificate must have a maxPathLen value greater \n than or equal to the number of certificates in the partial path.\n\n ",directive
"@param minMaxPathLen the value for the basic constraints constraint\n ",non-directive
"@see #getBasicConstraints\n",non-directive
" Returns the subjectPublicKey criterion. ",non-directive
"The\n <code>X509Certificate</code> must contain the specified subject\n public key. ",directive
"If <code>null</code>, no subjectPublicKey check will be done.\n \n",directive
"@return the subject public key to check for (or <code>null</code>)\n ",directive
"@see #setSubjectPublicKey\n",non-directive
" Indicates if the <code>X509Certificate</code> must contain all\n or at least one of the subjectAlternativeNames \n specified in the {@link #setSubjectAlternativeNames\n setSubjectAlternativeNames} or {@link #addSubjectAlternativeName\n addSubjectAlternativeName} methods. ",non-directive
"If <code>true</code>, \n the <code>X509Certificate</code> must contain all of the \n specified subject alternative names. ",non-directive
"If <code>false</code>, the \n <code>X509Certificate</code> must contain at least one of the \n specified subject alternative names.\n\n ",non-directive
"@return <code>true</code> if the flag is enabled;\n <code>false</code> if the flag is disabled. ",non-directive
"The flag is\n <code>true</code> by default.\n ",directive
"@see #setMatchAllSubjectAltNames\n",non-directive
" Adds a name to the issuerNames criterion. ",non-directive
"The issuer distinguished\n name in the <code>X509CRL</code> must match at least one of the specified\n distinguished names.\n ",directive
"<p>\n This method allows the caller to add a name to the set of issuer names\n which <code>X509CRLs</code> may contain. ",non-directive
"The specified name is added to\n any previous value for the issuerNames criterion.\n ",non-directive
"If the specified name is a duplicate, it may be ignored.\n\n ",directive
"@param issuer the issuer as X500Principal\n ",non-directive
"@since 1.5\n",non-directive
" Sets the maxCRLNumber criterion. ",non-directive
"The <code>X509CRL</code> must have a\n CRL number extension whose value is less than or equal to the\n specified value. ",directive
"If <code>null</code>, no maxCRLNumber check will be \n done.\n\n ",directive
"@param maxCRL the maximum CRL number accepted (or <code>null</code>)\n",directive
" Returns the ASN.1 DER encoded form of the <code>qualifier</code> \n field of this <code>PolicyQualifierInfo</code>.\n\n ",non-directive
"@return the ASN.1 DER encoded bytes of the <code>qualifier</code>\n field. ",non-directive
"Note that a copy is returned, so the data is cloned each \n time this method is called.\n",directive
" Returns the valid policy represented by this node.\n\n ",non-directive
"@return the <code>String</code> OID of the valid policy\n represented by this node, or the special value \"any-policy\". ",non-directive
"For \n the root node, this method always returns the special value \"any-policy\".\n",directive
" Gets the PolicyQualifiersRejected flag. ",non-directive
"If this flag is true,\n certificates that include policy qualifiers in a certificate policies\n extension that is marked critical are rejected.\n ",directive
"If the flag is false, certificates are not rejected on this basis.\n\n ",directive
"<p> When a <code>PKIXParameters</code> object is created, this flag is \n set to true. ",directive
"This setting reflects the most common (and simplest) \n strategy for processing policy qualifiers. ",directive
"Applications that want to use\n a more sophisticated policy must set this flag to false.\n\n ",directive
"@return the current value of the PolicyQualifiersRejected flag\n ",non-directive
"@see #setPolicyQualifiersRejected\n",non-directive
" Returns the time for which the validity of the certification path\n should be determined. ",non-directive
"If <code>null</code>, the current time is used.\n ",directive
"<p>\n Note that the <code>Date</code> returned is copied to protect against \n subsequent modifications. \n\n ",directive
"@return the <code>Date</code>, or <code>null</code> if not set\n ",directive
"@see #setDate\n",non-directive
" Adds a <code>PKIXCertPathChecker</code> to the list of certification \n path checkers. ",non-directive
"See the {@link #setCertPathCheckers setCertPathCheckers}\n method for more details.\n ",directive
"<p>\n Note that the <code>PKIXCertPathChecker</code> is cloned to protect\n against subsequent modifications.\n\n ",directive
"@param checker a <code>PKIXCertPathChecker</code> to add to the list of \n checks. ",non-directive
"If <code>null</code>, the checker is ignored (not added to list).\n",directive
" Creates an instance of <code>PKIXParameters</code> with the specified\n <code>Set</code> of most-trusted CAs. ",non-directive
"Each element of the \n set is a {@link TrustAnchor TrustAnchor}.\n ",non-directive
"<p>\n Note that the <code>Set</code> is copied to protect against\n subsequent modifications.\n\n ",directive
"@param trustAnchors a <code>Set</code> of <code>TrustAnchor</code>s\n ",non-directive
" Returns a (possibly empty) collection view of the CRLs read\n from the given input stream <code>inStream</code>.\n\n ",non-directive
"<p>In order to take advantage of the specialized CRL format\n supported by this certificate factory, each element in\n the returned collection view can be typecast to the corresponding\n CRL class. ",directive
"For example, if this certificate\n factory implements X.509 CRLs, the elements in the returned\n collection can be typecast to the <code>X509CRL</code> class.\n\n ",non-directive
"<p>In the case of a certificate factory for X.509 CRLs,\n <code>inStream</code> may contain a sequence of DER-encoded CRLs.\n ",directive
"In addition, <code>inStream</code> may contain a PKCS#7 CRL\n set. ",directive
"This is a PKCS#7 <i>SignedData</i> object, with the only\n significant field being <i>crls</i>. ",directive
"In particular, the\n signature and the contents are ignored. ",directive
"This format allows multiple\n CRLs to be downloaded at once. ",directive
"If no CRLs are present,\n an empty collection is returned.\n\n ",directive
"<p>Note that if the given input stream does not support\n {@link java.io.InputStream#mark(int) mark} and\n {@link java.io.InputStream#reset() reset}, this method will\n consume the entire input stream.\n\n ",directive
"@param inStream the input stream with the CRLs.\n\n ",non-directive
"@return a (possibly empty) collection view of\n java.security.cert.CRL objects initialized with the data from the input\n stream.\n\n ",non-directive
" Creates a <code>CertificateEncodingException</code>\n with the specified cause and a detail message of\n <tt>(cause==null ? null : cause.toString())</tt>\n (which typically contains the class and detail message of\n <tt>cause</tt>).\n\n ",non-directive
"@param cause the cause (which is saved for later retrieval by the\n        {@link #getCause()} method).  ",non-directive
"(A <tt>null</tt> value is permitted,\n        and indicates that the cause is nonexistent or unknown.)\n ",directive
"@since 1.5\n",non-directive
" Verifies that this certificate was signed using the\n private key that corresponds to the specified public key.\n ",non-directive
"This method uses the signature verification engine\n supplied by the specified provider.\n\n ",directive
"@param key the PublicKey used to carry out the verification.\n ",non-directive
"@param sigProvider the name of the signature provider.\n\n ",non-directive
" Returns the encoded form of this certification path, using the\n specified encoding.\n\n ",non-directive
"@param encoding the name of the encoding to use\n ",non-directive
"@return the encoded bytes\n ",non-directive
" Removes the specified member from the group.\n \n",non-directive
"@param user the principal to remove from this group.\n \n",non-directive
"@return true if the principal was removed, or \n false if the principal was not a member.\n",non-directive
" Returns true if the passed principal is a member of the group. \n ",non-directive
"This method does a recursive search, so if a principal belongs to a \n group which is a member of this group, true is returned.\n \n",directive
"@param member the principal whose membership is to be checked.\n \n",non-directive
"@return true if the principal is a member of this group, \n false otherwise.\n",non-directive
" Sets this ACL entry to be a negative one. ",non-directive
"That is, the associated\n principal (e.g., a user or a group) will be denied the permission set\n specified in the entry.\n\n ",non-directive
"Note: ACL entries are by default positive. ",directive
"An entry becomes a\n negative entry only if this <code>setNegativePermissions</code>\n method is called on it.\n",directive
