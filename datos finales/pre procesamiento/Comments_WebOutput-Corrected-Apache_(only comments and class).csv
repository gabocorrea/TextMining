text,comment__class
" Create an {@link IndexedCollection} for a unique index.\n\n ",non-directive
"@param <K> the index object type.\n ",non-directive
"@param <C> the collection type.\n ",non-directive
"@param coll the decorated {@link Collection}.\n ",non-directive
"@param keyTransformer the {@link Transformer} for generating index keys.\n ",non-directive
"@return the created {@link IndexedCollection}.\n",non-directive
" Get the element associated with the given key.\n ",non-directive
"@param key to look up\n ",non-directive
"@return element found\n",non-directive
" Create a {@link IndexedCollection} for a unique index.\n\n ",non-directive
"@param coll the decorated {@link Collection}.\n ",non-directive
"@param keyTransformer the {@link Transformer} for generating index keys.\n",non-directive
" Returns the sum of the given lists.  ",non-directive
"This is their intersection\n subtracted from their union.\n\n ",non-directive
"@param list1  the first list \n ",non-directive
"@param list2  the second list\n ",non-directive
"@return  a new list containing the sum of those lists\n ",non-directive
" Returns a new list containing the second list appended to the\n first list.  ",non-directive
"The {@link List#addAll(Collection)} operation is\n used to append the two given lists into a new list.\n\n ",non-directive
"@param list1  the first list \n ",non-directive
"@param list2  the second list\n ",non-directive
"@return  a new list containing the union of those lists\n ",non-directive
" Generates a hash code using the algorithm specified in \n {@link java.util.List#hashCode()}.\n ",non-directive
"<p>\n This method is useful for implementing <code>List</code> when you cannot\n extend AbstractList. ",semi-directive
"The method takes Collection instances to enable other\n collection types to use the List implementation algorithm.\n \n",non-directive
"@see java.util.List#hashCode()\n ",non-directive
"@param list  the list to generate the hashCode for, may be null\n ",null-directive
"@return the hash code\n",non-directive
" Finds the first index in the given List which matches the given predicate.\n ",non-directive
"<p>\n If the input List or predicate is null, or no element of the List\n matches the predicate, -1 is returned.\n\n ",non-directive
"@param list the List to search, may be null\n ",null-directive
"@param predicate  the predicate to use, may be null\n ",null-directive
"@return the first index of an Object in the List which matches the predicate or -1 if none could be found\n",non-directive
" Interpolate key names to handle ${key} stuff\n\n ",non-directive
"@param base string to interpolate\n ",non-directive
"@return returns the key name with the ${key} substituted\n",non-directive
" Sets the property value for including other properties files.\n ",non-directive
"By default it is \"include\".\n\n ",semi-directive
"@param inc  the property name which includes another property, empty converted to null\n",non-directive
" Add a property to the configuration. ",non-directive
"If it already\n exists then the value stated here will be added\n to the configuration entry. ",semi-directive
"For example, if\n\n <code>resource.loader = file</code>\n\n is already present in the configuration and you\n\n <code>addProperty(\"resource.loader\", \"classpath\")</code>\n\n Then you will end up with a Vector like the\n following:\n\n <code>[\"file\", \"classpath\"]</code>\n\n ",non-directive
"@param key  the key to add\n ",non-directive
"@param value  the value to add\n",non-directive
" Combines an existing Hashtable with this Hashtable.\n ",non-directive
"<p>\n Warning: It will overwrite previous entries without warning.\n\n ",directive
"@param props  the properties to combine\n",non-directive
" Get the list of the keys contained in the configuration\n repository that match the specified prefix.\n\n ",non-directive
"@param prefix  the prefix to match\n ",non-directive
"@return an Iterator of keys that match the prefix\n",non-directive
" Create an ExtendedProperties object that is a subset\n of this one. ",non-directive
"Take into account duplicate keys\n by using the setProperty() in ExtendedProperties.\n\n ",semi-directive
"@param prefix  the prefix to get a subset for\n ",non-directive
"@return a new independent ExtendedProperties\n",non-directive
" Get a string associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@return The associated string.\n ",non-directive
" Get a list of properties associated with the given\n configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@return The associated properties if key is found.\n ",non-directive
" Get a list of properties associated with the given\n configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@return The associated properties if key is found.\n ",non-directive
" Get an array of strings associated with the given configuration\n key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@return The associated string array if key is found.\n ",non-directive
" Get a Vector of strings associated with the given configuration key.\n ",non-directive
"<p>\n The list is a copy of the internal data of this object, and as\n such you may alter it freely.\n\n ",directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated Vector.\n ",non-directive
" Get a List of strings associated with the given configuration key.\n ",non-directive
"<p>\n The list is a copy of the internal data of this object, and as\n such you may alter it freely.\n\n ",directive
"@param key The configuration key.\n ",non-directive
"@return The associated List object.\n ",non-directive
"@since Commons Collections 3.2\n",non-directive
" Get a List of strings associated with the given configuration key.\n ",non-directive
"<p>\n The list is a copy of the internal data of this object, and as\n such you may alter it freely.\n\n ",directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated List.\n ",non-directive
"@since Commons Collections 3.2\n",non-directive
" Get a boolean associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@return The associated boolean.\n ",non-directive
" Get a boolean associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated boolean.\n ",non-directive
" Get a boolean associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated boolean if key is found and has valid\n format, default value otherwise.\n ",non-directive
" Get a byte associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated byte.\n ",non-directive
" Get a byte associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated byte if key is found and has valid\n format, default value otherwise.\n ",non-directive
" Get a short associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@return The associated short.\n ",non-directive
" Get a short associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated short.\n ",non-directive
" Get a short associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated short if key is found and has valid\n format, default value otherwise.\n ",non-directive
" The purpose of this method is to get the configuration resource\n with the given name as an integer, or a default value.\n\n ",non-directive
"@param name The resource name\n ",non-directive
"@param def The default value of the resource.\n ",non-directive
"@return The value of the resource as an integer.\n",non-directive
" Get a int associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@return The associated int.\n ",non-directive
" Get a int associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated int.\n ",non-directive
" Get a int associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated int if key is found and has valid\n format, default value otherwise.\n ",non-directive
" Get a long associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@return The associated long.\n ",non-directive
" Get a long associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated long.\n ",non-directive
" Get a long associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated long if key is found and has valid\n format, default value otherwise.\n ",non-directive
" Get a float associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@return The associated float.\n ",non-directive
" Get a float associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated float.\n ",non-directive
" Get a float associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated float if key is found and has valid\n format, default value otherwise.\n ",non-directive
" Get a double associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@return The associated double.\n ",non-directive
" Get a double associated with the given configuration key.\n\n ",non-directive
"@param key The configuration key.\n ",non-directive
"@param defaultValue The default value.\n ",non-directive
"@return The associated double.\n ",non-directive
" Convert a standard properties class into a configuration class.\n ",non-directive
"<p>\n NOTE: From Commons Collections 3.2 this method will pick up\n any default parent Properties of the specified input object.\n ",directive
"<p>\n As with java.util.Properties(Properties), any non-String \n values will not be passed on in the new ExtendedProperties \n object.\n\n ",directive
"@param props  the properties object to convert\n ",non-directive
"@return new ExtendedProperties created from props\n",non-directive
" Remove the property specified by the key from the \n ExtendedProperties.\n\n ",non-directive
"@param key specifying the property\n ",non-directive
"@return old value of the property\n",non-directive
" Returns <code>true</code> iff\n I sort <code>true</code> values before \n <code>false</code> values.  ",non-directive
"In other words,\n returns <code>true</code> iff\n {@link #compare(Boolean,Boolean) compare(Boolean.FALSE,Boolean.TRUE)}\n returns a positive value.\n \n",non-directive
"@return the trueFirst flag\n",non-directive
" Creates a <code>BooleanComparator</code> that sorts\n <code>false</code> values before <code>true</code> values.\n ",non-directive
"<p>\n Equivalent to {@link #BooleanComparator(boolean) BooleanComparator(false)}.\n ",non-directive
"<p>\n Please use the static factory instead whenever possible.\n",semi-directive
" Returns the result of comparing the values from the transform operation.\n \n",non-directive
"@param obj1  the first object to transform then compare\n ",non-directive
"@param obj2  the second object to transform then compare\n ",non-directive
"@return negative if obj1 is less, positive if greater, zero if equal\n",non-directive
" Constructs an instance with the given Transformer and Comparator.\n \n",non-directive
"@param transformer  what will transform the arguments to <code>compare</code>\n ",non-directive
"@param decorated  the decorated Comparator\n",non-directive
" Compares two objects in reverse order.\n \n",non-directive
"@param obj1  the first object to compare\n ",non-directive
"@param obj2  the second object to compare\n ",non-directive
"@return negative if obj1 is less, positive if greater, zero if equal\n",non-directive
" Implement a hash code for this comparator that is consistent with\n {@link #equals(Object) equals}.\n \n",non-directive
"@return a suitable hash code\n ",non-directive
"@since Commons Collections 3.0\n",non-directive
" Creates a comparator that inverts the comparison\n of the given comparator.  ",non-directive
"If you pass in <code>null</code>,\n the ReverseComparator defaults to reversing the\n natural order, as per \n {@link java.util.Collections#reverseOrder()}</b>.\n \n",null-directive
"@param comparator Comparator to reverse\n",non-directive
"  Perform a comparison between two objects.  ",non-directive
"If both objects are\n  <code>null</code>, a <code>0</code> value is returned.  ",non-directive
"If one object\n  is <code>null</code> and the other is not, the result is determined on\n  whether the Comparator was constructed to have nulls as higher or lower\n  than other objects.  ",non-directive
"If neither object is <code>null</code>, an\n  underlying comparator specified in the constructor (or the default) is\n  used to compare the non-<code>null</code> objects.\n\n  ",non-directive
"@param o1  the first object to compare\n  ",non-directive
"@param o2  the object to compare it to.\n  ",non-directive
"@return <code>-1</code> if <code>o1</code> is \"lower\" than (less than,\n  before, etc.) <code>o2</code>; <code>1</code> if <code>o1</code> is\n  \"higher\" than (greater than, after, etc.) <code>o2</code>; or\n  <code>0</code> if <code>o1</code> and <code>o2</code> are equal.\n",non-directive
"  Construct an instance that sorts <code>null</code> higher than any\n  non-<code>null</code> object it is compared with.  ",non-directive
"When comparing two\n  non-<code>null</code> objects, the specified {@link Comparator} is\n  used.\n\n  ",semi-directive
"@param nonNullComparator the comparator to use when comparing two\n  non-<code>null</code> objects.  ",non-directive
"This argument cannot be\n  <code>null</code>\n\n  ",null-directive
"  Construct an instance that sorts <code>null</code> higher or lower than\n  any non-<code>null</code> object it is compared with.  ",non-directive
"When comparing\n  two non-<code>null</code> objects, the {@link ComparableComparator} is\n  used.\n\n  ",semi-directive
"@param nullsAreHigh a <code>true</code> value indicates that\n  <code>null</code> should be compared as higher than a\n  non-<code>null</code> object.  ",non-directive
"A <code>false</code> value indicates\n  that <code>null</code> should be compared as lower than a\n  non-<code>null</code> object.\n",non-directive
"  Construct an instance that sorts <code>null</code> higher or lower than\n  any non-<code>null</code> object it is compared with.  ",non-directive
"When comparing\n  two non-<code>null</code> objects, the specified {@link Comparator} is\n  used.\n\n  ",semi-directive
"@param nonNullComparator the comparator to use when comparing two\n  non-<code>null</code> objects. ",non-directive
"This argument cannot be\n  <code>null</code>\n\n  ",null-directive
"@param nullsAreHigh a <code>true</code> value indicates that\n  <code>null</code> should be compared as higher than a\n  non-<code>null</code> object.  ",non-directive
"A <code>false</code> value indicates\n  that <code>null</code> should be compared as lower than a\n  non-<code>null</code> object.\n\n  ",non-directive
" Compare the two {@link Comparable Comparable} arguments.\n ",non-directive
"This method is equivalent to:\n <pre>((Comparable)obj1).compareTo(obj2)</pre>\n \n ",semi-directive
"@param obj1  the first object to compare\n ",non-directive
"@param obj2  the second object to compare\n ",non-directive
"@return negative if obj1 is less, positive if greater, zero if equal\n ",non-directive
" Implement a hash code for this comparator that is consistent with\n {@link #equals(Object) equals}.\n\n ",non-directive
"@return a hash code for this comparator.\n ",non-directive
"@since Commons Collections 3.0\n",non-directive
" Adds a new item, which compares as equal to the given existing item.\n\n ",non-directive
"@param existingObj  an item already in the Comparator's set of\n  known objects\n ",non-directive
"@param newObj  an item to be added to the Comparator's set of\n  known objects\n ",non-directive
"@return true if newObj has been added for the first time, false if\n  it was already known to the Comparator.\n ",non-directive
" Constructs a FixedOrderComparator which uses the order of the given list\n to compare the objects.\n ",non-directive
"<p>\n The list is copied, so later changes will not affect the comparator.\n\n ",semi-directive
"@param items  the items that the comparator can compare in order\n ",non-directive
" Add a Comparator to the end of the chain using the\n given sort order\n\n ",non-directive
"@param comparator Comparator to add to the end of the chain\n ",non-directive
"@param reverse    false = forward sort order; true = reverse sort order\n",non-directive
" Replace the Comparator at the given index, maintaining\n the existing sort order.\n\n ",non-directive
"@param index      index of the Comparator to replace\n ",non-directive
"@param comparator Comparator to place at the given index\n ",non-directive
" Replace the Comparator at the given index in the\n ComparatorChain, using the given sort order\n\n ",non-directive
"@param index      index of the Comparator to replace\n ",non-directive
"@param comparator Comparator to set\n ",non-directive
"@param reverse    false = forward sort order; true = reverse sort order\n",non-directive
" Construct a Comparator chain with a single Comparator,\n sorting in the given order\n\n ",non-directive
"@param comparator First Comparator in the ComparatorChain\n ",non-directive
"@param reverse    false = forward sort; true = reverse sort\n",non-directive
" Construct a ComparatorChain from the Comparators in the\n List.  ",non-directive
"All Comparators will default to the forward\n sort order.\n\n ",semi-directive
"@param list   List of Comparators\n ",non-directive
"@see #ComparatorChain(List,BitSet)\n",non-directive
" Construct a ComparatorChain from the Comparators in the\n given List.  ",non-directive
"The sort order of each column will be\n drawn from the given BitSet.  ",non-directive
"When determining the sort\n order for Comparator at index <i>i</i> in the List,\n the ComparatorChain will call BitSet.get(<i>i</i>).\n ",semi-directive
"If that method returns <i>false</i>, the forward\n sort order is used; a return value of <i>true</i>\n indicates reverse sort order.\n\n ",non-directive
"@param list   List of Comparators.  ",non-directive
"NOTE: This constructor does not perform a\n               defensive copy of the list\n ",directive
"@param bits   Sort order for each Comparator.  ",non-directive
"Extra bits are ignored,\n               unless extra Comparators are added by another method.\n",semi-directive
" Gets a sublist of the main list.\n\n ",non-directive
"@param fromIndexInclusive  the index to start from\n ",non-directive
"@param toIndexExclusive  the index to end at\n ",non-directive
"@return the new sublist\n",non-directive
" Gets the node at a particular index.\n\n ",non-directive
"@param index  the index, starting from 0\n ",non-directive
"@param endMarkerAllowed  whether or not the end marker can be returned if\n startIndex is set to the list's size\n ",non-directive
" Creates a list iterator for the sublist.\n\n ",non-directive
"@param subList  the sublist to get an iterator for\n ",non-directive
"@param fromIndex  the index to start from, relative to the sublist\n",non-directive
" Gets the value of the node.\n\n ",non-directive
"@return the value\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Sets the value of the node.\n\n ",non-directive
"@param value  the value\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Gets the previous node.\n\n ",non-directive
"@return the previous node\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Sets the previous node.\n\n ",non-directive
"@param previous  the previous node\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Sets the next node.\n\n ",non-directive
"@param next  the next node\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Create a ListIterator for a list.\n\n ",non-directive
"@param parent  the parent list\n ",non-directive
"@param fromIndex  the index to start at\n",non-directive
" Adds an element to a specific index in the list if it is not already present.\n ",non-directive
"<p>\n <i>(Violation)</i>\n The <code>List</code> interface makes the assumption that the element is\n always inserted. ",directive
"This may not happen with this implementation.\n\n ",directive
"@param index  the index to insert at\n ",non-directive
"@param object  the object to add\n",non-directive
" Adds a collection of objects to the end of the list avoiding duplicates.\n ",non-directive
"<p>\n Only elements that are not already in this list will be added, and\n duplicates from the specified collection will be ignored.\n ",directive
"<p>\n <i>(Violation)</i>\n The <code>List</code> interface makes the assumption that the elements\n are always inserted. ",directive
"This may not happen with this implementation.\n\n ",directive
"@param coll  the collection to add in iterator order\n ",non-directive
"@return true if this collection changed\n",non-directive
" Sets the value at the specified index avoiding duplicates.\n ",non-directive
"<p>\n The object is set into the specified index.\n ",non-directive
"Afterwards, any previous duplicate is removed\n If the object is not already in the list then a normal set occurs.\n ",semi-directive
"If it is present, then the old version is removed.\n\n ",semi-directive
"@param index  the index to insert at\n ",non-directive
"@param object  the object to set\n ",non-directive
"@return the previous object\n",non-directive
" Gets the element at the specified index.\n\n ",non-directive
"@param index  the index to retrieve\n ",non-directive
"@return the element at the specified index\n",non-directive
" Gets a ListIterator over the list.\n\n ",non-directive
"@param fromIndex  the index to start from\n ",non-directive
"@return the new iterator\n",non-directive
" Adds a new element to the list.\n\n ",non-directive
"@param index  the index to add before\n ",non-directive
"@param obj  the element to add\n",non-directive
" Sets the element at the specified index.\n\n ",non-directive
"@param index  the index to set\n ",non-directive
"@param obj  the object to store at the specified index\n ",non-directive
"@return the previous object at that index\n ",non-directive
" Removes the element at the specified index.\n\n ",non-directive
"@param index  the index to remove\n ",non-directive
"@return the previous object at that index\n",non-directive
" Decorate the add method to perform the growth behaviour.\n ",non-directive
"<p>\n If the requested index is greater than the current size, the list will\n grow to the new size. ",semi-directive
"Indices between the old size and the requested\n size will be filled with <code>null</code>.\n ",directive
"<p>\n If the index is less than the current size, the value will be added to\n the underlying list directly.\n ",semi-directive
"If the index is less than zero, the underlying list is called, which\n will probably throw an IndexOutOfBoundsException.\n\n ",directive
"@param index  the index to add at\n ",non-directive
"@param element  the object to add at the specified index\n ",non-directive
" Decorate the addAll method to perform the growth behaviour.\n ",non-directive
"<p>\n If the requested index is greater than the current size, the list will\n grow to the new size. ",semi-directive
"Indices between the old size and the requested\n size will be filled with <code>null</code>.\n ",directive
"<p>\n If the index is less than the current size, the values will be added to\n the underlying list directly.\n ",semi-directive
"If the index is less than zero, the underlying list is called, which\n will probably throw an IndexOutOfBoundsException.\n\n ",directive
"@param index  the index to add at\n ",non-directive
"@param coll  the collection to add at the specified index\n ",non-directive
"@return true if the list changed\n ",non-directive
" Decorate the set method to perform the growth behaviour.\n ",non-directive
"<p>\n If the requested index is greater than the current size, the list will\n grow to the new size. ",semi-directive
"Indices between the old size and the requested\n size will be filled with <code>null</code>.\n ",directive
"<p>\n If the index is less than the current size, the value will be set onto\n the underlying list directly.\n ",semi-directive
"If the index is less than zero, the underlying list is called, which\n will probably throw an IndexOutOfBoundsException.\n\n ",directive
"@param index  the index to set\n ",non-directive
"@param element  the object to set at the specified index\n ",non-directive
"@return the object previously at that index\n ",non-directive
" Creates a list iterator for the sublist.\n \n",non-directive
"@param subList  the sublist to get an iterator for\n ",non-directive
"@param fromIndex  the index to start from, relative to the sublist\n",non-directive
" Adds an object to the list.\n ",non-directive
"The object added here will be the new 'previous' in the iterator.\n \n",semi-directive
"@param obj  the object to add\n",non-directive
" Adds a node to the cache, if the cache isn't full.\n ",non-directive
"The node's contents are cleared to so they can be garbage collected.\n \n",semi-directive
"@param node  the node to add to the cache\n",non-directive
" Decorate the get method to perform the lazy behaviour.\n ",non-directive
"<p>\n If the requested index is greater than the current size, the list will \n grow to the new size and a new object will be returned from the factory.\n ",semi-directive
"Indexes in-between the old size and the requested size are left with a \n placeholder that is replaced with a factory object when requested.\n \n",semi-directive
"@param index  the index to retrieve\n",non-directive
" Factory to create the transformer.\n ",non-directive
"<p>\n If the map is null, a transformer that always returns null is returned.\n\n ",null-directive
"@param map the map, not cloned\n ",non-directive
"@return the transformer\n",non-directive
" Transforms the input to result by looking it up in a <code>Map</code>.\n\n ",non-directive
"@param input  the input object to transform\n ",non-directive
"@return the transformed result\n",non-directive
" Gets the map to lookup in.\n\n ",non-directive
"@return the map\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Factory method that performs validation.\n \n",non-directive
"@param factory  the factory to call, not null\n ",null-directive
"@return the <code>factory</code> transformer\n ",non-directive
" Transforms the input by ignoring the input and returning the result of\n calling the decorated factory.\n \n",non-directive
"@param input  the input object to transform\n ",non-directive
"@return the transformed result\n",non-directive
" Gets the factory.\n \n",non-directive
"@return the factory\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor that performs no validation.\n ",non-directive
"Use <code>getInstance</code> if you want that.\n \n",non-directive
"@param factory  the factory to call, not null\n",null-directive
" Constructor that performs no validation.\n ",non-directive
"Use <code>getInstance</code> if you want that.\n \n",non-directive
"@param classToInstantiate  the class to instantiate\n",non-directive
" Factory returning the singleton instance.\n\n ",non-directive
"@return the singleton instance\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Evaluates the predicate returning true if the input object hasn't been\n received yet.\n\n ",non-directive
"@param object  the input object\n ",non-directive
"@return true if this is the first time the object is seen\n",non-directive
" Factory returning the singleton instance.\n\n ",non-directive
"@return the singleton instance\n ",non-directive
"@since Commons Collections 3.1\n ",non-directive
"@deprecated\n",directive
" Factory returning the singleton instance.\n\n ",non-directive
"@return the singleton instance\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Evaluates the predicate returning true always.\n\n ",non-directive
"@param object  the input object\n ",non-directive
"@return true always\n",non-directive
" Factory to create the predicate.\n ",non-directive
"<p>\n If the collection is size zero, the predicate always returns true.\n\n ",semi-directive
"@param predicates  the predicates to check, cloned, not null\n ",null-directive
"@return the <code>one</code> predicate\n ",non-directive
" Gets the predicates, do not modify the array.\n\n ",non-directive
"@return the predicates\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n\n ",semi-directive
"@param predicates  the predicates to check, not cloned, not null\n",null-directive
" Gets the transformer.\n \n",non-directive
"@return the transformer\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor that performs no validation.\n ",non-directive
"Use <code>getInstance</code> if you want that.\n \n",non-directive
"@param transformer  the transformer to call, not null\n",semi-directive
" Gets the predicates, do not modify the array.\n\n ",non-directive
"@return the predicates\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Gets the closures, do not modify the array.\n\n ",non-directive
"@return the closures\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Gets the default closure.\n\n ",non-directive
"@return the default closure\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Factory method that performs validation.\n \n",non-directive
"@param closure1  the first closure, not null\n ",null-directive
"@param closure2  the second closure, not null\n ",null-directive
"@return the <code>chained</code> closure\n ",non-directive
" Factory to create the predicate.\n\n ",non-directive
"@param predicate1  the first predicate to check, not null\n ",null-directive
"@param predicate2  the second predicate to check, not null\n ",null-directive
"@return the <code>and</code> predicate\n ",non-directive
" Gets the two predicates being decorated as an array.\n\n ",non-directive
"@return the predicates\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n\n ",semi-directive
"@param predicate1  the first predicate to check, not null\n ",null-directive
"@param predicate2  the second predicate to check, not null\n",null-directive
" Factory method that performs validation.\n \n",non-directive
"@param closure  the closure to call, not null\n ",null-directive
"@return the <code>closure</code> transformer\n ",non-directive
" Transforms the input to result by executing a closure.\n \n",non-directive
"@param input  the input object to transform\n ",non-directive
"@return the transformed result\n",non-directive
" Gets the closure.\n \n",non-directive
"@return the closure\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Factory to create the identity predicate.\n \n",non-directive
"@param object  the object to compare to\n ",non-directive
"@return the predicate\n ",non-directive
"@deprecated use {@link #equalPredicate(Object)} instead.\n",null-directive
" Factory to create the identity predicate.\n \n",non-directive
"@param object  the object to compare to\n ",non-directive
"@return the predicate\n ",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n \n",semi-directive
"@param object  the object to compare to\n",non-directive
" Factory to create the null false predicate.\n\n ",non-directive
"@param predicate  the predicate to decorate, not null\n ",null-directive
"@return the predicate\n ",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n\n ",semi-directive
"@param predicate  the predicate to call after the null check\n",non-directive
" Factory to create the predicate.\n\n ",non-directive
"@param transformer  the transformer to decorate\n ",non-directive
"@return the predicate\n ",non-directive
" Gets the transformer.\n\n ",non-directive
"@return the transformer\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n\n ",semi-directive
"@param transformer  the transformer to decorate\n",non-directive
" Factory returning the singleton instance.\n \n",non-directive
"@return the singleton instance\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Gets an instance of this transformer calling a specific method with specific values.\n \n",non-directive
"@param methodName  the method name to call\n ",non-directive
"@param paramTypes  the parameter types of the method\n ",non-directive
"@param args  the arguments to pass to the method\n ",non-directive
"@return an invoker transformer\n",non-directive
" Factory to create the identity predicate.\n\n ",non-directive
"@param type  the type to check for, may not be null\n ",null-directive
"@return the predicate\n ",non-directive
" Evaluates the predicate returning true if the input object is of the correct type.\n\n ",non-directive
"@param object  the input object\n ",non-directive
"@return true if input is of stored type\n",non-directive
" Evaluates the predicate returning the result of the decorated predicate\n once the input has been transformed\n\n ",non-directive
"@param object  the input object which will be transformed\n ",non-directive
"@return true if decorated predicate returns true\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n\n ",semi-directive
"@param transformer  the transformer to use\n ",non-directive
"@param predicate  the predicate to decorate\n",non-directive
" Factory to create the predicate.\n ",non-directive
"<p>\n If the array is size zero, the predicate always returns false.\n ",directive
"If the array is size one, then that predicate is returned.\n\n ",directive
"@param predicates  the predicates to check, cloned, not null\n ",null-directive
"@return the <code>any</code> predicate\n ",non-directive
" Factory to create the predicate.\n ",non-directive
"<p>\n If the collection is size zero, the predicate always returns false.\n ",directive
"If the collection is size one, then that predicate is returned.\n\n ",directive
"@param predicates  the predicates to check, cloned, not null\n ",null-directive
"@return the <code>all</code> predicate\n ",non-directive
" Evaluates the predicate returning true if any predicate returns true.\n\n ",non-directive
"@param object  the input object\n ",non-directive
"@return true if any decorated predicate return true\n",non-directive
" Gets the predicates, do not modify the array.\n\n ",semi-directive
"@return the predicates\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n\n ",semi-directive
"@param predicates  the predicates to check, not cloned, not null\n",null-directive
" Factory method that performs validation.\n \n",non-directive
"@param predicate  predicate to switch on\n ",non-directive
"@param trueClosure  closure used if true\n ",non-directive
"@param falseClosure  closure used if false\n ",non-directive
"@return the <code>if</code> closure\n ",non-directive
" Gets the predicate.\n \n",non-directive
"@return the predicate\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Gets the closure called when true.\n \n",non-directive
"@return the closure\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Gets the closure called when false.\n \n",non-directive
"@return the closure\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n ",semi-directive
"<p>\n This constructor creates a closure that performs no action when\n the predicate is false.\n \n",non-directive
"@param predicate  predicate to switch on, not null\n ",null-directive
"@param trueClosure  closure used if true, not null\n ",null-directive
"@since Commons Collections 3.2\n",non-directive
" Factory to create the identity predicate.\n\n ",non-directive
"@param object  the object to compare to\n ",non-directive
"@return the predicate\n ",non-directive
" Gets the value.\n\n ",non-directive
"@return the value\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n\n ",semi-directive
"@param object  the object to compare to\n",non-directive
" Transforms the input to result by doing nothing.\n\n ",non-directive
"@param input  the input object to transform\n ",non-directive
"@return the transformed result which is the input\n",non-directive
" Factory method that performs validation.\n ",non-directive
"<p>\n A null closure or zero count returns the <code>NOPClosure</code>.\n ",non-directive
"A count of one returns the specified closure.\n \n",non-directive
"@param count  the number of times to execute the closure\n ",non-directive
"@param closure  the closure to execute, not null\n ",null-directive
"@return the <code>for</code> closure\n",non-directive
" Gets the closure.\n \n",non-directive
"@return the closure\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n \n",semi-directive
"@param count  the number of times to execute the closure\n ",non-directive
"@param closure  the closure to execute, not null\n",null-directive
" Factory returning the singleton instance.\n\n ",non-directive
"@return the singleton instance\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Factory to create the predicate.\n ",non-directive
"<p>\n If the collection is size zero, the predicate always returns true.\n ",non-directive
"If the collection is size one, then that predicate is returned.\n\n ",non-directive
"@param predicates  the predicates to check, cloned, not null\n ",null-directive
"@return the <code>all</code> predicate\n ",non-directive
" Evaluates the predicate returning true if all predicates return true.\n \n",non-directive
"@param object  the input object\n ",non-directive
"@return true if all decorated predicates return true\n",non-directive
" Gets the predicates, do not modify the array.\n \n",non-directive
"@return the predicates\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n\n ",semi-directive
"@param predicates  the predicates to check, not cloned, not null\n",null-directive
" Transforms the input to result by calling a predicate.\n \n",non-directive
"@param input  the input object to transform\n ",non-directive
"@return the transformed result\n",non-directive
" Gets the predicate.\n \n",non-directive
"@return the predicate\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n \n",semi-directive
"@param predicate  the predicate to call, not null\n",null-directive
" Factory returning the singleton instance.\n \n",non-directive
"@return the singleton instance\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Transforms the input to result by cloning it.\n \n",non-directive
"@param input  the input object to transform\n ",non-directive
"@return the transformed result\n",non-directive
" Get a typed null instance.\n ",non-directive
"@param <I>\n ",non-directive
"@param <O>\n ",non-directive
"@return Transformer<I, O> that always returns null.\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n \n",semi-directive
"@param constantToReturn  the constant to return each time\n",non-directive
" Gets the transformers, do not modify the array.\n \n",semi-directive
"@return the transformers\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Gets the default transformer.\n \n",non-directive
"@return the default transformer\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Get a typed instance.\n\n ",non-directive
"@return the singleton instance\n ",non-directive
"@since Commons Collections 3.1\n ",non-directive
"@deprecated use {@link #falsePredicate()} instead.\n",directive
" Get a typed instance.\n\n ",non-directive
"@return the singleton instance\n ",non-directive
"@since Commons Collections 5\n",non-directive
" Evaluates the predicate returning false always.\n\n ",non-directive
"@param object  the input object\n ",non-directive
"@return false always\n",non-directive
" Get a typed no-arg instance.\n ",non-directive
"@param <T>\n ",non-directive
"@return Transformer<Class<? extends T>, T>\n",non-directive
" Transforms the input Class object to a result by instantiation.\n\n ",non-directive
"@param input  the input object to transform\n ",non-directive
"@return the transformed result\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n\n ",semi-directive
"@param paramTypes  the constructor parameter types, not cloned\n ",semi-directive
"@param args  the constructor arguments, not cloned\n",semi-directive
" Evaluates the predicate returning true if the object does not equal null.\n\n ",non-directive
"@param object  the object to evaluate\n ",non-directive
"@return true if not null\n",null-directive
" Factory to create the not predicate.\n \n",non-directive
"@param predicate  the predicate to decorate, not null\n ",null-directive
"@return the predicate\n ",non-directive
" Evaluates the predicate returning the opposite to the stored predicate.\n \n",non-directive
"@param object  the input object\n ",non-directive
"@return true if predicate returns false\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n \n",semi-directive
"@param predicate  the predicate to call after the null check\n",non-directive
" Gets the predicate in use.\n \n",non-directive
"@return the predicate\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Gets the closure.\n \n",non-directive
"@return the closure\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Is the loop a do-while loop.\n \n",non-directive
"@return true is do-while, false if while\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Create a new Transformer that calls each transformer in turn, passing the \n result into the next transformer. ",non-directive
"The ordering is that of the iterator()\n method on the collection.\n \n",directive
"@param transformers  a collection of transformers to chain\n ",non-directive
"@return the <code>chained</code> transformer\n ",non-directive
" Factory method that performs validation.\n \n",non-directive
"@param transformer1  the first transformer, not null\n ",null-directive
"@param transformer2  the second transformer, not null\n ",null-directive
"@return the <code>chained</code> transformer\n ",non-directive
" Transforms the input to result via each decorated transformer\n \n ",non-directive
"@param object  the input object passed to the first transformer\n ",non-directive
"@return the transformed result\n",non-directive
" Gets the transformers, do not modify the array.\n ",non-directive
"@return the transformers\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Factory to create the predicate.\n\n ",non-directive
"@param predicates  the predicates to check, cloned, not null\n ",null-directive
"@return the <code>one</code> predicate\n ",non-directive
" Evaluates the predicate returning true if only one decorated predicate\n returns true.\n \n",non-directive
"@param object  the input object\n ",non-directive
"@return true if only one decorated predicate returns true\n",non-directive
" Gets the predicates, do not modify the array.\n \n",non-directive
"@return the predicates\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n \n",semi-directive
"@param predicates  the predicates to check, not cloned, not null\n",null-directive
" Evaluates the two arguments for their equality.\n \n",non-directive
"@param o1 the first object to be equated.\n ",non-directive
"@param o2 the second object to be equated.\n ",non-directive
"@return whether the two objects are equal.\n",non-directive
" Calculates the hash for the object, based on the method of equality used in the equate\n method. ",non-directive
"This is used for classes that delegate their {@link #equals(Object)} method to an\n Equator (and so must also delegate their {@link #hashCode()} method), or for implementations\n of {@link HashedMap} that use an Equator for the key objects.\n \n",directive
"@param o the object to calculate the hash for.\n ",non-directive
"@return the hash of the object.\n",non-directive
" Factory to create the null true predicate.\n \n",non-directive
"@param predicate  the predicate to decorate, not null\n ",null-directive
"@return the predicate\n ",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n \n",semi-directive
"@param predicate  the predicate to call after the null check\n",non-directive
" Factory to create the null exception predicate.\n \n",non-directive
"@param predicate  the predicate to decorate, not null\n ",null-directive
"@return the predicate\n ",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n \n",semi-directive
"@param predicate  the predicate to call after the null check\n",non-directive
" Factory returning the singleton instance.\n\n ",non-directive
"@return the singleton instance\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Factory method that performs validation.\n\n ",non-directive
"@param constantToReturn  the constant object to return each time in the factory\n ",non-directive
"@return the <code>constant</code> factory.\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n \n",semi-directive
"@param constantToReturn  the constant to return each time\n",non-directive
" Factory returning the singleton instance.\n\n ",non-directive
"@return the singleton instance\n ",non-directive
"@since Commons Collections 3.1\n ",non-directive
"@deprecated use {@link #nullPredicate()} instead.\n",directive
" Factory returning the singleton instance.\n\n ",non-directive
"@return the singleton instance\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Evaluates the predicate returning true if the input is null.\n\n ",non-directive
"@param object  the input object\n ",non-directive
"@return true if input is null\n",non-directive
" Evaluates the predicate returning true if either predicate returns true.\n\n ",non-directive
"@param object  the input object\n ",non-directive
"@return true if either decorated predicate returns true\n",non-directive
" Gets the two predicates being decorated as an array.\n\n ",non-directive
"@return the predicates\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor that performs no validation.\n ",semi-directive
"Use <code>getInstance</code> if you want that.\n\n ",semi-directive
"@param predicate1  the first predicate to check, not null\n ",null-directive
"@param predicate2  the second predicate to check, not null\n",null-directive
"\n Sets the iterator for this iterator to use.\n ",non-directive
"If iteration has started, this effectively resets the iterator.\n \n",non-directive
"@param iterator  the iterator to use\n",non-directive
" Removes the last retrieved element if a collection is attached.\n ",non-directive
"<p>\n Functions if an associated <code>Collection</code> is known.\n ",non-directive
"If so, the first occurrence of the last returned object from this\n iterator will be removed from the collection.\n\n ",non-directive
" Constructs a new <code>EnumerationIterator</code> that will remove\n elements from the specified collection.\n\n ",non-directive
"@param enumeration  the enumeration to use\n ",non-directive
"@param collection  the collection to remove elements from\n",non-directive
" Get a typed resettable empty iterator instance.\n ",non-directive
"@param <E>\n ",non-directive
"@return ResettableIterator<E>\n",non-directive
" Get a typed empty iterator instance.\n ",non-directive
"@param <E>\n ",non-directive
"@return Iterator<E>\n",non-directive
" Constructs an ObjectArrayIterator that will iterate over the values in the\n specified array from a specific start index.\n\n ",non-directive
"@param array  the array to iterate over\n ",non-directive
"@param start  the index to start iterating at\n ",non-directive
" Constructs an ArrayListIterator that will iterate over the values in the\n specified array from a specific start index.\n\n ",non-directive
"@param array  the array to iterate over\n ",non-directive
"@param startIndex  the index to start iterating at\n ",non-directive
" Returns whether this iterator has any more elements.\n ",non-directive
"<p>\n Returns false only if the list originally had zero elements, or\n all elements have been {@link #remove removed}.\n\n ",non-directive
"@return <code>true</code> if there are more elements\n",non-directive
" Returns the next object in the list.\n ",non-directive
"<p>\n If at the end of the list, returns the first element.\n\n ",directive
"@return the object after the last element returned\n ",non-directive
" Returns whether this iterator has any more previous elements.\n ",non-directive
"<p>\n Returns false only if the list originally had zero elements, or\n all elements have been {@link #remove removed}.\n\n ",non-directive
"@return <code>true</code> if there are more elements\n",non-directive
"\n Sets the iterator for this iterator to use.\n ",non-directive
"If iteration has started, this effectively resets the iterator.\n\n ",directive
"@param iterator  the iterator to use\n",non-directive
" Get the next object from the iterator.\n ",non-directive
"<p>\n This returns the single object if it hasn't been returned yet.\n\n ",directive
"@return the single object\n ",non-directive
" Constructs a new <code>SingletonIterator</code> optionally choosing if\n <code>remove</code> is a permitted operation.\n\n ",non-directive
"@param object  the single object to return from the iterator\n ",non-directive
"@param removeAllowed  true if remove is allowed\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Typed instance of the iterator.\n ",non-directive
"@param <E>\n ",non-directive
"@return OrderedIterator<E>\n",non-directive
" Constructs an ObjectArrayListIterator that will iterate over the values in the\n specified array from a specific start index.\n\n ",non-directive
"@param array  the array to iterate over\n ",non-directive
"@param start  the index to start iterating at\n ",non-directive
" Constructs a ObjectGraphIterator that will handle an iterator of iterators.\n ",non-directive
"<p>\n This constructor exists for convenience to emphasise that this class can\n be used to iterate over nested iterators. ",semi-directive
"That is to say that the iterator\n passed in here contains other iterators, which may in turn contain further\n iterators.\n \n",semi-directive
"@param rootIterator  the root iterator, null will result in an empty iterator\n",null-directive
" Checks whether the index is valid or not.\n \n",non-directive
"@param bound  the index to check\n ",non-directive
"@param type  the index type (for error messages)\n ",non-directive
" Constructs an ArrayIterator that will iterate over the values in the\n specified array from a specific start index.\n\n ",non-directive
"@param array  the array to iterate over.\n ",non-directive
"@param startIndex  the index to start iterating at.\n ",non-directive
" Construct an ArrayIterator that will iterate over a range of values \n in the specified array.\n\n ",non-directive
"@param array  the array to iterate over.\n ",non-directive
"@param startIndex  the index to start iterating at.\n ",non-directive
"@param endIndex  the index to finish iterating at.\n ",non-directive
" Get a typed instance of the iterator.\n ",non-directive
"@param <E>\n ",non-directive
"@return {@link ListIterator}<E>\n",non-directive
" Get a typed instance of the iterator.\n ",non-directive
"@param <K>\n ",non-directive
"@param <V>\n ",non-directive
"@return {@link OrderedMapIterator}<K, V>\n",non-directive
" Gets the next object from the iteration, transforming it using the\n current transformer. ",non-directive
"If the transformer is null, no transformation\n occurs and the object from the iterator is returned directly.\n \n",non-directive
"@return the next object\n ",non-directive
"\n Sets the iterator for this iterator to use.\n ",non-directive
"If iteration has started, this effectively resets the iterator.\n \n",directive
"@param iterator  the iterator to use\n",non-directive
"\n Sets the transformer this the iterator to use.\n ",non-directive
"A null transformer is a no-op transformer.\n \n",null-directive
"@param transformer  the transformer to use\n",non-directive
" Get the next object from the iterator.\n ",non-directive
"<p>\n This returns the single object if it hasn't been returned yet.\n\n ",directive
"@return the single object\n ",non-directive
" Get the previous object from the iterator.\n ",non-directive
"<p>\n This returns the single object if it has been returned.\n\n ",directive
"@return the single object\n ",non-directive
" Sets the value associated with the current key.\n\n ",non-directive
"@param value  the new value\n ",non-directive
"@return the previous value\n ",non-directive
" Decorates the specified iterator such that it cannot be modified.\n ",non-directive
"<p>\n If the iterator is already unmodifiable it is returned directly.\n\n ",directive
"@param iterator  the iterator to decorate\n ",non-directive
"\n Has the iterator any more elements.\n ",non-directive
"<p>\n Returns false only if the collection originally had zero elements, or\n all the elements have been {@link #remove removed}.\n \n",directive
"@return <code>true</code> if there are more elements\n",non-directive
" Constructor that wraps a collection.\n ",non-directive
"<p>\n There is no way to reset an Iterator instance without recreating it from\n the original source, so the Collection must be passed in.\n \n",directive
"@param coll  the collection to wrap\n ",non-directive
" Set the Iterator at the given index\n \n ",non-directive
"@param index index of the Iterator to replace\n ",non-directive
"@param iterator Iterator to place at the given index\n ",non-directive
" Constructs a new <code>IteratorChain</code> over the array of iterators.\n ",non-directive
"<p>\n This method takes an array of iterators. ",non-directive
"The newly constructed iterator\n will iterate through each one of the input iterators in turn.\n \n",semi-directive
"@param iteratorChain the array of iterators, not null\n ",null-directive
" Constructs a new <code>IteratorChain</code> over the collection of\n iterators.\n ",non-directive
"<p>\n This method takes a collection of iterators. ",non-directive
"The newly constructed\n iterator will iterate through each one of the input iterators in turn.\n \n",semi-directive
"@param iteratorChain the collection of iterators, not null\n ",null-directive
" Sets the iterator at the given index.\n \n",non-directive
"@param index index of the Iterator to replace\n ",non-directive
"@param iterator Iterator to place at the given index\n ",non-directive
" Constructs a new <code>CollatingIterator</code> that will used the\n specified comparator for ordering. ",non-directive
"Child iterators will have to be\n manually added using the {@link #addIterator(Iterator)} method.\n \n",directive
"@param comp the comparator to use to sort, or null to use natural sort\n order\n",non-directive
" Constructs a new <code>CollatingIterator</code> that will use the\n specified comparator to provide ordered iteration over the collection of\n iterators.\n \n",non-directive
"@param comp the comparator to use to sort, or null to use natural sort\n order\n ",null-directive
"@param iterators the collection of iterators\n ",non-directive
" Gets the previous element.\n ",non-directive
"The next element is the previous in the list.\n\n ",non-directive
"@return the previous element in the iterator\n",non-directive
" Transforms a key.\n ",non-directive
"<p>\n The transformer itself may throw an exception if necessary.\n\n ",directive
"@param object the object to transform\n ",non-directive
" Transforms a value.\n ",non-directive
"<p>\n The transformer itself may throw an exception if necessary.\n\n ",directive
"@param object the object to transform\n ",non-directive
" Adds the given element to this buffer.\n\n ",non-directive
"@param obj  the element to add\n ",non-directive
"@return true, always\n ",non-directive
" Adds an element to the buffer.\n ",non-directive
"<p>\n The element added will be sorted according to the comparator in use.\n\n ",non-directive
"@param element  the element to be added\n ",non-directive
"@return true always\n",non-directive
" Percolates element down heap from the position given by the index.\n ",non-directive
"<p>\n Assumes it is a minimum heap.\n\n ",directive
"@param index the index for the element\n",non-directive
" Percolates element down heap from the position given by the index.\n ",non-directive
"<p>\n Assumes it is a maximum heap.\n\n ",directive
"@param index the index of the element\n",non-directive
" Percolates element up heap from the position given by the index.\n ",non-directive
"<p>\n Assumes it is a minimum heap.\n\n ",directive
"@param index the index of the element to be percolated up\n",non-directive
" Percolates a new element up heap from the bottom.\n ",non-directive
"<p>\n Assumes it is a minimum heap.\n\n ",directive
"@param element the element\n",non-directive
" Percolates element up heap from from the position given by the index.\n ",non-directive
"<p>\n Assume it is a maximum heap.\n\n ",directive
"@param index the index of the element to be percolated up\n",non-directive
" Percolates a new element up heap from the bottom.\n ",non-directive
"<p>\n Assume it is a maximum heap.\n\n ",directive
"@param element the element\n",non-directive
" Compares two objects using the comparator if specified, or the\n natural order otherwise.\n \n",non-directive
"@param a  the first object\n ",non-directive
"@param b  the second object\n ",non-directive
"@return -ve if a less than b, 0 if they are equal, +ve if a greater than b\n",non-directive
" Returns a string representation of this heap.  ",non-directive
"The returned string\n is similar to those produced by standard JDK collections.\n\n ",semi-directive
"@return a string representation of this heap\n",non-directive
" Constructs a new <code>BoundedFifoBuffer</code> big enough to hold all\n of the elements in the specified collection. ",non-directive
"That collection's\n elements will also be added to the buffer.\n\n ",non-directive
"@param coll  the collection whose elements to add, may not be null\n ",null-directive
" If the buffer is full, the least recently added element is discarded so\n that a new element can be inserted.\n\n ",directive
"@param element the element to add\n ",non-directive
"@return true, always\n",non-directive
" Constructor that creates a buffer from the specified collection.\n ",non-directive
"The collection size also sets the buffer size\n\n ",non-directive
"@param coll  the collection to copy into the buffer, may not be null\n ",null-directive
" Gets the next value from the buffer, waiting until an object is\n added for up to the specified timeout value if the buffer is empty.\n\n ",non-directive
"@param timeout  the timeout value in milliseconds\n ",non-directive
"@since Commons Collections 3.2\n",non-directive
" Removes the next value from the buffer, waiting until an object is\n added for up to the specified timeout value if the buffer is empty.\n\n ",non-directive
"@param timeout  the timeout value in milliseconds\n ",non-directive
"@since Commons Collections 3.2\n",non-directive
" Creates a new instance of this object.\n\n ",non-directive
"@param normalMap  the normal direction map\n ",non-directive
"@param reverseMap  the reverse direction map\n ",non-directive
"@param inverseMap  the inverse BidiMap\n ",non-directive
"@return new bidi map\n",non-directive
" Obtains an ordered map iterator.\n ",non-directive
"<p>\n This implementation copies the elements to an ArrayList in order to\n provide the forward/backward behaviour.\n\n ",directive
"@return a new ordered map iterator\n",non-directive
" Constructor.\n ",non-directive
"@param bidi  the parent bidi map\n ",non-directive
"@param sm  the subMap sorted map\n",non-directive
" Creates a new instance of this object.\n \n",non-directive
"@param normalMap  the normal direction map\n ",non-directive
"@param reverseMap  the reverse direction map\n ",non-directive
"@param inverseBidiMap  the inverse BidiMap\n ",non-directive
"@return new bidi map\n",non-directive
"\n Constructs a <code>HashBidiMap</code> that decorates the specified maps.\n\n ",non-directive
"@param normalMap  the normal direction map\n ",non-directive
"@param reverseMap  the reverse direction map\n ",non-directive
"@param inverseBidiMap  the inverse BidiMap\n",non-directive
" Returns a set view of the keys contained in this map in key order.\n ",non-directive
"<p>\n The set is backed by the map, so changes to the map are reflected in\n the set, and vice-versa. ",directive
"If the map is modified while an iteration over\n the set is in progress, the results of the iteration are undefined.\n ",directive
"<p>\n The set supports element removal, which removes the corresponding mapping\n from the map. ",non-directive
"It does not support the add or addAll operations.\n\n ",directive
"@return a set view of the keys contained in this map.\n",non-directive
" Returns a set view of the entries contained in this map in key order.\n ",non-directive
"For simple iteration through the map, the MapIterator is quicker.\n ",semi-directive
"<p>\n The set is backed by the map, so changes to the map are reflected in\n the set, and vice-versa. ",directive
"If the map is modified while an iteration over\n the set is in progress, the results of the iteration are undefined.\n ",directive
"<p>\n The set supports element removal, which removes the corresponding mapping\n from the map. ",non-directive
"It does not support the add or addAll operations.\n ",directive
"The returned MapEntry objects do not support setValue.\n\n ",directive
"@return a set view of the values contained in this map.\n",non-directive
" Compares for equals as per the API.\n\n ",non-directive
"@param obj  the object to compare to\n ",non-directive
"@return true if equal\n",non-directive
" Creates a new instance of the subclass.\n\n ",non-directive
"@param normalMap  the normal direction map\n ",non-directive
"@param reverseMap  the reverse direction map\n ",non-directive
"@param inverseMap  this map, which is the inverse in the new map\n ",non-directive
"@return the inverse map\n",non-directive
" Gets a keySet view of the map.\n ",non-directive
"Changes made on the view are reflected in the map.\n ",directive
"The set supports remove and clear but not add.\n\n ",directive
"@return the keySet view\n",non-directive
" Gets a values view of the map.\n ",non-directive
"Changes made on the view are reflected in the map.\n ",directive
"The set supports remove and clear but not add.\n\n ",directive
"@return the values view\n",non-directive
" Gets an entrySet view of the map.\n ",non-directive
"Changes made on the set are reflected in the map.\n ",directive
"The set supports remove and clear but not add.\n ",directive
"<p>\n The Map Entry setValue() method only allow a new value to be set.\n ",directive
"If the value being set is already in the map, an IllegalArgumentException\n is thrown (as setValue cannot change the size of the map).\n\n ",directive
"@return the entrySet view\n",non-directive
" Creates an empty map, initialised by <code>createMap</code>.\n ",non-directive
"<p>\n This constructor remains in place for deserialization.\n ",non-directive
"All other usage is deprecated in favour of\n {@link #AbstractDualBidiMap(Map, Map)}.\n",directive
" Constructor.\n ",non-directive
"@param iterator  the iterator to decorate\n ",non-directive
"@param parent  the parent map\n",non-directive
" Constructor.\n ",non-directive
"@param entry  the entry to decorate\n ",non-directive
"@param parent  the parent map\n",non-directive
" Sets the value associated with the key direct onto the map.\n \n",non-directive
"@param value  the new value\n ",non-directive
"@return the old value\n ",non-directive
" Gets a hashCode compatible with the equals method.\n ",non-directive
"<p>\n Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}\n \n ",non-directive
"@return a suitable hash code\n",non-directive
" Constructs a new entry with the given Map and key.\n\n ",non-directive
"@param map  the map\n ",non-directive
"@param key  the key\n",non-directive
" Gets the size of the list of keys.\n \n",non-directive
"@return the size of the list of keys\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Throws UnsupportedOperationException.\n \n",non-directive
"@param value  the new value\n ",non-directive
"@return the previous value\n ",non-directive
" Compares this <code>Map.Entry</code> with another <code>Map.Entry</code>.\n ",non-directive
"<p>\n Implemented per API documentation of {@link java.util.Map.Entry#equals(Object)}\n \n ",non-directive
"@param obj  the object to compare to\n ",non-directive
"@return true if equal key and value\n",non-directive
" Gets a hashCode compatible with the equals method.\n ",non-directive
"<p>\n Implemented per API documentation of {@link java.util.Map.Entry#hashCode()}\n \n ",non-directive
"@return a suitable hash code\n",non-directive
" Constructs a new pair with the specified key and given value.\n\n ",non-directive
"@param key  the key for the entry, may be null\n ",null-directive
"@param value  the value for the entry, may be null\n",null-directive
"\n Sets the value.\n\n ",non-directive
"@return the old value of the value\n ",non-directive
"@param value the new value\n ",non-directive
" Compares this <code>Map.Entry</code> with another <code>Map.Entry</code>.\n ",non-directive
"<p>\n Returns true if the compared object is also a <code>DefaultKeyValue</code>,\n and its key and value are equal to this object's key and value.\n \n",non-directive
"@param obj  the object to compare to\n ",non-directive
"@return true if equal key and value\n",non-directive
" Returns the number of occurrence of the given element in this bag by\n looking up its count in the underlying map.\n \n",non-directive
"@param object the object to search for\n ",non-directive
"@return the number of occurrences of the object, zero if not found\n",non-directive
" Determines if the bag contains the given element by checking if the\n underlying map contains the element as a key.\n \n",non-directive
"@param object the object to search for\n ",non-directive
"@return true if the bag contains the given element\n",non-directive
" Gets an iterator over the bag elements. ",non-directive
"Elements present in the Bag more\n than once will be returned repeatedly.\n \n",directive
"@return the iterator\n",non-directive
" Adds a new element to the bag, incrementing its count in the underlying\n map.\n \n",non-directive
"@param object the object to add\n ",non-directive
"@return <code>true</code> if the object was not already in the\n <code>uniqueSet</code>\n",non-directive
" Invokes {@link #add(Object)} for each element in the given collection.\n \n",directive
"@param coll the collection to add\n ",non-directive
"@return <code>true</code> if this call changed the bag\n",non-directive
" Removes a specified number of copies of an object from the bag.\n \n",non-directive
"@param object the object to remove\n ",non-directive
"@param nCopies the number of copies to remove\n ",non-directive
"@return true if the bag changed\n",non-directive
" Removes objects from the bag according to their count in the specified\n collection.\n \n",non-directive
"@param coll the collection to use\n ",non-directive
"@return true if the bag changed\n",non-directive
" Returns an array of all of this bag's elements.\n \n",non-directive
"@param array the array to populate\n ",non-directive
"@return an array of all of this bag's elements\n",non-directive
" Read the map in using a custom routine.\n ",non-directive
"@param map the map to use\n ",non-directive
"@param in the input stream\n ",non-directive
" Compares this Bag to another. ",non-directive
"This Bag equals another Bag if it contains\n the same number of occurrences of the same elements.\n \n",non-directive
"@param object the Bag to compare to\n ",non-directive
"@return true if equal\n",non-directive
" Gets a hash code for the Bag compatible with the definition of equals.\n ",non-directive
"The hash code is defined as the sum total of a hash code for each\n element. ",semi-directive
"The per element hash code is defined as\n <code>(e==null ? 0 : e.hashCode()) ^ noOccurances)</code>. ",non-directive
"This hash code\n is compatible with the Set interface.\n \n",semi-directive
"@return the hash code of the Bag\n",non-directive
" If a <code>CollectionMutator</code> is defined for this CompositeSet then this\n method will be called anyway.\n\n ",directive
"@param obj Object to be removed\n ",non-directive
"@return true if the object is removed, false otherwise\n",non-directive
" Constructs a new, empty map with the specified initial capacity and\n load factor.\n\n ",non-directive
"@param initialCapacity  the initial capacity\n ",non-directive
"@param loadFactor  the load factor\n ",non-directive
" Returns a set view of the mappings contained in this map.  ",non-directive
"Each element\n in the returned set is a <code>Map.Entry</code>.  ",non-directive
"The set is backed by the\n map, so changes to the map are reflected in the set, and vice-versa.\n ",directive
"If the map is modified while an iteration over the set is in progress,\n the results of the iteration are undefined.  ",directive
"The set supports element\n removal, which removes the corresponding mapping from the map, via the\n <tt>Iterator.remove</tt>, <tt>Set.remove</tt>, <tt>removeAll</tt>,\n <tt>retainAll</tt> and <tt>clear</tt> operations.  ",semi-directive
"It does not support\n the <tt>add</tt> or <tt>addAll</tt> operations.\n ",directive
"<p>\n This implementation returns a <code>CompositeSet</code> which\n composites the entry sets from all of the composited maps.\n\n ",non-directive
"@see CompositeSet\n ",non-directive
"@return a set view of the mappings contained in this map.\n",non-directive
" Returns a set view of the keys contained in this map.  ",non-directive
"The set is\n backed by the map, so changes to the map are reflected in the set, and\n vice-versa.  ",directive
"If the map is modified while an iteration over the set is\n in progress, the results of the iteration are undefined.  ",directive
"The set\n supports element removal, which removes the corresponding mapping from\n the map, via the <tt>Iterator.remove</tt>, <tt>Set.remove</tt>,\n <tt>removeAll</tt> <tt>retainAll</tt>, and <tt>clear</tt> operations.\n ",semi-directive
"It does not support the add or <tt>addAll</tt> operations.\n ",directive
"<p>\n This implementation returns a <code>CompositeSet</code> which\n composites the key sets from all of the composited maps.\n\n ",non-directive
"@return a set view of the keys contained in this map.\n",non-directive
" Returns a collection view of the values contained in this map.  ",non-directive
"The\n collection is backed by the map, so changes to the map are reflected in\n the collection, and vice-versa.  ",directive
"If the map is modified while an\n iteration over the collection is in progress, the results of the\n iteration are undefined.  ",directive
"The collection supports element removal,\n which removes the corresponding mapping from the map, via the\n <tt>Iterator.remove</tt>, <tt>Collection.remove</tt>,\n <tt>removeAll</tt>, <tt>retainAll</tt> and <tt>clear</tt> operations.\n ",semi-directive
"It does not support the add or <tt>addAll</tt> operations.\n\n ",directive
"@return a collection view of the values contained in this map.\n",non-directive
" Checks if this Map equals another as per the Map specification.\n\n ",non-directive
"@param obj  the object to compare to\n ",non-directive
"@return true if the maps are equal\n",non-directive
" Create a new CompositeMap with two composited Map instances.\n\n ",non-directive
"@param one  the first Map to be composited\n ",non-directive
"@param two  the second Map to be composited\n ",non-directive
" Create a new CompositeMap with two composited Map instances.\n\n ",non-directive
"@param one  the first Map to be composited\n ",non-directive
"@param two  the second Map to be composited\n ",non-directive
"@param mutator  MapMutator to be used for mutation operations\n",non-directive
" Create a new CompositeMap which composites all of the Map instances in the\n argument. ",non-directive
"It copies the argument array, it does not use it directly.\n\n ",directive
"@param composite  the Maps to be composited\n ",non-directive
" Create a new CompositeMap which composites all of the Map instances in the\n argument. ",non-directive
"It copies the argument array, it does not use it directly.\n\n ",directive
"@param composite  Maps to be composited\n ",non-directive
"@param mutator  MapMutator to be used for mutation operations\n",non-directive
" Called when the CompositeMap.put() method is invoked.\n\n ",directive
"@param map  the CompositeMap which is being modified\n ",non-directive
"@param composited  array of Maps in the CompositeMap being modified\n ",non-directive
"@param key  key with which the specified value is to be associated.\n ",non-directive
"@param value  value to be associated with the specified key.\n ",non-directive
"@return previous value associated with specified key, or <tt>null</tt>\n         if there was no mapping for key.  ",null-directive
"A <tt>null</tt> return can\n         also indicate that the map previously associated <tt>null</tt>\n         with the specified key, if the implementation supports\n         <tt>null</tt> values.\n\n ",directive
" Overrides convertKey() from {@link AbstractHashedMap} to convert keys to \n lower case.\n ",directive
"<p>\n Returns {@link AbstractHashedMap#NULL} if key is null.\n \n",null-directive
"@param key  the key convert\n ",non-directive
"@return the converted key\n",non-directive
" Constructs a new, empty map with the specified initial capacity and\n load factor. \n\n ",non-directive
"@param initialCapacity  the initial capacity\n ",non-directive
"@param loadFactor  the load factor\n ",non-directive
" Gets the value mapped to the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@return the mapped value, null if no match\n",non-directive
" Checks whether the map contains the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@return true if the map contains the key\n",non-directive
" Stores the value against the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param value  the value to store\n ",non-directive
"@return the value previously mapped to this combined key, null if none\n",null-directive
" Removes the specified multi-key from this map.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@return the value mapped to the removed key, null if key not in map\n",null-directive
" Gets the hash code for the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@return the hash code\n",non-directive
" Is the key equal to the combined key.\n \n",non-directive
"@param entry  the entry to compare to\n ",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@return true if the key matches\n",non-directive
" Gets the value mapped to the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@return the mapped value, null if no match\n",null-directive
" Stores the value against the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@param value  the value to store\n ",non-directive
"@return the value previously mapped to this combined key, null if none\n",null-directive
" Removes the specified multi-key from this map.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@return the value mapped to the removed key, null if key not in map\n",null-directive
" Gets the hash code for the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@return the hash code\n",non-directive
" Is the key equal to the combined key.\n \n",non-directive
"@param entry  the entry to compare to\n ",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@return true if the key matches\n",non-directive
" Gets the value mapped to the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@param key4  the fourth key\n ",non-directive
"@return the mapped value, null if no match\n",null-directive
" Checks whether the map contains the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@param key4  the fourth key\n ",non-directive
"@return true if the map contains the key\n",non-directive
" Stores the value against the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@param key4  the fourth key\n ",non-directive
"@param value  the value to store\n ",non-directive
"@return the value previously mapped to this combined key, null if none\n",null-directive
" Gets the hash code for the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@param key4  the fourth key\n ",non-directive
"@return the hash code\n",non-directive
" Is the key equal to the combined key.\n \n",non-directive
"@param entry  the entry to compare to\n ",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@param key4  the fourth key\n ",non-directive
"@return true if the key matches\n",non-directive
" Gets the value mapped to the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@param key4  the fourth key\n ",non-directive
"@param key5  the fifth key\n ",non-directive
"@return the mapped value, null if no match\n",null-directive
" Stores the value against the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@param key4  the fourth key\n ",non-directive
"@param key5  the fifth key\n ",non-directive
"@param value  the value to store\n ",non-directive
"@return the value previously mapped to this combined key, null if none\n",null-directive
" Removes the specified multi-key from this map.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@param key4  the fourth key\n ",non-directive
"@param key5  the fifth key\n ",non-directive
"@return the value mapped to the removed key, null if key not in map\n",null-directive
" Gets the hash code for the specified multi-key.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@param key4  the fourth key\n ",non-directive
"@param key5  the fifth key\n ",non-directive
"@return the hash code\n",non-directive
" Is the key equal to the combined key.\n \n",non-directive
"@param entry  the entry to compare to\n ",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@param key4  the fourth key\n ",non-directive
"@param key5  the fifth key\n ",non-directive
"@return true if the key matches\n",non-directive
" Removes all mappings where the first key is that specified.\n ",non-directive
"<p>\n This method removes all the mappings where the <code>MultiKey</code>\n has one or more keys, and the first matches that specified.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@return true if any elements were removed\n",non-directive
" Removes all mappings where the first two keys are those specified.\n ",non-directive
"<p>\n This method removes all the mappings where the <code>MultiKey</code>\n has two or more keys, and the first two match those specified.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@return true if any elements were removed\n",non-directive
" Removes all mappings where the first three keys are those specified.\n ",non-directive
"<p>\n This method removes all the mappings where the <code>MultiKey</code>\n has three or more keys, and the first three match those specified.\n \n",non-directive
"@param key1  the first key\n ",non-directive
"@param key2  the second key\n ",non-directive
"@param key3  the third key\n ",non-directive
"@return true if any elements were removed\n",non-directive
" Removes a specific value from map.\n ",non-directive
"<p>\n The item is removed from the collection mapped to the specified key.\n ",non-directive
"Other values attached to that key are unaffected.\n ",directive
"<p>\n If the last value for a key is removed, <code>null</code> will be returned\n from a subsequant <code>get(key)</code>.\n\n ",non-directive
"@param key  the key to remove from\n ",non-directive
"@param value the value to remove\n ",non-directive
"@return the value removed (which was passed in), null if nothing removed\n",null-directive
" Checks whether the map contains the value specified.\n ",non-directive
"<p>\n This checks all collections against all keys for the value, and thus could be slow.\n\n ",semi-directive
"@param value  the value to search for\n ",non-directive
"@return true if the map contains the value\n",non-directive
" Adds the value to the collection associated with the specified key.\n ",non-directive
"<p>\n Unlike a normal <code>Map</code> the previous value is not replaced.\n ",directive
"Instead the new value is added to the collection stored against the key.\n\n ",non-directive
"@param key  the key to store against\n ",non-directive
"@param value  the value to add to the collection at the key\n ",non-directive
"@return the value added if the map changed and null if the map did not change\n",null-directive
" Override superclass to ensure that MultiMap instances are\n correctly handled.\n ",directive
"<p>\n If you call this method with a normal map, each entry is\n added using <code>put(Object,Object)</code>.\n ",directive
"If you call this method with a multi map, each entry is\n added using <code>putAll(Object,Collection)</code>.\n\n ",directive
"@param map  the map to copy (either a normal or multi map)\n",non-directive
" Gets a collection containing all the values in the map.\n ",non-directive
"<p>\n This returns a collection containing the combination of values from all keys.\n\n ",non-directive
"@return a collection view of the values contained in this map\n",non-directive
" Gets the collection mapped to the specified key.\n ",non-directive
"This method is a convenience method to typecast the result of <code>get(key)</code>.\n\n ",semi-directive
"@param key  the key to retrieve\n ",non-directive
"@return the collection mapped to the key, null if no mapping\n",non-directive
" Gets an iterator for the collection mapped to the specified key.\n\n ",non-directive
"@param key  the key to get an iterator for\n ",non-directive
"@return the iterator of the collection at the key, empty iterator if key not in map\n",non-directive
" Gets the key at the specified index.\n \n",non-directive
"@param index  the index to retrieve\n ",non-directive
"@return the key at the specified index\n ",non-directive
" Gets the value at the specified index.\n \n",non-directive
"@param index  the index to retrieve\n ",non-directive
"@return the value at the specified index\n ",non-directive
" Gets the index of the specified key.\n \n",non-directive
"@param key  the key to find the index of\n ",non-directive
"@return the index, or -1 if not found\n",non-directive
" Removes the element at the specified index.\n\n ",non-directive
"@param index  the index of the object to remove\n ",non-directive
"@return the previous value corresponding the <code>key</code>,\n  or <code>null</code> if none existed\n ",null-directive
" Constructs a new, empty map with the specified initial capacity and\n load factor. \n\n ",non-directive
"@param initialCapacity  the initial capacity\n ",non-directive
"@param loadFactor  the load factor\n ",non-directive
" Validates a key value pair.\n \n",non-directive
"@param key  the key to validate\n ",non-directive
"@param value  the value to validate\n ",non-directive
" Gets the value mapped to the key specified.\n\n ",non-directive
"@param key  the key\n ",non-directive
"@return the mapped value, null if no match\n",null-directive
" Checks whether the map contains the specified key.\n\n ",non-directive
"@param key  the key to search for\n ",non-directive
"@return true if the map contains the key\n",non-directive
" Checks whether the map contains the specified value.\n\n ",non-directive
"@param value  the value to search for\n ",non-directive
"@return true if the map contains the key\n",non-directive
" Removes the specified mapping from this map.\n\n ",non-directive
"@param key  the mapping to remove\n ",non-directive
"@return the value mapped to the removed key, null if key not in map\n",null-directive
" Gets an iterator over the map.\n ",non-directive
"Changes made to the iterator affect this map.\n ",directive
"<p>\n A MapIterator returns the keys in the map. ",non-directive
"It also provides convenient\n methods to get the key and value, and set the value.\n ",non-directive
"It avoids the need to create an entrySet/keySet/values object.\n ",semi-directive
"It also avoids creating the Map Entry object.\n\n ",non-directive
"@return the map iterator\n",non-directive
" Clones the map without cloning the keys or values.\n\n ",non-directive
"@return a shallow clone\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Gets the hash code for the key specified.\n ",non-directive
"<p>\n This implementation uses the identity hash code.\n \n",semi-directive
"@param key  the key to get a hash code for\n ",non-directive
"@return the hash code\n",non-directive
" Compares two keys for equals.\n ",non-directive
"<p>\n This implementation converts the key from the entry to a real reference\n before comparison and uses <code>==</code>.\n \n",directive
"@param key1  the first key to compare passed in from outside\n ",non-directive
"@param key2  the second key extracted from the entry via <code>entry.key</code>\n ",non-directive
"@return true if equal by identity\n",non-directive
" Compares two values for equals.\n ",non-directive
"<p>\n This implementation uses <code>==</code>.\n \n",non-directive
"@param value1  the first value to compare passed in from outside\n ",non-directive
"@param value2  the second value extracted from the entry via <code>getValue()</code>\n ",non-directive
"@return true if equal by identity\n",non-directive
" Constructs a new empty <code>DefaultedMap</code> that decorates\n a <code>HashMap</code>.\n ",non-directive
"<p>\n The object passed in will be returned by the map whenever an\n unknown key is requested.\n \n",non-directive
"@param defaultValue  the default value to return when the key is not found\n",non-directive
" Checks whether the map contains the specified value.\n \n",non-directive
"@param value  the value to search for\n ",non-directive
"@return true if the map contains the value\n",non-directive
" Gets the next key in sequence.\n \n",non-directive
"@param key  the key to get after\n ",non-directive
"@return the next key\n",non-directive
" Gets the previous key in sequence.\n \n",non-directive
"@param key  the key to get before\n ",non-directive
"@return the previous key\n",non-directive
" Gets the key at the specified index.\n \n",non-directive
"@param index  the index to retrieve\n ",non-directive
"@return the key at the specified index\n ",non-directive
" Adds an entry into this map, maintaining insertion order.\n ",non-directive
"<p>\n This implementation adds the entry to the data storage table and\n to the end of the linked list.\n \n",directive
"@param link  the entry to add\n ",non-directive
"@param hashIndex  the index into the data array to store at\n",non-directive
" Creates an entry to store the data.\n ",non-directive
"<p>\n This implementation creates a new LinkEntry instance.\n \n",non-directive
"@param next  the next entry in sequence\n ",non-directive
"@param hashCode  the hash code to use\n ",non-directive
"@param key  the key to store\n ",non-directive
"@param value  the value to store\n ",non-directive
"@return the newly created entry\n",non-directive
" Removes an entry from the map and the linked list.\n ",non-directive
"<p>\n This implementation removes the entry from the linked list chain, then\n calls the superclass implementation.\n \n",directive
"@param entry  the entry to remove\n ",non-directive
"@param hashIndex  the index into the data structure\n ",non-directive
"@param previous  the previous entry in the chain\n",non-directive
" Constructs a new, empty map with the specified initial capacity and\n load factor. \n\n ",non-directive
"@param initialCapacity  the initial capacity\n ",non-directive
"@param loadFactor  the load factor\n ",non-directive
" Constructs a new entry.\n \n",non-directive
"@param next  the next entry in the hash bucket sequence\n ",non-directive
"@param hashCode  the hash code\n ",non-directive
"@param key  the key\n ",non-directive
"@param value  the value\n",non-directive
" Gets the current size of the map.\n ",non-directive
"The value is computed fresh each time the method is called.\n \n",non-directive
"@return the current size\n",non-directive
" Gets the value associated with the key.\n \n",non-directive
"@param key  the key to retrieve\n ",non-directive
"@return the associated value\n",non-directive
" Checks if the map contains the specified key.\n \n",non-directive
"@param key  the key to check\n ",non-directive
"@return true if found\n",non-directive
" Checks if the map contains the specified value.\n \n",non-directive
"@param value  the value to check\n ",non-directive
"@return true if found\n",non-directive
" Puts a new key value mapping into the map.\n \n",non-directive
"@param key  the key to use\n ",non-directive
"@param value  the value to use\n ",non-directive
"@return the previous mapping for the key\n",non-directive
" Removes the specified key from the map.\n \n",non-directive
"@param key  the key to remove\n ",non-directive
"@return the previous value at this key\n",non-directive
" Compares this map to another, as per the Map specification.\n \n",non-directive
"@param obj  the object to compare to\n ",non-directive
"@return true if equal\n",non-directive
" Gets the value mapped to the key specified.\n ",non-directive
"<p>\n This operation changes the position of the key in the map to the\n most recently used position (first).\n\n ",directive
"@param key  the key\n ",non-directive
"@return the mapped value, null if no match\n",null-directive
" Moves an entry to the MRU position at the end of the list.\n ",non-directive
"<p>\n This implementation moves the updated entry to the end of the list.\n\n ",directive
"@param entry  the entry to update\n",non-directive
" Updates an existing key-value mapping.\n ",non-directive
"<p>\n This implementation moves the updated entry to the top of the list\n using {@link #moveToMRU(AbstractLinkedMap.LinkEntry)}.\n\n ",directive
"@param entry  the entry to update\n ",non-directive
"@param newValue  the new value to store\n",non-directive
" Reuses an entry by removing it and moving it to a new place in the map.\n ",non-directive
"<p>\n This method uses {@link #removeEntry}, {@link #reuseEntry} and {@link #addEntry}.\n\n ",semi-directive
"@param entry  the entry to reuse\n ",non-directive
"@param hashIndex  the index into the data array to store at\n ",non-directive
"@param hashCode  the hash code of the key to add\n ",non-directive
"@param key  the key to add\n ",non-directive
"@param value  the value to add\n",non-directive
" Whether this LRUMap will scan until a removable entry is found when the\n map is full.\n\n ",non-directive
"@return true if this map scans\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructs a new, empty map with the specified maximum size.\n\n ",non-directive
"@param maxSize  the maximum size of the map\n ",non-directive
"@param scanUntilRemovable  scan until a removeable entry is found, default false\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructs a new, empty map with the specified initial capacity and\n load factor.\n\n ",non-directive
"@param maxSize  the maximum size of the map\n ",non-directive
"@param loadFactor  the load factor\n ",non-directive
" Constructs a new, empty map with the specified initial capacity and\n load factor.\n\n ",non-directive
"@param maxSize  the maximum size of the ma\n ",non-directive
"@param loadFactor  the load factor\n ",non-directive
"@param scanUntilRemovable  scan until a removeable entry is found, default false\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Constructor copying elements from another map.\n ",non-directive
"<p>\n The maximum size is set from the map's size.\n\n ",non-directive
"@param map  the map to copy\n ",non-directive
" Constructor copying elements from another map.\n ",non-directive
"<p/>\n The maximum size is set from the map's size.\n\n ",non-directive
"@param map  the map to copy\n ",non-directive
"@param scanUntilRemovable  scan until a removeable entry is found, default false\n ",non-directive
"@since Commons Collections 3.1\n",non-directive
" Sets the value.\n\n ",non-directive
"@param value  the new value to set\n ",non-directive
"@return the old value\n",non-directive
" Checks whether the map contains the specified value.\n \n",non-directive
"@param value  the value to search for\n ",non-directive
"@return true if the map contains the key\n",non-directive
" Unsupported operation.\n \n",non-directive
"@param key  the mapping to remove\n ",non-directive
"@return the value mapped to the removed key, null if key not in map\n ",null-directive
" Gets the entrySet view of the map.\n ",non-directive
"Changes made via <code>setValue</code> affect this map.\n ",directive
"To simply iterate through the entries, use {@link #mapIterator()}.\n \n",semi-directive
"@return the entrySet view\n",non-directive
" Gets the unmodifiable keySet view of the map.\n ",non-directive
"Changes made to the view affect this map.\n ",directive
"To simply iterate through the keys, use {@link #mapIterator()}.\n \n",semi-directive
"@return the keySet view\n",non-directive
" Gets the unmodifiable values view of the map.\n ",non-directive
"Changes made to the view affect this map.\n ",directive
"To simply iterate through the values, use {@link #mapIterator()}.\n \n",semi-directive
"@return the values view\n",non-directive
" Compares the specified key to the stored key.\n \n",non-directive
"@param key  the key to compare\n ",non-directive
"@return true if equal\n",non-directive
" Compares this map with another.\n \n",non-directive
"@param obj  the object to compare to\n ",non-directive
"@return true if equal\n",non-directive
" Constructor specifying the key and value.\n\n ",non-directive
"@param key  the key to use\n ",non-directive
"@param value  the value to use\n",non-directive
" Gets the value mapped to the key specified.\n\n ",non-directive
"@param key  the key\n ",non-directive
"@return the mapped value, null if no match\n",null-directive
" Puts a key-value mapping into this map.\n\n ",non-directive
"@param key  the key to add\n ",non-directive
"@param value  the value to add\n ",non-directive
"@return the value previously mapped to this key, null if none\n",directive
" Removes the specified mapping from this map.\n\n ",non-directive
"@param key  the mapping to remove\n ",non-directive
"@return the value mapped to the removed key, null if key not in map\n",null-directive
" Gets the entry mapped to the key specified.\n ",non-directive
"<p>\n This method exists for subclasses that may need to perform a multi-step\n process accessing the entry. ",semi-directive
"The public methods in this class don't use this\n method to gain a small performance boost.\n\n ",semi-directive
"@param key  the key\n ",non-directive
"@return the entry, null if no match\n",null-directive
" Gets an iterator over the map.\n ",non-directive
"Changes made to the iterator affect this map.\n ",directive
"<p>\n A MapIterator returns the keys in the map. ",non-directive
"It also provides convenient\n methods to get the key and value, and set the value.\n ",non-directive
"It avoids the need to create an entrySet/keySet/values object.\n ",semi-directive
"It also avoids creating the Map.Entry object.\n\n ",semi-directive
"@return the map iterator\n",non-directive
" Gets the keySet view of the map.\n ",non-directive
"Changes made to the view affect this map.\n ",directive
"To simply iterate through the keys, use {@link #mapIterator()}.\n\n ",semi-directive
"@return the keySet view\n",non-directive
" Compares this map with another.\n\n ",non-directive
"@param obj  the object to compare to\n ",non-directive
"@return true if equal\n",non-directive
" Compares two values for equals.\n ",non-directive
"This implementation uses <code>==</code>.\n\n ",non-directive
"@param value1  the first value to compare\n ",non-directive
"@param value2  the second value to compare\n ",non-directive
"@return true if equal by identity\n",non-directive
" Creates an entry to store the data.\n ",non-directive
"This implementation creates an IdentityEntry instance.\n\n ",non-directive
"@param next  the next entry in sequence\n ",non-directive
"@param hashCode  the hash code to use\n ",non-directive
"@param key  the key to store\n ",non-directive
"@param value  the value to store\n ",non-directive
"@return the newly created entry\n",non-directive
" Checks whether the map contains the specified key.\n\n ",non-directive
"@param key  the key to search for\n ",non-directive
"@return true if the map contains the key\n",non-directive
" Checks whether the map contains the specified value.\n\n ",non-directive
"@param value  the value to search for\n ",non-directive
"@return true if the map contains the value\n",non-directive
" Removes the specified mapping from this map.\n\n ",non-directive
"@param key  the mapping to remove\n ",non-directive
"@return the value mapped to the removed key, null if key not in map\n",null-directive
" Gets a MapIterator over the reference map.\n ",non-directive
"The iterator only returns valid key/value pairs.\n\n ",directive
"@return a map iterator\n",non-directive
" Compares two keys, in internal converted form, to see if they are equal.\n ",non-directive
"<p>\n This implementation converts the key from the entry to a real reference\n before comparison.\n\n ",directive
"@param key1  the first key to compare passed in from outside\n ",non-directive
"@param key2  the second key extracted from the entry via <code>entry.key</code>\n ",non-directive
"@return true if equal\n",non-directive
" Creates a ReferenceEntry instead of a HashEntry.\n\n ",non-directive
"@param next  the next entry in sequence\n ",non-directive
"@param hashCode  the hash code to use\n ",non-directive
"@param key  the key to store\n ",non-directive
"@param value  the value to store\n ",non-directive
"@return the newly created entry\n",non-directive
" Resolve enum from int.\n ",non-directive
"@param value\n ",non-directive
"@return ReferenceType\n ",non-directive
" Sets the value of the entry.\n\n ",non-directive
"@param obj  the object to store\n ",non-directive
"@return the previous value\n",non-directive
" Compares this map entry to another.\n ",non-directive
"<p>\n This implementation uses <code>isEqualKey</code> and\n <code>isEqualValue</code> on the main map for comparison.\n\n ",non-directive
"@param obj  the other map entry to compare to\n ",non-directive
"@return true if equal, false if not\n",non-directive
" Gets the hashcode of the entry using temporary hard references.\n ",non-directive
"<p>\n This implementation uses <code>hashEntry</code> on the main map.\n\n ",non-directive
"@return the hashcode of the entry\n",non-directive
" Constructs a reference of the given type to the given referent.\n ",non-directive
"The reference is registered with the queue for later purging.\n\n ",non-directive
"@param type  HARD, SOFT or WEAK\n ",non-directive
"@param referent  the object to refer to\n ",non-directive
"@param hash  the hash code of the <i>key</i> of the mapping;\n    this number might be different from referent.hashCode() if\n    the referent represents a value and not a key\n",directive
" Creates a new entry object for the ReferenceMap.\n\n ",non-directive
"@param parent  the parent map\n ",non-directive
"@param next  the next entry in the hash bucket\n ",non-directive
"@param hashCode  the hash code of the key\n ",non-directive
"@param key  the key\n ",non-directive
"@param value  the value\n",non-directive
" Gets the next key to the one specified using insert order.\n ",non-directive
"This method performs a list search to find the key and is O(n).\n \n",semi-directive
"@param key  the key to find previous for\n ",non-directive
"@return the next key, null if no match or at start\n",null-directive
" Gets the previous key to the one specified using insert order.\n ",non-directive
"This method performs a list search to find the key and is O(n).\n \n",semi-directive
"@param key  the key to find previous for\n ",non-directive
"@return the previous key, null if no match or at start\n",null-directive
" Puts the values contained in a supplied Map into the Map starting at\n the specified index.\n\n ",non-directive
"@param index the index in the Map to start at.\n ",non-directive
"@param map the Map containing the values to be added.\n",non-directive
" Gets a view over the keys in the map.\n ",non-directive
"<p>\n The Collection will be ordered by object insertion into the map.\n\n ",non-directive
"@see #keyList()\n ",non-directive
"@return the fully modifiable collection view over the keys\n",non-directive
" Gets a view over the keys in the map as a List.\n ",non-directive
"<p>\n The List will be ordered by object insertion into the map.\n ",non-directive
"The List is unmodifiable.\n\n ",directive
"@see #keySet()\n ",non-directive
"@return the unmodifiable list view over the keys\n ",non-directive
"@since Commons Collections 3.2\n",non-directive
" Gets a view over the values in the map.\n ",non-directive
"<p>\n The Collection will be ordered by object insertion into the map.\n ",non-directive
"<p>\n From Commons Collections 3.2, this Collection can be cast\n to a list, see {@link #valueList()}\n\n ",semi-directive
"@see #valueList()\n ",non-directive
"@return the fully modifiable collection view over the values\n",non-directive
" Gets a view over the values in the map as a List.\n ",non-directive
"<p>\n The List will be ordered by object insertion into the map.\n ",non-directive
"The List supports remove and set, but does not support add.\n\n ",directive
"@see #values()\n ",non-directive
"@return the partially modifiable list view over the values\n ",non-directive
"@since Commons Collections 3.2\n",non-directive
" Gets a view over the entries in the map.\n ",non-directive
"<p>\n The Set will be ordered by object insertion into the map.\n\n ",non-directive
"@return the fully modifiable set view over the entries\n",non-directive
" Gets the value at the specified index.\n \n",non-directive
"@param index  the index to retrieve\n ",non-directive
"@return the key at the specified index\n ",non-directive
" Gets the index of the specified key.\n \n",non-directive
"@param key  the key to find the index of\n ",non-directive
"@return the index, or -1 if not found\n",non-directive
" Puts a key-value mapping into the map at the specified index.\n ",non-directive
"<p>\n If the map already contains the key, then the original mapping\n is removed and the new mapping added at the specified index.\n ",directive
"The remove may change the effect of the index. ",directive
"The index is\n always calculated relative to the original state of the map.\n ",directive
"<p>\n Thus the steps are: (1) remove the existing key-value mapping,\n then (2) insert the new key-value mapping at the position it\n would have been inserted had the remove not ocurred.\n\n ",directive
"@param index  the index at which the mapping should be inserted\n ",non-directive
"@param key  the key\n ",non-directive
"@param value  the value\n ",non-directive
"@return the value previously mapped to the key\n ",non-directive
"@since Commons Collections 3.2\n",non-directive
" Removes the element at the specified index.\n\n ",non-directive
"@param index  the index of the object to remove\n ",non-directive
"@return the removed value, or <code>null</code> if none existed\n ",null-directive
" Transforms a key.\n ",non-directive
"<p>\n The transformer itself may throw an exception if necessary.\n\n ",directive
"@param object  the object to transform\n ",non-directive
" Transforms a value.\n ",non-directive
"<p>\n The transformer itself may throw an exception if necessary.\n\n ",directive
"@param object  the object to transform\n ",non-directive
" Transforms a map.\n ",non-directive
"<p>\n The transformer itself may throw an exception if necessary.\n\n ",directive
"@param map  the map to transform\n ",non-directive
" Gets the collection being decorated.\n ",non-directive
"All access to the decorated collection goes via this method.\n \n",non-directive
"@return the decorated collection\n",non-directive
" Transforms a collection.\n ",non-directive
"<p>\n The transformer itself may throw an exception if necessary.\n \n",directive
"@param coll  the collection to transform\n ",non-directive
"@return a transformed object\n",non-directive
" Gets the size of this composite collection.\n ",non-directive
"<p>\n This implementation calls <code>size()</code> on each collection.\n\n ",directive
"@return total number of elements in all contained containers\n",non-directive
" Checks whether this composite collection is empty.\n ",non-directive
"<p>\n This implementation calls <code>isEmpty()</code> on each collection.\n\n ",directive
"@return true if all of the contained collections are empty\n",non-directive
" Checks whether this composite collection contains the object.\n ",non-directive
"<p>\n This implementation calls <code>contains()</code> on each collection.\n\n ",directive
"@param obj  the object to search for\n ",non-directive
"@return true if obj is contained in any of the contained collections\n",non-directive
" Returns an object array, populating the supplied array if possible.\n ",non-directive
"See <code>Collection</code> interface for full details.\n\n ",non-directive
"@param array  the array to use, populating if possible\n ",non-directive
"@return an array of all the elements in the collection\n",non-directive
" Adds an object to the collection, throwing UnsupportedOperationException\n unless a CollectionMutator strategy is specified.\n\n ",non-directive
"@param obj  the object to add\n ",non-directive
"@return true if the collection was modified\n ",non-directive
" Adds a collection of elements to this collection, throwing\n UnsupportedOperationException unless a CollectionMutator strategy is specified.\n\n ",non-directive
"@param coll  the collection to add\n ",non-directive
"@return true if the collection was modified\n ",non-directive
" Removes the elements in the specified collection from this composite collection.\n ",non-directive
"<p>\n This implementation calls <code>removeAll</code> on each collection.\n\n ",directive
"@param coll  the collection to remove\n ",non-directive
"@return true if the collection was modified\n ",non-directive
" Retains all the elements in the specified collection in this composite collection,\n removing all others.\n ",non-directive
"<p>\n This implementation calls <code>retainAll()</code> on each collection.\n\n ",directive
"@param coll  the collection to remove\n ",non-directive
"@return true if the collection was modified\n ",non-directive
" Create a Composite Collection with two collections.\n\n ",non-directive
"@param compositeCollection1  the Collection to be appended to the composite\n ",non-directive
"@param compositeCollection2  the Collection to be appended to the composite\n",non-directive
" Called when an object is to be added to the composite.\n\n ",directive
"@param composite  the CompositeCollection being changed\n ",non-directive
"@param collections  all of the Collection instances in this CompositeCollection\n ",non-directive
"@param obj  the object being added\n ",non-directive
"@return true if the collection is changed\n ",non-directive
" Called when a collection is to be added to the composite.\n\n ",directive
"@param composite  the CompositeCollection being changed\n ",non-directive
"@param collections  all of the Collection instances in this CompositeCollection\n ",non-directive
"@param coll  the collection being added\n ",non-directive
"@return true if the collection is changed\n ",non-directive
